[, this simple mechanism provides a powerful new tool which enables a host of new types of applications to be written for web-based environments. shopping applications can now store information about the currently selected items, for fee services can send back registration information and free the client from retyping a user-id on next connection, sites can store per-user preferences on the client, and have the client supply those preferences every time that site is connected to., this is the only required attribute on the set-cookie header., , the date string is formatted as:, expires is an optional attribute. if not specified, the cookie will expire when the user's session ends., note: there is a bug in netscape navigator version 1.1 and earlier. only cookies whose path attribute is set explicitly to "/" will be properly saved between sessions if they have an expires attribute., , only hosts within the specified domain can set a cookie for a domain and domains must have at least two (2) or three (3) periods in them to prevent domains of the form: ".com", ".edu", and "va.us". any domain that fails within one of the seven special top level domains listed below only require two periods. any other domain requires at least three. the seven special top level domains are: "com", "edu", "net", "org", "gov", "mil", and "int"., the default value of domain is the host name of the server which generated the cookie response., , if the path is not specified, it as assumed to be the same path as the document being described by the header which contains the cookie., , if secure is not specified, a cookie is considered safe to be sent in the clear over unsecured channels., , , , , , , , , similarly, if a client request contains a cookie: header, it should be forwarded through a proxy, even if the conditional if-modified-since request is being made., , , ][persistent client state http cookies, preliminary specification - use with caution, introduction, overview, specification, syntax of the set-cookie http response header, syntax of the cookie http request header, additional notes, examples, first example transaction sequence:, second example transaction sequence:]client side state - http cookies[jul, sep, 2006, 2008][multiple set-cookie headers can be issued in a single server response., instances of the same path and name will overwrite each other, with the latest instance taking precedence. instances of the same path but different names will add additional mappings., setting the path to a higher-level value does not override other more specific path mappings. if there are multiple matches for a given cookie name, but with separate paths, all the matching cookies will be sent. (see examples below.), the expires header lets the client know when it is safe to purge the mapping but the client is not required to do so. a client may also delete a cookie before it's expiration date arrives if the number of cookies exceeds its internal limits., when sending cookies to a server, all cookies with a more specific path mapping should be sent before cookies with less specific path mappings. for example, a cookie "name1=foo" with a path mapping of "/" should be sent after a cookie "name1=foo2" with a path mapping of "/bar" if they are both to be sent., there are limitations on the number of cookies that a client can store at any one time. this is a specification of the minimum number of cookies that a client should be prepared to receive and store. 300 total cookies 4 kilobytes per cookie, where the name and the opaque_string combine to form the 4 kilobyte limit. 20 cookies per server or domain. (note that completely specified hosts and domains are treated as separate entities and have a 20 cookie limitation for each, not combined) servers should not expect clients to be able to exceed these limits. when the 300 cookie limit or the 20 cookie per server limit is exceeded, clients should delete the least recently used cookie. when a cookie larger than 4 kilobytes is encountered the cookie should be trimmed to fit, but the name should remain intact as long as it is less than 4 kilobytes., 300 total cookies, 4 kilobytes per cookie, where the name and the opaque_string combine to form the 4 kilobyte limit., 20 cookies per server or domain. (note that completely specified hosts and domains are treated as separate entities and have a 20 cookie limitation for each, not combined), if a cgi script wishes to delete a cookie, it can do so by returning a cookie with the same name, and an expires time which is in the past. the path and name must match exactly in order for the expiring cookie to replace the valid cookie. this requirement makes it difficult for anyone but the originator of a cookie to delete a cookie., when caching http, as a proxy server might do, the set-cookie response header should never be cached., if a proxy server receives a response which contains a set-cookie header, it should propagate the set-cookie header to the client, regardless of whether the response was 304 (not modified) or 200 (ok). similarly, if a client request contains a cookie: header, it should be forwarded through a proxy, even if the conditional if-modified-since request is being made.]