[<html source="excellent">, search the source  ¤, path // www.yourhtmlsource.com → javascript → cookies, cookies are the name given to the small text files your browser stores on your computer, which contain information relevant to the sites you have visited in the past. using javascript you can write to these text files and then extract data from them whenever your reader returns to your site., page navigation: why we use cookies | structure of a cookie | setting, reading and erasing cookies | convenient scripts, this page was last updated on 2012-08-21, cookies are necessary because the http protocol that is used to transfer webpages around the web is state-less. this means that web servers cannot remember information about users throughout their travels, and so everyone becomes anonymous. if you ever return to a site you have visited previously, you are treated as if it was your first visit., this is especially unsatisfactory for sites which ask their users to log in — if you leave and return just a few minutes later, you'll have to log in again. the server doesn't remember anything about your visit or your preferred settings. so, cookies were invented to give memory, of a sort, to web servers., cookies are no more than simple text files — usually found in your browser cache, or ‘temporary internet files’ — which contain one or more entries. each entry is made up of, you can use javascript to read or write a new entry to the cookie file. the process of creating an entry is often referred to as ‘writing a cookie’, but this is misleading. the cookie is the text file which contains all of your entries, while the individual entries themselves hold the data. each domain name on the web can have a cookie file associated with it, and each cookie can hold multiple entries., when you request a file from a server that you have used previously, the data in the relevant cookie is sent to the server along with your request. this way, server-side scripts, such as those written in perl or » php, can read your cookie and figure out whether you have permission to view a certain page, for instance. cookies can also be used for somewhat more malicious purposes, usually by advertising companies to track your behaviour online. most modern browsers include good measures that allow you to block cookies from certain sites, so which sites you disclose information to is now at your discretion., the name-value pair part of the entry is very similar to declaring a variable — when you want to retrieve information you ask for the value that is associated with a name that you provide. the expiry date is expressed in an unfriendly utc format; though fortunately there are methods for generating a suitable date. if a date is not set, the entry is deleted when you close your browser., the domain and path that you associate your cookie with have to be part of the same domain that your site belongs to. for instance, i can set my cookie to be active for www.yourhtmlsource.com, the default; or to yourhtmlsource.com, which will cover any and all subdomains i set up for the site. i cannot, however, set it to yahoo.com, for obvious security reasons. using the path you can restrict a cookie to be valid for only a certain directory. usually you'll want it to be available to any page in the domain, so this is set to /, the root directory., the document has an object in javascript called document.cookie, which is used to read and retrieve cookie data. it is a repository of strings (though not an array). you can create new entries, read out an existing name-value pair, or erase an entry through javascript. to create a cookie for my site, i write, the whole entry is supplied as one quoted string with segments set apart with semicolons — first the name-value pair, then the expiry date in the correct format, and finally the path. this syntax is fixed, and you shouldn't go rearranging the elements. write this entry now. to test out the cookie's contents, we can use a simple script like, which will yield this result. you may see another value in there too, which is used by our stylesheet-switcher. now we can write another entry to the cookie, using a different name, as so:, checking on the cookie's contents now, we can see that our first value is still in there. had we used the same name, the first value would've been overwritten; but since we used a different name, the new entry has been added in with the first., erasing cookie entries is easy — just set a new value and give an expiry date before today, as in, you can also give the entry an expiry date of -1, and it will be erased immediately. erase test values 1 and 2 now, if you have the heart., to easily tinker with cookies ourselves, we'll be using some great scripts which were originally coded by » scott andrew. they'll take much of the pain out of the process; especially reading the values out of a cookie, which is a bit complicated. here are the functions:, these are some nicely coded scripts, and don't require too much explanation. the function we use to create cookies takes three arguments, which make up the name-value pair and the amount of days to retain the cookie. the last argument is converted into a valid date by adding its value in hours to the current time before being annexed into the line which creates the cookie., the cookie reading function is the most difficult one here. first it splits the available cookie string (what we've been reading out in the alert earlier on this page) at every occurrence of the separating semicolon. this creates a new array, with each index holding an entry pair. we loop through these looking for the string 'name='. when we find this, we read out whatever else makes up this index, which will be the value associated with the name we passed to the function at the beginning., erasing an entry is easy — simply recreate a cookie with its expiration date set to -1., keep learning //   ajax → go! go!, other javascript articles //    basic javascript · event handlers · writing scripts · functions · objects and properties · form validation · advanced doms · support detection · popup windows · dhtml explained · scripting frames · cookies · ajax · date and time scripts · add to favorites link · drop-down link box  , what’s related //   , homepage · full index · section index, starting off   start here · my first site ·, lessons   text · images · tables · frames · forms · stylesheets ·, advanced   accessibility · promotion · optimisation · site management ·, scripting   javascript · cgi scripting ·, reviews   web hosting · books · recommendations ·, html source toolbox  ¤, html source is by me, ross shannon. i’m a web designer from ireland, and am currently finishing my phd in computer science., you can support html source by making a small donation., thanks to our wonderful supporters!, more resources  ¤, » mozillazine cookie documentation mozilla’s manual on cookies, with details on how they are used by web servers., go back to top ↑, © 2000–2022 · ross shannon][html source : html tutorials, cookies, why we use cookies, structure of a cookie, setting, reading and erasing cookies, convenient scripts]cookies | set and retrieve information about your readers[s, web servers cannot remember information about users, simple text files, name-value pair, expiry date, domain, path, each cookie can hold multiple entries, cover any and all subdomains, create new entries, read out an existing name-value pair, or erase an entry through javascript, document.cookie, document.cookie, erasing cookie entries, document.cookie, function createcookie, function readcookie, function erasecookie, keep learning, other javascript articles, what’s related, starting off, lessons, advanced, scripting, reviews, html source toolbox  ¤, love us?, printable pages, translations  ¤, valid code, naturally, you can support html source by making a small donation., having fun? getting lost? got some comments?, more resources  ¤, links][full index, about, contact, updates, a name-value pair which stores whatever data you want to save., an expiry date, after which time the entry will be deleted., the web domain and path that the entry should be associated with.]