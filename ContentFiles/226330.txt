[competitive programming is a mental sport which enables you to code a given problem under provided constraints. the purpose of this article is to guide every individual possessing a desire to excel in this sport. this article provides a detailed syllabus for competitive programming designed by industry experts to boost the preparation of the readers., , get ready to level up your programming skills with this competitive programming – live course. learn the fundamentals of programming, dsa, mathematical algorithms, and much more. so, why wait? dive into the world of programming by enrolling in this course today!, topic:, introduction, basics, greedy and bit manipulation, number theory and combinatorics, searching, sorting and basic data structures, tree and graphs, recursion and dynamic programming, string algorithms, geometry and game theory, advance data structures, you may also check geeksforgeeks online courses to learn data structures and algorithms, well designed courses taught by industry experts., get ready to take your programming skills to the next level? this competitive programming – live course will help you enhance your problem-solving skills to be a programmer for a top company and gain a competitive edge over other candidates in sde interviews. learn basics of programming, data structure and algorithms, efficient implementation of mathematical algorithms and much more. then, why wait? take your first step towards becoming a better programmer, see you in the course!, master data structures and algorithms, trusted by over 75,000 students! prepare for the interviews with leading it giants like microsoft, amazon, adobe, etc. built with years of experience by top industry experts and gives you a complete package of video lectures, practise problems, quizzes, discussion forums and contests. learn and master dsa at the most affordable price possible with geeksforgeeks dsa self-paced course. join today!, master any programming language from scratch and understand all its core fundamental concepts for a strong programming foundation at budget-friendly prices with help of geeksforgeeks language foundation courses – c programming | java foundation | python foundation | c++ foundation. these courses are for complete beginners who want to get started with programming and build their foundations. start your coding journey today!., writing code in comment? please use ide.geeksforgeeks.org, generate link and share the link here.][related articles, table of contents, competitive programming – a complete guide, related courses, competitive programming – live course, introduction, basics, greedy and bit manipulation, number theory and combinatorics, searching, sorting and basic data structures, tree and graphs, recursion and dynamic programming, string algorithms, geometry and game theory, advance data structures, geeksforgeeks courses, competitive programming – live course, dsa self paced, language foundation courses[c programming / c++ / java / python], , start your coding journey now!]competitive programming - a complete guide - geeksforgeeks[topic:, what is competitive programming and how to prepare for it?, fast i/o:, cpp, , , java, ,, python, useful libraries:, cpp, ,, java, ,, python, input/output files:, set 1, ,, set 2, tips and tricks:, set 1, ,, set 2, input methods:, cpp, ,, java, ,, python, template:, cpp, , language:, cpp, ,, java, ,, python, time complexity:, analysis,  , setting up competitive programming environment:, sublime: cpp, ,, visual studio: cpp and python, reverse an array, , problem 1, ,, problem 2, sum of digits, program to check if a given string is palindrome in c, ,, python, , problem, sum of array elements,   , problem, maximum and minimum element of array,   , problem, counting frequencies of array elements, , , problem 1, ,, problem 2, float and precision:, cpp, ,, java, ,, python, prefix sum, ,, 2d prefix sum, , difference array | range update query in o(1), :, problem 1, ,, problem 2, coordinate compression, :, problem, kadane algorithm, :, problem, activity selection problem, , problem, job sequencing problem, problem, sliding window, :, , problem, logical operators:, cpp set 1, ,, set 2, ,, java, ,, python, bit manipulation:, set 1, ,, set 2, ,, set 3, , problem 1, ,, problem 2, ,, problem 3, bitset cpp, prime number, , , problem, sieve of eratosthenes, ,  , problem, segmented sieve,  , problem, find all divisors of a natural number,  , problem, least prime factor of numbers upto n, , problem, all prime factors of a number, , , problem, prime factorization using sieve o(log n) for multiple queries, sum of all factors of a number, ,  , problem, gcd of two numbers, ,, lcm of two numbers, ,  , problem, linear diophantine equations, euclidean algorithms (basic and extended), euler’s totient function, , , problem, euler’s totient function for all numbers smaller than or equal to n, inclusion exclusion principle , pigeon hole principle, modular operations, modular inverse, :,  , problem 1, ,, problem 2, chinese remainder theorem:, set 1, ,, set 2, power(x, y) in o( logn ), power(x, y) % mod, :,  , problem 1, ,, problem 2, matrix exponentiation, :,  , problem, permutation and combination:, set 1, ,, set 2, ,, quiz 1, ,, quiz 2, ncr:, set 1, ,, set 2, ncr % mod:, set1, ,, set 2, :, , problem, ncr % mod for multiple queries, :,  , problem, catalan numbers, :, , applications, , problem, gaussian elimination, linear search, ,  , problem 1, ,, problem 2, binary search, ,, unbounded binary search, ,  , problem 1, ,, problem 2, ,, problem 3, inbuilt sorting o(logn):, cpp, ,, java, ,, python, ,  , problem 1, ,, problem 2, ,, problem 3, ,, problem 4, merge sort, ,  , problem 1, ,, problem 2, quick sort, ,  , problem, stack:, , cpp, ,, java, ,, python, ,  , problem 1, ,, problem 2, ,, problem 3, queue:, , cpp, ,, java, ,, python, ,  , problem 1, ,, problem 2, ,, problem 3, deque:, cpp, ,, java, ,, python, ,  , problem, priority queue:, , cpp, ,, java, ,, python, ,  , problem 1, ,, problem 2, ,, problem 3, tree bfs, ,, tree dfs, , problem 1, ,, problem 2, ,, problem 3, graph bfs, ,, graph bfs 2, graph dfs, , problem 1, ,, problem 2, dijkstra’s shortest path algorithm, ,  , problem, 1, ,, problem 2, bellman – ford algorithm, ,  , problem, floyd warshall algorithm, , problem, 0-1 bfs, ,, dial’s algorithm, detect cycle:, directed, ,, undirected, ,  , problem 1, ,, problem 2, disjoint set(union-find):, set 1, ,, set 2, ,, set 3, ,  , problem, topological sorting, ,, kahn’s algorithm, , problem, minimum spanning tree:, prim’s algorithm, ,, kruskal algorithm, , problem, bipartite or not, ,, m-coloring, ,  , problem 1, ,, problem 2, ,, problem 3, strongly connected components:, tarjan, ,, kosaraju, ,  , problem 1, ,, problem 2, euler path:, undirected, ,, directed, ,  , problem, flow algorithms:, set 1, ,, set 2, ,, dinic’s algorithm, ,  , problem 1, ,, problem 2, diameter of tree, centroid decomposition, lowest common ancestor, recursion, :  , quiz 1, ,, quiz 2, ,, quiz 3, ,, quiz 4, ,, quiz 5, ,, quiz 6, ,, quiz 7, , (, , problem 1, ,, problem 2, ,, problem 3, backtracking, : (, , problem 1, ,, problem 2, ), dp introduction:, set 1, ,, set 2, ,, set 3, ,, set 4, ,, set 5, most useful dynamic programming questions, additional dp problems :, problem 1, ,, problem 2, ,, problem 3, ,, problem 4, dp on trees:, set 1, ,, set 2, dp on bit masking:, set 1, ,, set 2, ,, set 3, digit dp, suffix tree:, set 1, ,, set 2, z algorithm, kmp algorithm, ,, rabin-karp algorithm, , , problem, manacher’s algorithm:, set 1, ,, set 2, ,, set 3, ,, set 4, suffix automation:, set 1, ,, set 2, closest pair of points, how to check if two given line segments intersect?, , (, , problem, how to check if a given point lies inside or outside a polygon?, convex hull:, set 1, ,, set 2, , (, problem, given n line segments, find if any two segments intersect, check whether a given point lies inside a triangle or not, how to check if given four points form a square, : (, , problem, combinatorial game theory:, set 1, ,, set 2, ,, set 3, ,, set 4, minimax algorithm in game theory:, set 1, ,, set 2, ,, set 3, ,, set 4, ,, set 5, variation in nim game, find the winner in nim-game, optimal strategy for a game, trie:, set 1, ,, set 2, ,, set 3, , (, :, problem 1, ,, problem 2, ,, problem 3, ,, problem 4, ,, problem 5, fenwick tree:, set 1, ,, set 2, ,, set 3, ,, set 4, , (, , problem, ), segment tree:, set 1, ,, set 2, ,, set 3, , (, , problem, ), sparse table:, set 1, ,, set 2, sqrt decomposition:, set 1, ,, set 2, heavy light decomposition:, set 1, ,, set 2, meet in the middle, mo’s algorithm, ,, problem, policy based data structure][courses for working professionals live dsa live classes system design java backend development full stack live explore more self-paced dsa- self paced sde theory must-do coding questions explore more for students live competitive programming data structures with c++ data science explore more self-paced dsa- self paced cip java / python / c++ explore more school courses school guide python programming learn to make apps explore more all courses, for working professionals live dsa live classes system design java backend development full stack live explore more self-paced dsa- self paced sde theory must-do coding questions explore more, live dsa live classes system design java backend development full stack live explore more, dsa live classes, system design, java backend development, full stack live, explore more, self-paced dsa- self paced sde theory must-do coding questions explore more, dsa- self paced, sde theory, must-do coding questions, explore more, for students live competitive programming data structures with c++ data science explore more self-paced dsa- self paced cip java / python / c++ explore more, live competitive programming data structures with c++ data science explore more, competitive programming, data structures with c++, data science, explore more, self-paced dsa- self paced cip java / python / c++ explore more, dsa- self paced, cip, java / python / c++, explore more, school courses school guide python programming learn to make apps explore more, school guide, python programming, learn to make apps, explore more, all courses, tutorials practice ds & algo. must do questions dsa topic-wise dsa company-wise algorithms analysis of algorithms asymptotic analysis worst, average and best cases asymptotic notations little o and little omega notations lower and upper bound theory analysis of loops solving recurrences amortized analysis what does 'space complexity' mean ? pseudo-polynomial algorithms polynomial time approximation scheme a time complexity question searching algorithms sorting algorithms graph algorithms pattern searching geometric algorithms mathematical bitwise algorithms randomized algorithms greedy algorithms dynamic programming divide and conquer backtracking branch and bound all algorithms data structures arrays linked list stack queue binary tree binary search tree heap hashing graph advanced data structure matrix strings all data structures interview corner company preparation top topics practice company questions interview experiences experienced interviews internship interviews competititve programming design patterns system design tutorial multiple choice quizzes languages c c++ java python c# javascript jquery sql php scala perl go language html css kotlin ml & data science machine learning data science cs subjects mathematics operating system dbms computer networks computer organization and architecture theory of computation compiler design digital logic software engineering gate gate computer science notes last minute notes gate cs solved papers gate cs original papers and official keys gate 2021 dates gate cs 2021 syllabus important topics for gate cs web technologies html css javascript angularjs reactjs nodejs bootstrap jquery php software designs software design patterns system design tutorial school learning school programming mathematics number system algebra trigonometry statistics probability geometry mensuration calculus maths notes (class 8-12) class 8 notes class 9 notes class 10 notes class 11 notes class 12 notes ncert solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution rd sharma solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution physics notes (class 8-11) class 8 notes class 9 notes class 10 notes class 11 notes cs exams/psus isro isro cs original papers and official keys isro cs solved papers isro cs syllabus for scientist/engineer exam ugc net ugc net cs notes paper ii ugc net cs notes paper iii ugc net cs solved papers student campus ambassador program school ambassador program project geek of the month campus geek of the month placement course competititve programming testimonials student chapter geek on the top internship careers, practice ds & algo. must do questions dsa topic-wise dsa company-wise, must do questions, dsa topic-wise, dsa company-wise, algorithms analysis of algorithms asymptotic analysis worst, average and best cases asymptotic notations little o and little omega notations lower and upper bound theory analysis of loops solving recurrences amortized analysis what does 'space complexity' mean ? pseudo-polynomial algorithms polynomial time approximation scheme a time complexity question searching algorithms sorting algorithms graph algorithms pattern searching geometric algorithms mathematical bitwise algorithms randomized algorithms greedy algorithms dynamic programming divide and conquer backtracking branch and bound all algorithms, analysis of algorithms asymptotic analysis worst, average and best cases asymptotic notations little o and little omega notations lower and upper bound theory analysis of loops solving recurrences amortized analysis what does 'space complexity' mean ? pseudo-polynomial algorithms polynomial time approximation scheme a time complexity question, asymptotic analysis, worst, average and best cases, asymptotic notations, little o and little omega notations, lower and upper bound theory, analysis of loops, solving recurrences, amortized analysis, what does 'space complexity' mean ?, pseudo-polynomial algorithms, polynomial time approximation scheme, a time complexity question, searching algorithms, sorting algorithms, graph algorithms, pattern searching, geometric algorithms, mathematical, bitwise algorithms, randomized algorithms, greedy algorithms, dynamic programming, divide and conquer, backtracking, branch and bound, all algorithms, data structures arrays linked list stack queue binary tree binary search tree heap hashing graph advanced data structure matrix strings all data structures, arrays, linked list, stack, queue, binary tree, binary search tree, heap, hashing, graph, advanced data structure, matrix, strings, all data structures, interview corner company preparation top topics practice company questions interview experiences experienced interviews internship interviews competititve programming design patterns system design tutorial multiple choice quizzes, company preparation, top topics, practice company questions, interview experiences, experienced interviews, internship interviews, competititve programming, design patterns, system design tutorial, multiple choice quizzes, languages c c++ java python c# javascript jquery sql php scala perl go language html css kotlin, c, c++, java, python, c#, javascript, jquery, sql, php, scala, perl, go language, html, css, kotlin, ml & data science machine learning data science, machine learning, data science, cs subjects mathematics operating system dbms computer networks computer organization and architecture theory of computation compiler design digital logic software engineering, mathematics, operating system, dbms, computer networks, computer organization and architecture, theory of computation, compiler design, digital logic, software engineering, gate gate computer science notes last minute notes gate cs solved papers gate cs original papers and official keys gate 2021 dates gate cs 2021 syllabus important topics for gate cs, gate computer science notes, last minute notes, gate cs solved papers, gate cs original papers and official keys, gate 2021 dates, gate cs 2021 syllabus, important topics for gate cs, web technologies html css javascript angularjs reactjs nodejs bootstrap jquery php, html, css, javascript, angularjs, reactjs, nodejs, bootstrap, jquery, php, software designs software design patterns system design tutorial, software design patterns, system design tutorial, school learning school programming mathematics number system algebra trigonometry statistics probability geometry mensuration calculus maths notes (class 8-12) class 8 notes class 9 notes class 10 notes class 11 notes class 12 notes ncert solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution rd sharma solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution physics notes (class 8-11) class 8 notes class 9 notes class 10 notes class 11 notes, school programming, mathematics number system algebra trigonometry statistics probability geometry mensuration calculus, number system, algebra, trigonometry, statistics, probability, geometry, mensuration, calculus, maths notes (class 8-12) class 8 notes class 9 notes class 10 notes class 11 notes class 12 notes, class 8 notes, class 9 notes, class 10 notes, class 11 notes, class 12 notes, ncert solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution, class 8 maths solution, class 9 maths solution, class 10 maths solution, class 11 maths solution, class 12 maths solution, rd sharma solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution, class 8 maths solution, class 9 maths solution, class 10 maths solution, class 11 maths solution, class 12 maths solution, physics notes (class 8-11) class 8 notes class 9 notes class 10 notes class 11 notes, class 8 notes, class 9 notes, class 10 notes, class 11 notes, cs exams/psus isro isro cs original papers and official keys isro cs solved papers isro cs syllabus for scientist/engineer exam ugc net ugc net cs notes paper ii ugc net cs notes paper iii ugc net cs solved papers, isro isro cs original papers and official keys isro cs solved papers isro cs syllabus for scientist/engineer exam, isro cs original papers and official keys, isro cs solved papers, isro cs syllabus for scientist/engineer exam, ugc net ugc net cs notes paper ii ugc net cs notes paper iii ugc net cs solved papers, ugc net cs notes paper ii, ugc net cs notes paper iii, ugc net cs solved papers, student campus ambassador program school ambassador program project geek of the month campus geek of the month placement course competititve programming testimonials student chapter geek on the top internship careers, campus ambassador program, school ambassador program, project, geek of the month, campus geek of the month, placement course, competititve programming, testimonials, student chapter, geek on the top, internship, careers, jobs apply for jobs post a job job-a-thon, apply for jobs, post a job, job-a-thon, events, , write come write articles for us and get featured practice learn and code with the best industry experts premium get access to ad-free content, doubt assistance and more! jobs come and find your dream job with us geeks digest quizzes geeks campus gblog articles ide campus mantri, geeks digest, quizzes, geeks campus, gblog articles, ide, campus mantri, , , home, saved videos, courses, , gblog, puzzles, what's new ?, data structures, algorithms, interview preparation, topic-wise practice, c++, java, python, competitive programming, machine learning, html, sde sheet, puzzles, gfg school, projects, competitive programming – a complete guide, what is competitive programming and how to prepare for it?, 5 best languages for competitive programming, 5 best books for competitive programming, what are the best resources for competitive programming?, resume writing for internship, must do coding questions for companies like amazon, microsoft, adobe, …, must do coding questions company-wise, practice for cracking any coding interview, how to begin with competitive programming?, top 10 algorithms and data structures for competitive programming, n queen problem | backtracking-3, printing all solutions in n-queen problem, warnsdorff’s algorithm for knight’s tour problem, the knight’s tour problem | backtracking-1, rat in a maze | backtracking-2, count number of ways to reach destination in a maze, count all possible paths from top left to bottom right of a mxn matrix, print all possible paths from top left to bottom right of a mxn matrix, unique paths in a grid with obstacles, unique paths covering every non-obstacle block exactly once in a grid, depth first search or dfs for a graph, breadth first search or bfs for a graph, level order binary tree traversal, tree traversals (inorder, preorder and postorder), arrow operator -> in c/c++ with examples, fast i/o for competitive programming, competitive programming – a complete guide, what is competitive programming and how to prepare for it?, 5 best languages for competitive programming, 5 best books for competitive programming, what are the best resources for competitive programming?, resume writing for internship, must do coding questions for companies like amazon, microsoft, adobe, …, must do coding questions company-wise, practice for cracking any coding interview, how to begin with competitive programming?, top 10 algorithms and data structures for competitive programming, n queen problem | backtracking-3, printing all solutions in n-queen problem, warnsdorff’s algorithm for knight’s tour problem, the knight’s tour problem | backtracking-1, rat in a maze | backtracking-2, count number of ways to reach destination in a maze, count all possible paths from top left to bottom right of a mxn matrix, print all possible paths from top left to bottom right of a mxn matrix, unique paths in a grid with obstacles, unique paths covering every non-obstacle block exactly once in a grid, depth first search or dfs for a graph, breadth first search or bfs for a graph, level order binary tree traversal, tree traversals (inorder, preorder and postorder), arrow operator -> in c/c++ with examples, fast i/o for competitive programming, difficulty level : easy, last updated : 06 may, 2022, introduction, basics, greedy and bit manipulation, number theory and combinatorics, searching, sorting, and basic data structures, tree and graphs, recursion and dynamic programming, string algorithms, geometry and game theory, advance data structures, what is competitive programming and how to prepare for it?, fast i/o: cpp,  java, python, useful libraries: cpp, java, python, input/output files: set 1, set 2, tips and tricks: set 1, set 2, input methods: cpp, java, python, template: cpp, language: cpp, java, python, time complexity: analysis , setting up competitive programming environment: sublime: cpp, visual studio: cpp and python, reverse an array (related problems: problem 1, problem 2), sum of digits, program to check if a given string is palindrome in c, python (related problem), sum of array elements   (related problem), maximum and minimum element of array   (related problem), counting frequencies of array elements (related problems: problem 1, problem 2), float and precision: cpp, java, python, prefix sum, 2d prefix sum difference array | range update query in o(1): (related problems: problem 1, problem 2), coordinate compression: (related problem), kadane algorithm: (related problem), activity selection problem: (related problem), job sequencing problem: (related problem), sliding window: (related problem), logical operators: cpp set 1, set 2, java, python, bit manipulation: set 1, set 2, set 3 (related problems: problem 1, problem 2, problem 3), bitset cpp, prime number (related problem), sieve of eratosthenes (related problem), segmented sieve (related problem), find all divisors of a natural number (related problem), least prime factor of numbers upto n (related problem), all prime factors of a number (related problem), prime factorization using sieve o(log n) for multiple queries, sum of all factors of a number (related problem), gcd of two numbers, lcm of two numbers (related problem), linear diophantine equations, euclidean algorithms (basic and extended), euler’s totient function (related problem), euler’s totient function for all numbers smaller than or equal to n, inclusion exclusion principle , pigeon hole principle, modular operations, modular inverse: (related problem 1, problem 2), chinese remainder theorem: set 1, set 2, power(x, y) in o( logn ), power(x, y) % mod: (related problem 1, problem 2), matrix exponentiation: (related problem), permutation and combination: set 1, set 2, quiz 1, quiz 2, ncr: set 1, set 2, ncr % mod: set1, set 2: (related problem), ncr % mod for multiple queries: (related problem), catalan numbers: applications and related problem, gaussian elimination, linear search (related problems : problem 1, problem 2), binary search, unbounded binary search (related problems : problem 1, problem 2, problem 3), inbuilt sorting o(logn): cpp, java, python (related problems : problem 1, problem 2, problem 3, problem 4), merge sort (related problems : problem 1, problem 2), quick sort (related problems : problem), stack: implementation in cpp, java, python (related problems : problem 1, problem 2, problem 3), queue: implementation in cpp, java, python (related problems : problem 1, problem 2 , problem 3), deque: implementation in cpp, java, python (related problems : problem), priority queue: implementation in cpp, java, python (related problems : problem 1, problem 2, problem 3), tree bfs, tree dfs (related problems : problem 1, problem 2, problem 3), graph bfs, graph bfs 2, graph dfs (related problems : problem 1, problem 2), dijkstra’s shortest path algorithm (related problems : problem 1, problem 2), bellman – ford algorithm (related problem), floyd warshall algorithm (related problem), 0-1 bfs, dial’s algorithm, detect cycle: directed, undirected (related problems : problem 1, problem 2), disjoint set(union-find): set 1, set 2, set 3 (related problem), topological sorting, kahn’s algorithm (related problem), minimum spanning tree: prim’s algorithm, kruskal algorithm (related problem), bipartite or not, m-coloring (related problems : problem 1, problem 2, problem 3), strongly connected components: tarjan, kosaraju (related problems : problem 1 , problem 2), euler path: undirected, directed (related problem), flow algorithms: set 1, set 2, dinic’s algorithm (related problems : problem 1, problem 2), diameter of tree, centroid decomposition, lowest common ancestor, recursion:  quiz 1, quiz 2, quiz 3, quiz 4, quiz 5, quiz 6, quiz 7 (related problems : problem 1, problem 2, problem 3), backtracking: (related problems : problem 1, problem 2), dp introduction: set 1, set 2, set 3, set 4, set 5, most useful dynamic programming questions, additional dp problems : problem 1, problem 2, problem 3, problem 4, dp on trees: set 1, set 2, dp on bit masking: set 1, set 2, set 3, digit dp, suffix tree: set 1, set 2, z algorithm, kmp algorithm, rabin-karp algorithm (related problem), manacher’s algorithm: set 1, set 2, set 3, set 4, suffix automation: set 1, set 2, closest pair of points, how to check if two given line segments intersect? (related problem), how to check if a given point lies inside or outside a polygon?, convex hull: set 1, set 2 (related problem), given n line segments, find if any two segments intersect, check whether a given point lies inside a triangle or not, how to check if given four points form a square: (related problem), combinatorial game theory: set 1 , set 2, set 3, set 4, minimax algorithm in game theory: set 1, set 2, set 3, set 4, set 5, variation in nim game, find the winner in nim-game, optimal strategy for a game, trie: set 1, set 2, set 3, (related problems: problem 1, problem 2, problem 3, problem 4, problem 5), fenwick tree: set 1, set 2, set 3, set 4, (related problem), segment tree: set 1, set 2, set 3 (related problem), sparse table: set 1, set 2, sqrt decomposition: set 1, set 2, heavy light decomposition: set 1, set 2, meet in the middle, mo’s algorithm, problem, policy based data structure, varshagumber28, competitive programming, modulo 10^9+7 (1000000007), prefix sum array - implementation and applications in competitive programming, bits manipulation (important tactics), 7 best coding challenge websites in 2020, algorithm library | c++ magicians stl algorithm, multistage graph (shortest path), use of flag in programming, top 15 websites for coding challenges and competitions, find the nth row in pascal's triangle, formatted output in java, company, about us, careers, in media, contact us, privacy policy, copyright policy, learn, algorithms, data structures, sde cheat sheet, machine learning, cs subjects, video tutorials, news, top news, technology, work & career, business, finance, lifestyle, languages, python, java, cpp, golang, c#, sql, web development, web tutorials, django tutorial, html, css, javascript, bootstrap, contribute, write an article, improve an article, pick topics to write, write interview experience, internships, video internship]