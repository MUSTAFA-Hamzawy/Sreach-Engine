[this is a joint post from nomadic labs.&& marigold.&& trilitech.&& oxhead alpha.&& tarides.&& dailambda.&& functori & tweag..&& update: a revised prootocol proposal.&& jakarta 2.&& has been released. jakarta 2 adresses two critical bugs in the implementation of transaction optimistic rollups..&& we were proud to see ithaca 2 go live on april 1st. in keeping with our policy of proposing upgrades on a regularly scheduled basis.&& we are happy to announce our latest tezos protocol proposal.&& jakarta..&& jakarta’s “true name” is its hash.&& ptjakartaidz69sfddlxjsiuzqtseskrdbkvzc8mnzjnvrjvngw..&& the jakarta protocol proposal contains major updates to the tezos economic protocol.&& as well as numerous minor improvements. in this article.&& we preview its most relevant features. a more thorough description can be read in the protocol proposal’s technical documentation entry.&& and a complete list of changes is provided in its changelog..&& we are pleased to announce that transaction optimistic rollups (or torus) have found their way into this protocol proposal.&& as a first and experimental implementation of optimistic rollups on tezos. as the name implies.&& torus allow for exchanges of assets.&& but not execution of smart contracts..&& ‍optimistic rollups enable higher throughput (tps) by moving the validation of transactions away from the main chain.&& to ‘layer 2’. they are called optimistic.&& because they work on the assumption that this validation is correct until explicitly proven otherwise. one consequence of this approach is longer finality when withdrawing from the rollup.&& currently set to 40.&&000 blocks (about 2 weeks)..&& optimistic rollups have a number of desirable properties:.&& with our proposal.&& tezos rollups will not be implemented as smart contracts (like.&& e.g..&& arbitrum on ethereum).&& but rather natively in the economic protocol — making them enshrined rollups. leveraging tezos’ unique self-amendment feature this way allows us to implement more efficient.&& expressive.&& and scalable solutions..&& for a broader understanding of optimistic rollups.&& and the rationale behind them.&& we recommend checking out our blog post outlining a scaling strategy for tezos..&& note that torus should be considered an experimental feature.&& and they are introduced with a sunset of 1 year. this sunset can be extended.&& or removed altogether.&& in future proposals.&& depending on community adoption..&& we recently reported a design flaw of the existing integration of sapling transactions into michelson smart contracts.&& which makes unshielding tez from certain smart contracts vulnerable to manipulation..&& the jakarta protocol addresses this situation by implementing a new.&& safer design..&& jakarta also deprecates the previous format of the michelson integration for sapling transactions.&& and if jakarta is adopted.&& it will only be possible to originate sapling smart contracts which conform to the new version..&& further details on the vulnerability and the new integration design can be found here..&& the liquidity baking escape hatch mechanism has been redesigned and renamed to the “liquidity baking toggle vote”..&& the options are now “on”.&& to vote for the liquidity baking subsidy being turned on.&& and “off”.&& to vote for the subsidy to be turned off.&& and a new “pass” option to abstain..&& another change is that if the threshold for deactivation is reached.&& the deactivation of the subsidy is no longer permanent. if the proportion of bakers voting “on” later increases back over the threshold.&& the subsidy can be restarted..&& more information can be found in the feature’s tzip..&& note that the future tezos octez v13 baking daemon for jakarta.&& tezos-baker-013-ptjakart.&& will impose the use of a mandatory command-line flag --liquidity-baking-toggle-vote to set up the delegate’s default liquidity baking toggle vote preference.&& and will also provide an optional --votefile flag intended to be used to declare the path for a json file encoding the delegate’s toggle vote. when provided.&& the latter file takes precedence over the former mandatory flag..&& we have implemented various improvements to type safety and performance of the michelson interpreter. the majority of these changes do not impact the semantics of michelson other than decreasing gas costs for parsing and unparsing scripts..&& the single semantic change is ignoring annotations. with jakarta.&& annotations are only used by the type-checker and the interpreter to identify smart contract entry-points. additional annotations still remain valid but they no longer carry any semantic meaning..&& moreover.&& the protocol proposal upgrades a few smart contracts which relied on legacy features which are no longer available since the babylon protocol upgrade. they are now compliant with the modern michelson specification. the list of patched contracts.&& the patches themselves.&& and a detailed description of the process can be found at the merge request..&& tickets provide a first-class notion of ownership in the tezos protocol. they can be used to implement fungible as well as non-fungible tokens..&& we introduce a mechanism for explicitly tracking ownership of tickets in the protocol. whenever a ticket is created or its ownership changes — for instance by sending it to a different contract — it is explicitly recorded and validated against a balance table. this extension does not impact the michelson api..&& the feature serves two purposes:.&& extra protection against attempts to forge tickets.&& facilitate layer 2 solutions that use tickets to represent assets that can be exchanged with the main chain (e.g..&& torus).&& the jakarta protocol proposal redefines the computation of delegates’ voting power in the self-amendment process. instead of being measured in terms of rolls.&& it is now defined directly by delegate’s stake (expressed in mutez). the minimal stake required to be assigned voting rights is kept at 6000 tez..&& this change complements those introduced with the ithaca2 protocol.&& in order to unify voting and baking power. as result the notion of rolls is no longer relevant.&& and has been deprecated..&& a testnet for the jakarta protocol named jakartanet will launch in the coming days. it is critical to have as many bakers.&& tool builders.&& indexers.&& wallets.&& etc. as possible participating in this testnet..&& we are looking for more bootstrap bakers to participate from day one. if you are interested.&& please join the tezos baking slack and reach out in the #test-networks channel..&& furthermore.&& we strongly encourage you to test your own tezos-based applications for compatibility problems with jakarta. jakarta.&& and the configuration for its test network jakartanet.&& will be included in version 13 of octez..&& should the jakarta protocol proposal be accepted by the community.&& v13 of octez or v3 of tezedge will be necessary to participate in consensus due to necessary changes introduced to the protocol environment..&& over the coming months.&& our teams will continue to work on increasing performance.&& lowering gas consumption.&& reducing block times.&& and increasing the overall throughput — as measured.&& for example.&& in transactions per seconds or smart contract invocations per second. we are excited to be part of this continued development of tezos..&& © 2021.&& réalisé avec ❤ par verywell digital.&& back to top][announcing tezos’ 10th protocol upgrade proposal “jakarta”, transaction optimistic rollups, a safer sapling integration, liquidity baking toggle vote, michelson interpreter improvements, tickets hardening, rolls are no more, testing, testing…, contact, follow us :]nomadic labs - announcing tezos’ 10th protocol upgrade proposal “jakarta”[update: a revised prootocol proposal, jakarta 2, has been released. jakarta 2 adresses two critical bugs in the implementation of transaction optimistic rollups., trust minimized, permissionless, capital efficient, “on”, “off”, “pass”][expertise, academic, blog, training, research seminars, contact, research & development, > blog >, announcing tezos’ 10th protocol upgrade proposal “jakarta”, trust minimized: you don’t have to trust that a majority of the rollup nodes are honest to always be able to withdraw your funds from the rollup. one honest node is enough., permissionless: anyone can submit operations to a rollup since all the rollup block data is posted on the main chain., capital efficient: unlike with state channels (e.g., lightning network), rollup users are not required to lock up a bond upfront. only rollup node providers are., extra protection against attempts to forge tickets, facilitate layer 2 solutions that use tickets to represent assets that can be exchanged with the main chain (e.g., torus)]