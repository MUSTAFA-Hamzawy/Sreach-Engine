[local home sdk sample.&& this sample demonstrates integrating a smart home action with the local home sdk. the local home sdk allow developers to add a local path to handle smart home intents by running typescript (or javascript) directly on google home smart speakers and nest smart displays. the sample supports the following protocols along with the companion virtual device:.&& note: this project uses cloud functions for firebase.&& which requires you to associate a billing account with your project. actions projects do not create a billing account by default. see create a new billing account for more information..&& choose one of the supported the discovery protocols that you would like to test.&& and create a new scan configuration in the actions console..&& note: these are the default values used by the virtual device for discovery. if you choose to use different values.&& you will need to supply those parameters when you set up the virtual device..&& mdns service name: _sample._tcp.local.&& name: .*._sample._tcp.local.&& note: the name attribute value is a regular expression..&& upnp service type: urn:sample:service:light:1.&& click save.&& choose one of the supported control protocols that you would like to test. you will use this value to configure both the cloud fulfillment and the virtual device..&& the local fulfillment sample supports running as a single end device or a hub/proxy device. this is determined by the number of channels you configure. a device with more than one channel will be treated as a hub by the local fulfillment sample code..&& configure the cloud service to report the correct device sync metadata based on your chosen device type and control protocol. here are some examples for configuring the service for different use cases:.&& report a single device (strand1) controlled via udp commands:.&& report three individual light strands connected through a proxy (hub1) and controlled via http commands:.&& the companion virtual device is a node.js app that emulates strands of rgb leds controllable using the open pixel control protocol and displays the results to the terminal in a colorful way..&& note: the virtual device needs to listen on the same local network as the home device..&& here are some examples for configuring the virtual device for different use cases:.&& start the virtual device as a single device (strand1) discovered via udp broadcast and controlled with udp commands:.&& start the virtual device as a hub (hub1) discovered via mdns and controlling three individual strands with http commands:.&& note: see the virtual device readme for more details on the supported configuration options..&& serve the sample app locally from the same local network as the home device.&& or deploy it to a publicly reacheable url endpoint..&& start the local development server:.&& note: the local development server needs to listen on the same local network as the home device in order to be able to load the local home sdk application..&& go to the smart home project in the actions console.&& in develop > actions > configure local home sdk.&& click save.&& see license.&& local home sdk sample][actions-on-google / smart-home-local public, license, latest commit, git stats, files, readme.md, local home sdk sample, prerequisites, configure the actions project, select a discovery protocol, select a control protocol, choose a device type, set up cloud fulfillment, set up the virtual device, deploy the local execution app, deploy locally, deploy to firebase hosting, test the local execution app, troubleshooting, test and lint, license, about, topics, resources, license, stars, watchers, forks, releases, packages 0, contributors 4, languages]github - actions-on-google/smart-home-local: local home sdk sample[smart-home-local, 36, 0, 90, device discovery:, control:, fulfillment, client id, client secret, authorization url, token url, new scan config, broadcast address, discovery packet, listen port, broadcast port, mdns service name, name, name, upnp service type, single end device, hub/proxy device, device scan configuration, device scan configuration, end device, hub/proxy, 222, 23, 58, proppy, devunwired, taycaldwell, dependabot[bot]][product features mobile actions codespaces packages security code review issues integrations github sponsors customer stories, features, mobile, actions, codespaces, packages, security, code review, issues, integrations, github sponsors, customer stories, team, enterprise, explore explore github learn and contribute topics collections trending learning lab open source guides connect with others the readme project events community forum github education github stars program, explore github, learn and contribute, topics, collections, trending, learning lab, open source guides, connect with others, the readme project, events, community forum, github education, github stars program, marketplace, pricing plans compare plans contact sales education, plans, compare plans, contact sales, education, in this repository all github ↵ jump to ↵, no suggested jump to results, in this repository all github ↵ jump to ↵, in this organization all github ↵ jump to ↵, in this repository all github ↵ jump to ↵, notifications, fork 58, star 222, code, issues 7, pull requests 36, actions, projects 0, wiki, security, insights, code, issues, pull requests, actions, projects, wiki, security, insights, 90 commits, device discovery: udp, mdns or upnp, control: udp, tcp, or http, node.js lts 10.16.0+, firebase cli, create a new smart home project in the actions console, deploy the placeholder smart home provider to cloud functions for firebase using the same project id: npm install --prefix functions/
npm run firebase --prefix functions/ -- use ${project_id}
npm run deploy --prefix functions/, in develop > actions, set the following configuration values that matches the cloud functions for firebase deployment: fulfillment: https://${region}-${project_id}.cloudfunctions.net/smarthome, fulfillment: https://${region}-${project_id}.cloudfunctions.net/smarthome, in develop > account linking, set the following configuration values: client id:: placeholder-client-id client secret: placeholder-client-secret authorization url: https://${region}-${project_id}.cloudfunctions.net/authorize token url: https://${region}-${project_id}.cloudfunctions.net/token, client id:: placeholder-client-id, client secret: placeholder-client-secret, authorization url: https://${region}-${project_id}.cloudfunctions.net/authorize, token url: https://${region}-${project_id}.cloudfunctions.net/token, click save, in develop > actions > configure local home sdk > add device scan configuration, click in new scan config., broadcast address: 255.255.255.255, discovery packet: a5a5a5a5, listen port: 3312, broadcast port: 3311, mdns service name: _sample._tcp.local, name: .*._sample._tcp.local note: the name attribute value is a regular expression., upnp service type: urn:sample:service:light:1, click save, udp: send execution commands to the target device as a udp payload., tcp: send execution commands to the target device as a tcp payload., http: send execution commands to the target device as an http request., report a single device (strand1) controlled via udp commands: npm run firebase --prefix functions/ -- functions:config:set 
    strand1.leds=16 strand1.channel=1 
    strand1.control_protocol=udp
npm run deploy --prefix functions/, report three individual light strands connected through a proxy (hub1) and controlled via http commands: npm run firebase --prefix functions/ -- functions:config:set 
    hub1.leds=16 hub1.channel=1,2,3 
    hub1.control_protocol=http
npm run deploy --prefix functions/, virtual device discovery settings must match the attributes provided in device scan configuration in develop > actions > configure local home sdk. if you modify the attributes in your device scan configuration, you must configure the virtual device accordingly. see the virtual device readme for more details on configuring the discovery attributes., if you modify the attributes in your device scan configuration, you must configure the virtual device accordingly. see the virtual device readme for more details on configuring the discovery attributes., virtual device control protocol should match control_protocol used with functions:config:set when setting up cloud fulfillment., configure the device type as end device or hub/proxy based on the number of --channel parameters provided. a device with more than one channel will be treated as a hub., start the virtual device as a single device (strand1) discovered via udp broadcast and controlled with udp commands: npm install --prefix device/
npm start --prefix device/ -- 
    --device_id strand1 
    --discovery_protocol udp 
    --control_protocol udp 
    --channel 1, start the virtual device as a hub (hub1) discovered via mdns and controlling three individual strands with http commands: npm install --prefix device/
npm start --prefix device/ -- 
    --device_id hub1 
    --discovery_protocol mdns 
    --control_protocol http 
    --channel 1 
    --channel 2 
    --channel 3, start the local development server: npm install --prefix app/
npm start --prefix app/
 note: the local development server needs to listen on the same local network as the home device in order to be able to load the local home sdk application., go to the smart home project in the actions console, in develop > actions > configure local home sdk set the testing url for chrome to the one displayed in the local development server logs. set the testing url for node to the one displayed in the local development server logs. under add capabilities check support local query., set the testing url for chrome to the one displayed in the local development server logs., set the testing url for node to the one displayed in the local development server logs., under add capabilities check support local query., check support local query., click save, go to the smart home project in the actions console, in develop > actions > configure local home sdk set the testing url for chrome to: http://${firebase_project_id}.firebaseapp.com/web/index.html set the testing url for node to: http://${firebase_project_id}.firebaseapp.com/node/bundle.js under add capabilities check support local query., set the testing url for chrome to: http://${firebase_project_id}.firebaseapp.com/web/index.html, set the testing url for node to: http://${firebase_project_id}.firebaseapp.com/node/bundle.js, under add capabilities check support local query., check support local query., click save, in develop > invocation, set the display name for the smart home action., in test, click start testing, in the google home app click the + sign select work with google in the list of providers, select your smart home action by display name prefixed with [test] click link click complete account link, click the + sign, select work with google, in the list of providers, select your smart home action by display name prefixed with [test], click link, click complete account link, select the linked devices and click on add to a room., reboot the google home device, open chrome://inspect, locate the local home sdk application and click inspect to launch the chrome developer tools., try the following query set the light color to magenta, set the light color to magenta, it should display the light strand(s) in a colorful way: ◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉◉, make sure the google home device, the virtual device and your workstation are on the same network., make sure to disable any firewall running on your workstation., proppy johan euphrosine, devunwired dave smith, taycaldwell taylor caldwell, dependabot[bot], typescript 94.3%, javascript 5.4%, html 0.3%, © 2022 github, inc., terms, privacy, security, status, docs, contact github, pricing, api, training, blog, about]