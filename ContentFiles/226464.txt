[, this page contains gate cs preparation notes / tutorials on mathematics, digital logic, computer organization and architecture, programming and data structures, algorithms, theory of computation, compiler design, operating systems, database management systems (dbms), and computer networks listed according to the gate cs 2021 syllabus.,  , gate cse 2023 live, section 1: general aptitude (ga), section 3: algorithms, section 4: programming and data structures, programming and data structures :, section 5: operating systems, operating systems :, section 6: databases, databases :, section 7: computer networks, computer networks :, section 8: computer organization and architecture, section 9: theory of computation, theory of computation :, section 10: compiler design, compiler design :, section 11: digital logic, please write comments if you find anything incorrect, or you want to share more information about the topic discussed above!][gate cs notes according to gate 2021 syllabus, attend daily free live gate cs classes on geeksforgeeks gate cs channel., other useful links :, , start your coding journey now!]gate cs topic wise preparation notes | geeksforgeeks[according to the gate cs 2021 syllabus.,  ][courses for working professionals live dsa live classes system design java backend development full stack live explore more self-paced dsa- self paced sde theory must-do coding questions explore more for students live competitive programming data structures with c++ data science explore more self-paced dsa- self paced cip java / python / c++ explore more school courses school guide python programming learn to make apps explore more all courses, for working professionals live dsa live classes system design java backend development full stack live explore more self-paced dsa- self paced sde theory must-do coding questions explore more, live dsa live classes system design java backend development full stack live explore more, dsa live classes, system design, java backend development, full stack live, explore more, self-paced dsa- self paced sde theory must-do coding questions explore more, dsa- self paced, sde theory, must-do coding questions, explore more, for students live competitive programming data structures with c++ data science explore more self-paced dsa- self paced cip java / python / c++ explore more, live competitive programming data structures with c++ data science explore more, competitive programming, data structures with c++, data science, explore more, self-paced dsa- self paced cip java / python / c++ explore more, dsa- self paced, cip, java / python / c++, explore more, school courses school guide python programming learn to make apps explore more, school guide, python programming, learn to make apps, explore more, all courses, tutorials practice ds & algo. must do questions dsa topic-wise dsa company-wise algorithms analysis of algorithms asymptotic analysis worst, average and best cases asymptotic notations little o and little omega notations lower and upper bound theory analysis of loops solving recurrences amortized analysis what does 'space complexity' mean ? pseudo-polynomial algorithms polynomial time approximation scheme a time complexity question searching algorithms sorting algorithms graph algorithms pattern searching geometric algorithms mathematical bitwise algorithms randomized algorithms greedy algorithms dynamic programming divide and conquer backtracking branch and bound all algorithms data structures arrays linked list stack queue binary tree binary search tree heap hashing graph advanced data structure matrix strings all data structures interview corner company preparation top topics practice company questions interview experiences experienced interviews internship interviews competititve programming design patterns system design tutorial multiple choice quizzes languages c c++ java python c# javascript jquery sql php scala perl go language html css kotlin ml & data science machine learning data science cs subjects mathematics operating system dbms computer networks computer organization and architecture theory of computation compiler design digital logic software engineering gate gate computer science notes last minute notes gate cs solved papers gate cs original papers and official keys gate 2021 dates gate cs 2021 syllabus important topics for gate cs web technologies html css javascript angularjs reactjs nodejs bootstrap jquery php software designs software design patterns system design tutorial school learning school programming mathematics number system algebra trigonometry statistics probability geometry mensuration calculus maths notes (class 8-12) class 8 notes class 9 notes class 10 notes class 11 notes class 12 notes ncert solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution rd sharma solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution physics notes (class 8-11) class 8 notes class 9 notes class 10 notes class 11 notes cs exams/psus isro isro cs original papers and official keys isro cs solved papers isro cs syllabus for scientist/engineer exam ugc net ugc net cs notes paper ii ugc net cs notes paper iii ugc net cs solved papers student campus ambassador program school ambassador program project geek of the month campus geek of the month placement course competititve programming testimonials student chapter geek on the top internship careers, practice ds & algo. must do questions dsa topic-wise dsa company-wise, must do questions, dsa topic-wise, dsa company-wise, algorithms analysis of algorithms asymptotic analysis worst, average and best cases asymptotic notations little o and little omega notations lower and upper bound theory analysis of loops solving recurrences amortized analysis what does 'space complexity' mean ? pseudo-polynomial algorithms polynomial time approximation scheme a time complexity question searching algorithms sorting algorithms graph algorithms pattern searching geometric algorithms mathematical bitwise algorithms randomized algorithms greedy algorithms dynamic programming divide and conquer backtracking branch and bound all algorithms, analysis of algorithms asymptotic analysis worst, average and best cases asymptotic notations little o and little omega notations lower and upper bound theory analysis of loops solving recurrences amortized analysis what does 'space complexity' mean ? pseudo-polynomial algorithms polynomial time approximation scheme a time complexity question, asymptotic analysis, worst, average and best cases, asymptotic notations, little o and little omega notations, lower and upper bound theory, analysis of loops, solving recurrences, amortized analysis, what does 'space complexity' mean ?, pseudo-polynomial algorithms, polynomial time approximation scheme, a time complexity question, searching algorithms, sorting algorithms, graph algorithms, pattern searching, geometric algorithms, mathematical, bitwise algorithms, randomized algorithms, greedy algorithms, dynamic programming, divide and conquer, backtracking, branch and bound, all algorithms, data structures arrays linked list stack queue binary tree binary search tree heap hashing graph advanced data structure matrix strings all data structures, arrays, linked list, stack, queue, binary tree, binary search tree, heap, hashing, graph, advanced data structure, matrix, strings, all data structures, interview corner company preparation top topics practice company questions interview experiences experienced interviews internship interviews competititve programming design patterns system design tutorial multiple choice quizzes, company preparation, top topics, practice company questions, interview experiences, experienced interviews, internship interviews, competititve programming, design patterns, system design tutorial, multiple choice quizzes, languages c c++ java python c# javascript jquery sql php scala perl go language html css kotlin, c, c++, java, python, c#, javascript, jquery, sql, php, scala, perl, go language, html, css, kotlin, ml & data science machine learning data science, machine learning, data science, cs subjects mathematics operating system dbms computer networks computer organization and architecture theory of computation compiler design digital logic software engineering, mathematics, operating system, dbms, computer networks, computer organization and architecture, theory of computation, compiler design, digital logic, software engineering, gate gate computer science notes last minute notes gate cs solved papers gate cs original papers and official keys gate 2021 dates gate cs 2021 syllabus important topics for gate cs, gate computer science notes, last minute notes, gate cs solved papers, gate cs original papers and official keys, gate 2021 dates, gate cs 2021 syllabus, important topics for gate cs, web technologies html css javascript angularjs reactjs nodejs bootstrap jquery php, html, css, javascript, angularjs, reactjs, nodejs, bootstrap, jquery, php, software designs software design patterns system design tutorial, software design patterns, system design tutorial, school learning school programming mathematics number system algebra trigonometry statistics probability geometry mensuration calculus maths notes (class 8-12) class 8 notes class 9 notes class 10 notes class 11 notes class 12 notes ncert solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution rd sharma solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution physics notes (class 8-11) class 8 notes class 9 notes class 10 notes class 11 notes, school programming, mathematics number system algebra trigonometry statistics probability geometry mensuration calculus, number system, algebra, trigonometry, statistics, probability, geometry, mensuration, calculus, maths notes (class 8-12) class 8 notes class 9 notes class 10 notes class 11 notes class 12 notes, class 8 notes, class 9 notes, class 10 notes, class 11 notes, class 12 notes, ncert solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution, class 8 maths solution, class 9 maths solution, class 10 maths solution, class 11 maths solution, class 12 maths solution, rd sharma solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution, class 8 maths solution, class 9 maths solution, class 10 maths solution, class 11 maths solution, class 12 maths solution, physics notes (class 8-11) class 8 notes class 9 notes class 10 notes class 11 notes, class 8 notes, class 9 notes, class 10 notes, class 11 notes, cs exams/psus isro isro cs original papers and official keys isro cs solved papers isro cs syllabus for scientist/engineer exam ugc net ugc net cs notes paper ii ugc net cs notes paper iii ugc net cs solved papers, isro isro cs original papers and official keys isro cs solved papers isro cs syllabus for scientist/engineer exam, isro cs original papers and official keys, isro cs solved papers, isro cs syllabus for scientist/engineer exam, ugc net ugc net cs notes paper ii ugc net cs notes paper iii ugc net cs solved papers, ugc net cs notes paper ii, ugc net cs notes paper iii, ugc net cs solved papers, student campus ambassador program school ambassador program project geek of the month campus geek of the month placement course competititve programming testimonials student chapter geek on the top internship careers, campus ambassador program, school ambassador program, project, geek of the month, campus geek of the month, placement course, competititve programming, testimonials, student chapter, geek on the top, internship, careers, jobs apply for jobs post a job job-a-thon, apply for jobs, post a job, job-a-thon, events, , write come write articles for us and get featured practice learn and code with the best industry experts premium get access to ad-free content, doubt assistance and more! jobs come and find your dream job with us geeks digest quizzes geeks campus gblog articles ide campus mantri, geeks digest, quizzes, geeks campus, gblog articles, ide, campus mantri, , , home, saved videos, courses, , gblog, puzzles, what's new ?, data structures, algorithms, interview preparation, topic-wise practice, c++, java, python, competitive programming, machine learning, html, sde sheet, puzzles, gfg school, projects, last updated : 23 feb, 2022, verbal aptitude : basic english grammar: tenses, articles, adjectives, prepositions, conjunctions, verb-noun agreement, and other parts of speech basic vocabulary: words, idioms, and phrases in context reading and comprehension narrative sequencing, basic english grammar: tenses, articles, adjectives, prepositions, conjunctions, verb-noun agreement, and other parts of speech, basic vocabulary: words, idioms, and phrases in context reading and comprehension, narrative sequencing, quantitative aptitude : data interpretation: data graphs (bar graphs, pie charts, and other graphs representing data), 2- and 3-dimensional plots, maps, and tables numerical computation and estimation: ratios, percentages, powers, exponents and logarithms, permutations and combinations, and series mensuration and geometry elementary statistics and probability, data interpretation: data graphs (bar graphs, pie charts, and other graphs representing data), 2- and 3-dimensional plots, maps, and tables, numerical computation and estimation: ratios, percentages, powers, exponents and logarithms, permutations and combinations, and series, mensuration and geometry, elementary statistics and probability, analytical aptitude : logic: deduction and induction analogy numerical relations and reasoning, logic: deduction and induction, analogy, numerical relations and reasoning, spatial aptitude : transformation of shapes: translation, rotation, scaling, mirroring, assembling, and grouping paper folding, cutting, and patterns in 2 and 3 dimensions, transformation of shapes: translation, rotation, scaling, mirroring, assembling, and grouping paper folding, cutting, and patterns in 2 and 3 dimensions, numerical ability : placements, placements, verbal ability : placements | english | error detection and correction placements | english | passage/sentence re-arrangement placements | english | fill in the blanks placements | english | comprehension passages, placements | english | error detection and correction, placements | english | passage/sentence re-arrangement, placements | english | fill in the blanks, placements | english | comprehension passages, numerical ability : placements, placements, verbal ability : placements, placements, numerical ability : book – quantitative aptitude by r.s. aggarwal, book – quantitative aptitude by r.s. aggarwal, verbal ability : notes – english, notes – english, discrete mathematics : propositional and first order logic sets, relations, functions, partial orders and lattices. monoids, groups combinatorics: counting, recurrence relations, generating functions graphs: connectivity, matching, coloring, propositional and first order logic, sets, relations, functions, partial orders and lattices. monoids, groups, combinatorics: counting, recurrence relations, generating functions, graphs: connectivity, matching, coloring, linear algebra : matrices, determinants lu decomposition system of linear equations eigenvalues and eigenvectors, matrices, determinants, lu decomposition, system of linear equations, eigenvalues and eigenvectors, probability : random variables mean, median, mode and standard deviation uniform, normal, exponential, poisson and binomial distributions conditional probability and bayes theorem, random variables, mean, median, mode and standard deviation, uniform, normal, exponential, poisson and binomial distributions, conditional probability and bayes theorem, calculus : limits, continuity and differentiability maxima and minima. mean value theorem integration, limits, continuity and differentiability, maxima and minima. mean value theorem, integration, discrete mathematics : representation of boolean functions properties of boolean algebra pdnf and pcnf in discrete mathematics functional completeness introduction to propositional logic set 1 introduction to propositional logic set 2 propositional equivalence predicates and quantifiers set 1 predicates and quantifiers set 2 some theorems on nested quantifiers rules of inference consensus theorem introduction to proofs combinatorics basics pigeonhole principle pnc and binomial coefficients generalized pnc set 1 generalized pnc set 2 inclusion-exclusion and its various applications corollaries of binomial theorem introduction of generating functions generating functions – set 2 set theory | introduction set theory | set operations power set and its properties relations and their types relations and their representations representing relations closure of relations and equivalence relations functions | properties and types inverse functions and composition of functions total number of possible functions number of possible equivalence relations groups partial orders and lattices hasse diagrams graph theory basics – set 1 graph theory basics – set 2 walks, trails, paths, cycles and circuits in graph number of nodes and height of binary tree graph measurements: length, distance, diameter, eccentricity, radius, center graph isomorphisms and connectivity planar graphs and graph coloring euler and hamiltonian paths independent sets, covering and matching matching (graph theory) graph theory practice questions recurrence relations different types of recurrence relations and their solutions types of recurrence relations – set 2, representation of boolean functions, properties of boolean algebra, pdnf and pcnf in discrete mathematics, functional completeness, introduction to propositional logic set 1, introduction to propositional logic set 2, propositional equivalence, predicates and quantifiers set 1, predicates and quantifiers set 2, some theorems on nested quantifiers, rules of inference, consensus theorem, introduction to proofs, combinatorics basics, pigeonhole principle, pnc and binomial coefficients, generalized pnc set 1, generalized pnc set 2, inclusion-exclusion and its various applications, corollaries of binomial theorem, introduction of generating functions, generating functions – set 2, set theory | introduction, set theory | set operations, power set and its properties, relations and their types, relations and their representations, representing relations, closure of relations and equivalence relations, functions | properties and types, inverse functions and composition of functions, total number of possible functions, number of possible equivalence relations, groups, partial orders and lattices, hasse diagrams, graph theory basics – set 1, graph theory basics – set 2, walks, trails, paths, cycles and circuits in graph, number of nodes and height of binary tree, graph measurements: length, distance, diameter, eccentricity, radius, center, graph isomorphisms and connectivity, planar graphs and graph coloring, euler and hamiltonian paths, independent sets, covering and matching, matching (graph theory), graph theory practice questions, recurrence relations, different types of recurrence relations and their solutions, types of recurrence relations – set 2, linear algebra : matrix introduction different operations on matrices l u decomposition doolittle algorithm : lu decomposition system of linear equations eigen values and eigen vectors, matrix introduction, different operations on matrices, l u decomposition, doolittle algorithm : lu decomposition, system of linear equations, eigen values and eigen vectors, probability : probability random variables mean, variance and standard deviation law of total probability bayes’s formula for conditional probability probability distributions set 1 (uniform distribution) probability distributions set 2 (exponential distribution) probability distributions set 3 (normal distribution) probability distributions set 4 (binomial distribution) probability distributions set 5 (poisson distribution) hypergeometric distribution model conditional probability covariance and correlation, probability, random variables, mean, variance and standard deviation, law of total probability, bayes’s formula for conditional probability, probability distributions set 1 (uniform distribution), probability distributions set 2 (exponential distribution), probability distributions set 3 (normal distribution), probability distributions set 4 (binomial distribution), probability distributions set 5 (poisson distribution), hypergeometric distribution model, conditional probability, covariance and correlation, calculus : limits, continuity and differentiability lagrange’s mean value theorem mean value theorem | rolle’s theorem cauchy’s mean value theorem indefinite integrals finding nth term of any polynomial sequence sequence, series and summations category archives: engineering mathematics last minute notes – engineering mathematics, limits, continuity and differentiability, lagrange’s mean value theorem, mean value theorem | rolle’s theorem, cauchy’s mean value theorem, indefinite integrals, finding nth term of any polynomial sequence, sequence, series and summations, category archives: engineering mathematics, last minute notes – engineering mathematics, discrete mathematics : propositional and first order logic set theory & algebra combinatorics combinatorics | set 1 combinatorics | set 2 graph theory, propositional and first order logic, set theory & algebra, combinatorics, combinatorics | set 1, combinatorics | set 2, graph theory, linear algebra : linear algebra, linear algebra, probability : probability, probability, calculus : calculus, calculus, discrete mathematics : video – mit discrete mathematics lectures notes – first order logic book – schaum’s pdf mit – lecture notes iisc – video lectures papers – gate’s explanation by nptel, video – mit discrete mathematics lectures, notes – first order logic, book – schaum’s pdf, mit – lecture notes, iisc – video lectures, papers – gate’s explanation by nptel, linear algebra : mit – linear algebra book – linear algebra, mit – linear algebra, book – linear algebra, probability : book – probability notes – probability, book – probability, notes – probability, calculus : mit – video lectures notes – calculus calculus, mit – video lectures, notes – calculus, calculus, searching, sorting, hashing, asymptotic worst case time and space complexity, algorithm design techniques : greedy, dynamic programming and divide‐and‐conquer, graph traversals, minimum spanning trees, shortest paths, asymptotic analysis of algorithms : analysis of algorithms | set 1 (asymptotic analysis) analysis of algorithms | set 2 (worst, average and best cases) analysis of algorithms | set 3 (asymptotic notations) analysis of algorithms | set 4 (analysis of loops) analysis of algorithm | set 5 (amortized analysis introduction) analysis of algorithms | little o and little omega notations what does ‘space complexity’ mean? articles | analysis of algorithms, analysis of algorithms | set 1 (asymptotic analysis), analysis of algorithms | set 2 (worst, average and best cases), analysis of algorithms | set 3 (asymptotic notations), analysis of algorithms | set 4 (analysis of loops), analysis of algorithm | set 5 (amortized analysis introduction), analysis of algorithms | little o and little omega notations, what does ‘space complexity’ mean?, articles | analysis of algorithms, recurrence relations : analysis of algorithm | set 4 (solving recurrences) different types of recurrence relations and their solutions, analysis of algorithm | set 4 (solving recurrences), different types of recurrence relations and their solutions, divide and conquer : divide and conquer | set 1 (introduction) binary search why is binary search preferred over ternary search? merge sort merge sort for linked lists merge sort for doubly linked list how to make mergesort to perform o(n) comparisons in best case? quicksort iterative quick sort quicksort on singly linked list quicksort on doubly linked list when does the worst case of quicksort occur? why quick sort preferred for arrays and merge sort for linked lists? write a program to calculate pow(x,n) median of two sorted arrays count inversions in an array | set 1 (using merge sort) divide and conquer | set 2 (closest pair of points) divide and conquer | set 5 (strassen’s matrix multiplication) sort a nearly sorted (or k sorted) array search in an almost sorted array k-th element of two sorted arrays k’th smallest/largest element in unsorted array | set 2 (expected linear time) searching and sorting, divide and conquer | set 1 (introduction), binary search, why is binary search preferred over ternary search?, merge sort, merge sort for linked lists, merge sort for doubly linked list, how to make mergesort to perform o(n) comparisons in best case?, quicksort, iterative quick sort, quicksort on singly linked list, quicksort on doubly linked list, when does the worst case of quicksort occur?, why quick sort preferred for arrays and merge sort for linked lists?, write a program to calculate pow(x,n), median of two sorted arrays, count inversions in an array | set 1 (using merge sort), divide and conquer | set 2 (closest pair of points), divide and conquer | set 5 (strassen’s matrix multiplication), sort a nearly sorted (or k sorted) array, search in an almost sorted array, k-th element of two sorted arrays, k’th smallest/largest element in unsorted array | set 2 (expected linear time), searching and sorting, greedy techniques : greedy algorithms | set 1 (activity selection problem) job sequencing problem | set 1 (greedy algorithm) greedy algorithms | set 3 (huffman coding) greedy algorithms | set 4 (efficient huffman coding for sorted input) greedy algorithms | set 2 (kruskal’s minimum spanning tree algorithm) greedy algorithms | set 5 (prim’s minimum spanning tree (mst)) greedy algorithms | set 6 (prim’s mst for adjacency list representation) applications of minimum spanning tree problem greedy algorithms | set 7 (dijkstra’s shortest path algorithm) greedy algorithms | set 8 (dijkstra’s algorithm for adjacency list representation) greedy algorithm to find minimum number of coins strongly connected components greedy algorithms, greedy algorithms | set 1 (activity selection problem), job sequencing problem | set 1 (greedy algorithm), greedy algorithms | set 3 (huffman coding), greedy algorithms | set 4 (efficient huffman coding for sorted input), greedy algorithms | set 2 (kruskal’s minimum spanning tree algorithm), greedy algorithms | set 5 (prim’s minimum spanning tree (mst)), greedy algorithms | set 6 (prim’s mst for adjacency list representation), applications of minimum spanning tree problem, greedy algorithms | set 7 (dijkstra’s shortest path algorithm), greedy algorithms | set 8 (dijkstra’s algorithm for adjacency list representation), greedy algorithm to find minimum number of coins, strongly connected components, greedy algorithms, graph based algorithms : graph and its representations breadth first traversal or bfs for a graph depth first traversal or dfs for a graph applications of depth first search detect cycle in a directed graph disjoint set (or union-find) | set 1 (detect cycle in an undirected graph) detect cycle in an undirected graph topological sorting longest path in a directed acyclic graph biconnected components bellman–ford algorithm floyd warshall algorithm shortest path in directed acyclic graph some interesting shortest path questions | set 1 shortest path with exactly k edges in a directed and weighted graph biconnected components biconnected graph articulation points (or cut vertices) in a graph check if a graph is strongly connected | set 1 (kosaraju using dfs) bridges in a graph transitive closure of a graph graph algorithms | dfs and bfs | minimum spanning tree | shortest paths | connectivity, graph and its representations, breadth first traversal or bfs for a graph, depth first traversal or dfs for a graph, applications of depth first search, detect cycle in a directed graph, disjoint set (or union-find) | set 1 (detect cycle in an undirected graph), detect cycle in an undirected graph, topological sorting, longest path in a directed acyclic graph, biconnected components, bellman–ford algorithm, floyd warshall algorithm, shortest path in directed acyclic graph, some interesting shortest path questions | set 1, shortest path with exactly k edges in a directed and weighted graph, biconnected components, biconnected graph, articulation points (or cut vertices) in a graph, check if a graph is strongly connected | set 1 (kosaraju using dfs), bridges in a graph, transitive closure of a graph, graph algorithms | dfs and bfs | minimum spanning tree | shortest paths | connectivity, dynamic programing : dynamic programming | set 1 (overlapping subproblems property) dynamic programming | set 2 (optimal substructure property) dynamic programming | set 4 (longest common subsequence) dynamic programming | set 8 (matrix chain multiplication) dynamic programming | set 10 ( 0-1 knapsack problem) dynamic programming | set 6 (min cost path) dynamic programming | set 25 (subset sum problem) dynamic programming | set 23 (bellman–ford algorithm) dynamic programming | set 16 (floyd warshall algorithm) total number of non-decreasing numbers with n digits vertex cover problem | set 2 (dynamic programming solution for tree) smallest power of 2 greater than or equal to n travelling salesman problem | set 1 (naive and dynamic programming) travelling salesman problem | set 2 (approximate using mst) dynamic programming, dynamic programming | set 1 (overlapping subproblems property), dynamic programming | set 2 (optimal substructure property), dynamic programming | set 4 (longest common subsequence), dynamic programming | set 8 (matrix chain multiplication), dynamic programming | set 10 ( 0-1 knapsack problem), dynamic programming | set 6 (min cost path), dynamic programming | set 25 (subset sum problem), dynamic programming | set 23 (bellman–ford algorithm), dynamic programming | set 16 (floyd warshall algorithm), total number of non-decreasing numbers with n digits, vertex cover problem | set 2 (dynamic programming solution for tree), smallest power of 2 greater than or equal to n, travelling salesman problem | set 1 (naive and dynamic programming), travelling salesman problem | set 2 (approximate using mst), dynamic programming, searching, sorting and hashing : linear search linear search vs binary search selection sort bubble sort insertion sort heap sort radix sort counting sort hashing | set 1 (introduction) hashing | set 2 (separate chaining) hashing | set 3 (open addressing) hash table vs stl map advantages of bst over hash table, linear search, linear search vs binary search, selection sort, bubble sort, insertion sort, heap sort, radix sort, counting sort, hashing | set 1 (introduction), hashing | set 2 (separate chaining), hashing | set 3 (open addressing), hash table vs stl map, advantages of bst over hash table, misc : find subarray with given sum | set 2 (handles negative numbers) largest subarray with equal number of 0s and 1s find four elements a, b, c and d in an array such that a+b = c+d print all subarrays with 0 sum given an array a[] and a number x, check for pair in a[] with sum as x union and intersection of two linked lists find whether an array is subset of another array | added method 3 count pairs with given sum top 20 hashing technique based interview questions category archives: algorithms last minute notes – algorithms, find subarray with given sum | set 2 (handles negative numbers), largest subarray with equal number of 0s and 1s, find four elements a, b, c and d in an array such that a+b = c+d, print all subarrays with 0 sum, given an array a[] and a number x, check for pair in a[] with sum as x, union and intersection of two linked lists, find whether an array is subset of another array | added method 3, count pairs with given sum, top 20 hashing technique based interview questions, category archives: algorithms, last minute notes – algorithms, asymptotic analysis of algorithms : analysis of algorithms, analysis of algorithms, recurrence relations : analysis of algorithms (recurrences) practice set for recurrence relations, analysis of algorithms (recurrences), practice set for recurrence relations, divide and conquer : mergesort divide and conquer, mergesort, divide and conquer, greedy techniques : graph minimum spanning tree graph shortest paths greedy algorithms, graph minimum spanning tree, graph shortest paths, greedy algorithms, graph based algorithms : graph graph traversals, graph, graph traversals, dynamic programing : dynamic programming, dynamic programming, searching, sorting and hashing : searching sorting hashing, searching, sorting, hashing, misc : misc commonly asked algorithm interview questions | set 1 data structures and algorithms | set 1 data structures and algorithms | set 2 data structures and algorithms | set 3 data structures and algorithms | set 4 data structures and algorithms | set 5 data structures and algorithms | set 6 data structures and algorithms | set 7 data structures and algorithms | set 8 data structures and algorithms | set 9 data structures and algorithms | set 10 data structures and algorithms | set 11 data structures and algorithms | set 12 data structures and algorithms | set 13 data structures and algorithms | set 14 data structures and algorithms | set 15 data structures and algorithms | set 16 data structures and algorithms | set 17 data structures and algorithms | set 18 data structures and algorithms | set 19 data structures and algorithms | set 20 data structures and algorithms | set 21 data structures and algorithms | set 22 data structures and algorithms | set 23 data structures and algorithms | set 24 data structures and algorithms | set 25 data structures and algorithms | set 26 data structures and algorithms | set 27 data structures and algorithms | set 28 data structures and algorithms | set 29 data structures and algorithms | set 30 data structures and algorithms | set 31 data structures and algorithms | set 32 data structures and algorithms | set 33 data structures and algorithms | set 34 data structures and algorithms | set 35, misc, commonly asked algorithm interview questions | set 1, data structures and algorithms | set 1, data structures and algorithms | set 2, data structures and algorithms | set 3, data structures and algorithms | set 4, data structures and algorithms | set 5, data structures and algorithms | set 6, data structures and algorithms | set 7, data structures and algorithms | set 8, data structures and algorithms | set 9, data structures and algorithms | set 10, data structures and algorithms | set 11, data structures and algorithms | set 12, data structures and algorithms | set 13, data structures and algorithms | set 14, data structures and algorithms | set 15, data structures and algorithms | set 16, data structures and algorithms | set 17, data structures and algorithms | set 18, data structures and algorithms | set 19, data structures and algorithms | set 20, data structures and algorithms | set 21, data structures and algorithms | set 22, data structures and algorithms | set 23, data structures and algorithms | set 24, data structures and algorithms | set 25, data structures and algorithms | set 26, data structures and algorithms | set 27, data structures and algorithms | set 28, data structures and algorithms | set 29, data structures and algorithms | set 30, data structures and algorithms | set 31, data structures and algorithms | set 32, data structures and algorithms | set 33, data structures and algorithms | set 34, data structures and algorithms | set 35, video – geeksforgeeks videos, video – lectures by ravindrababu ravula, mit – introduction to algorithms, book – clrs solutions manual, visual – data structures and algorithms., notes – big – o notation, notes – master theorem, notes – extended master theorem, notes – master theorem problems and answers, programming in c, recursion, arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs, programming in c, recursion : c programming recursion tail recursion recursive functions, c programming, recursion, tail recursion, recursive functions, array, stack, queue : arrays stack queue, arrays, stack, queue, linked lists : linked list, linked list, trees, binary search trees, binary heaps : binary tree binary search tree binary heap, binary tree, binary search tree, binary heap, graphs : graph category archives: data structures category archives: c last minute notes – data structure last minute notes – c/c++, graph, category archives: data structures, category archives: c, last minute notes – data structure, last minute notes – c/c++, programming in c, recursion : principle of programming languages | set 1 c language recursion c language | set 1 c language | set 2 c language | set 3 c language | set 4 c language | set 5 c language | set 6 c language | set 7 c language | set 8 c language | set 9 c language | set 10, principle of programming languages | set 1, c language, recursion, c language | set 1, c language | set 2, c language | set 3, c language | set 4, c language | set 5, c language | set 6, c language | set 7, c language | set 8, c language | set 9, c language | set 10, array, stack, queue : array stack queue, array, stack, queue, linked lists : linked list, linked list, trees, binary search trees, binary heaps : binary trees tree traversals binary search trees balanced binary search trees heap, binary trees, tree traversals, binary search trees, balanced binary search trees, heap, graphs : graph graph traversals commonly asked data structure interview questions | set 1, graph, graph traversals, commonly asked data structure interview questions | set 1, video – nptel lectures, visual – data structure visualizations, processes, system calls, threads, cpu scheduling, inter‐process communication, concurrency and synchronization, deadlock, memory management and virtual memory, i/o scheduling, file systems, processes, threads, cpu scheduling : what happens when we turn on computer? introduction of operating system functions of operating system types of operating systems dual mode operations in os privileged and non-privileged instructions 32-bit and 64-bit operating systems real time systems operating systems | need and functions process management | introduction states of a process process table and process control block (pcb) process scheduler difference between dispatcher and scheduler process management | cpu scheduling preemptive and non-preemptive scheduling program for fcfs scheduling | set 1 program for fcfs scheduling | set 2 (processes with different arrival times) convoy effect in operating systems program for preemptive priority cpu scheduling program for round robin scheduling | set 1 round robin scheduling with different arrival times program for shortest job first (or sjf) scheduling | set 1 (non- preemptive) program for shortest job first (sjf) scheduling | set 2 (preemptive) shortest job first scheduling with predicted burst time longest remaining time first (lrtf) algorithm longest remaining time first (lrtf) program highest response ratio next (hrrn) scheduling program for priority scheduling | set 1 priority scheduling with different arrival time | set 2 multilevel queue scheduling multilevel feedback queue scheduling multiple-processor scheduling measure the time spent in context switch starvation and aging in operating systems introduction of system call operating system | thread threads and its types multithreading multi threading models benefits of multithreading process-based and thread-based multitasking user level thread vs kernel level thread microkernel monolithic kernel and key differences from microkernel difference between multitasking, multithreading and multiprocessing fork() in c boot block, what happens when we turn on computer?, introduction of operating system, functions of operating system, types of operating systems, dual mode operations in os, privileged and non-privileged instructions, 32-bit and 64-bit operating systems, real time systems, operating systems | need and functions, process management | introduction, states of a process, process table and process control block (pcb), process scheduler, difference between dispatcher and scheduler, process management | cpu scheduling, preemptive and non-preemptive scheduling, program for fcfs scheduling | set 1, program for fcfs scheduling | set 2 (processes with different arrival times), convoy effect in operating systems, program for preemptive priority cpu scheduling, program for round robin scheduling | set 1, round robin scheduling with different arrival times, program for shortest job first (or sjf) scheduling | set 1 (non- preemptive), program for shortest job first (sjf) scheduling | set 2 (preemptive), shortest job first scheduling with predicted burst time, longest remaining time first (lrtf) algorithm, longest remaining time first (lrtf) program, highest response ratio next (hrrn) scheduling, program for priority scheduling | set 1, priority scheduling with different arrival time | set 2, multilevel queue scheduling, multilevel feedback queue scheduling, multiple-processor scheduling, measure the time spent in context switch, starvation and aging in operating systems, introduction of system call, operating system | thread, threads and its types, multithreading, multi threading models, benefits of multithreading, process-based and thread-based multitasking, user level thread vs kernel level thread, microkernel, monolithic kernel and key differences from microkernel, difference between multitasking, multithreading and multiprocessing, fork() in c, boot block, inter‐process communication, concurrency and synchronization: process synchronization | introduction operating system | process synchronization | set 2 critical section inter process communication ipc using message queues ipc through shared memory interprocess communication: methods semaphores in operating system mutex vs semaphore lock variable synchronization mechanism peterson’s algorithm for mutual exclusion | set 1 (basic c implementation) peterson’s algorithm for mutual exclusion | set 2 (cpu cycles and memory fence) peterson’s algorithm (using processes and shared memory) readers-writers problem | set 1 (introduction and readers preference solution) reader-writers solution using monitors producer consumer problem using semaphores | set 1 producer-consumer solution using semaphores in java | set 2 sleeping barber problem process synchronization | monitors dining-philosophers solution using monitors dining philosopher problem using semaphores dekker’s algorithm bakery algorithm priority inversion : what the heck ! what’s difference between priority inversion and priority inheritance ? deadlock, starvation, and livelock, process synchronization | introduction, operating system | process synchronization | set 2, critical section, inter process communication, ipc using message queues, ipc through shared memory, interprocess communication: methods, semaphores in operating system, mutex vs semaphore, lock variable synchronization mechanism, peterson’s algorithm for mutual exclusion | set 1 (basic c implementation), peterson’s algorithm for mutual exclusion | set 2 (cpu cycles and memory fence), peterson’s algorithm (using processes and shared memory), readers-writers problem | set 1 (introduction and readers preference solution), reader-writers solution using monitors, producer consumer problem using semaphores | set 1, producer-consumer solution using semaphores in java | set 2, sleeping barber problem, process synchronization | monitors, dining-philosophers solution using monitors, dining philosopher problem using semaphores, dekker’s algorithm, bakery algorithm, priority inversion : what the heck !, what’s difference between priority inversion and priority inheritance ?, deadlock, starvation, and livelock, deadlock : process management | deadlock introduction program for deadlock free condition deadlock prevention and avoidance deadlock detection and recovery resource allocation graph (rag) banker’s algorithm program for banker’s algorithm | set 1 (safety algorithm) banker’s algorithm : print all the safe state deadlock detection algorithm methods of resource allocation to processes by operating system, process management | deadlock introduction, program for deadlock free condition, deadlock prevention and avoidance, deadlock detection and recovery, resource allocation graph (rag), banker’s algorithm, program for banker’s algorithm | set 1 (safety algorithm), banker’s algorithm : print all the safe state, deadlock detection algorithm, methods of resource allocation to processes by operating system, main memory management : mapping virtual address to physical addresses logical vs physical address in operating system paging page table entries inverted page table segmentation memory management | partition allocation method program for first fit algorithm in memory management program for next fit algorithm in memory management non-contiguous allocation fixed (or static) partitioning variable (or dynamic) partitioning working with shared libraries | set 1 static and dynamic libraries | set 1 buddy system buddy system memory allocation buddy system memory deallocation allocating kernel memory requirements of memory management system, mapping virtual address to physical addresses, logical vs physical address in operating system, paging, page table entries, inverted page table, segmentation, memory management | partition allocation method, program for first fit algorithm in memory management, program for next fit algorithm in memory management, non-contiguous allocation, fixed (or static) partitioning, variable (or dynamic) partitioning, working with shared libraries | set 1, static and dynamic libraries | set 1, buddy system, buddy system memory allocation, buddy system memory deallocation, allocating kernel memory, requirements of memory management system, virtual memory : virtual memory secondary memory – hard disk drive page fault handling page replacement algorithms belady’s anomaly program for optimal page replacement algorithm second chance (or clock) page replacement policy techniques to handle thrashing what exactly spooling is all about? difference between spooling and buffering overlays in memory management swap space, virtual memory, secondary memory – hard disk drive, page fault handling, page replacement algorithms, belady’s anomaly, program for optimal page replacement algorithm, second chance (or clock) page replacement policy, techniques to handle thrashing, what exactly spooling is all about?, difference between spooling and buffering, overlays in memory management, swap space, file system and disk scheduling : file systems structures of directory file directory | path name file access methods file allocation methods operating system | free space management difference between fat32, exfat, and ntfs file system disk scheduling algorithms program for sstf disk scheduling algorithm category archives: operating systems last minute notes – operating systems, file systems, structures of directory, file directory | path name, file access methods, file allocation methods, operating system | free space management, difference between fat32, exfat, and ntfs file system, disk scheduling algorithms, program for sstf disk scheduling algorithm, category archives: operating systems, last minute notes – operating systems, processes, threads, cpu scheduling : process management cpu scheduling, process management, cpu scheduling, inter‐process communication, concurrency and synchronization : concurrency and synchronization, concurrency and synchronization, deadlock : deadlock, deadlock, main memory management : memory management, memory management, virtual memory : virtual memory | questions, virtual memory | questions, file system and disk scheduling : input output systems unix – i node commonly asked operating systems interview questions | set 1 operating systems | set 1 operating systems | set 2 operating systems | set 3 operating systems | set 4 operating systems | set 5 operating systems | set 6 operating systems | set 7 operating systems | set 8 operating systems | set 9 operating systems | set 10 operating systems | set 11 operating systems | set 12 operating systems | set 13 operating systems | set 14 operating systems | set 15 operating systems | set 16 operating systems | set 17, input output systems, unix – i node, commonly asked operating systems interview questions | set 1, operating systems | set 1, operating systems | set 2, operating systems | set 3, operating systems | set 4, operating systems | set 5, operating systems | set 6, operating systems | set 7, operating systems | set 8, operating systems | set 9, operating systems | set 10, operating systems | set 11, operating systems | set 12, operating systems | set 13, operating systems | set 14, operating systems | set 15, operating systems | set 16, operating systems | set 17, video – nptel lectures, video – lectures by ravindrababu ravula, notes – virginiatech univ. web resource, notes – galvin lecture slides, book – william stallings practice problems and solutions, notes – user and kernel level threads, notes – virtual memory and cache, notes – segmentation and paging, notes – some interesting problems on virtual memory, er‐model, relational model : relational algebra, tuple calculus, sql, integrity constraints, normal forms, transactions and concurrency control, file organization, indexing (e.g., b and b+ trees), er‐model : database management system – introduction | set 1 database management system introduction | set 2 (3-tier architecture) dbms architecture 2-level, 3-level need for dbms advantages of dbms over file system choice of dbms | economic factors data abstraction and data independence er model recursive relationships minimization of er diagram enhanced er model mapping from er model to relational model, database management system – introduction | set 1, database management system introduction | set 2 (3-tier architecture), dbms architecture 2-level, 3-level, need for dbms, advantages of dbms over file system, choice of dbms | economic factors, data abstraction and data independence, er model, recursive relationships, minimization of er diagram, enhanced er model, mapping from er model to relational model, relational model (relational algebra, tuple calculus) : relational model relational algebra – overview dbms | anomalies in relational model relational model introduction and codd rules keys in relational model (candidate, super, primary, alternate and foreign) relational algebra-basic operators relational algebra – extended operators tupple relational calculus dbms | how to solve relational algebra problems for gate dbms | row oriented vs. column oriented data stores, relational model, relational algebra – overview, dbms | anomalies in relational model, relational model introduction and codd rules, keys in relational model (candidate, super, primary, alternate and foreign), relational algebra-basic operators, relational algebra – extended operators, tupple relational calculus, dbms | how to solve relational algebra problems for gate, dbms | row oriented vs. column oriented data stores, database design (integrity constraints, normal forms) : database normalization | introduction database normalization | normal forms functional dependency and attribute closure finding attribute closure and candidate keys using functional dependencies number of possible superkeys lossless decomposition dependency preserving decomposition lossless join and dependency preserving decomposition dbms | how to find the highest normal form of a relation dbms | minimum relations satisfying 1nf equivalence of functional dependencies armstrong’s axioms in functional dependency canonical cover denormalization in databases introduction of 4th and 5th normal form, database normalization | introduction, database normalization | normal forms, functional dependency and attribute closure, finding attribute closure and candidate keys using functional dependencies, number of possible superkeys, lossless decomposition, dependency preserving decomposition, lossless join and dependency preserving decomposition, dbms | how to find the highest normal form of a relation, dbms | minimum relations satisfying 1nf, equivalence of functional dependencies, armstrong’s axioms in functional dependency, canonical cover, denormalization in databases, introduction of 4th and 5th normal form, query languages (sql) : structured query language (sql) inner vs outer join having vs where clause database objects nested queries in sql join operation vs nested query indexing in databases | set 1 sql queries on clustered and non-clustered indexes sql tutorial, structured query language (sql), inner vs outer join, having vs where clause, database objects, nested queries in sql, join operation vs nested query, indexing in databases | set 1, sql queries on clustered and non-clustered indexes, sql tutorial, transactions and concurrency control : concurrency control -introduction database recovery techniques acid properties in dbms log based recovery dbms | why recovery is needed? transaction isolation levels in dbms concurrency control | types of schedules dbms | types of recoverability of schedules and easiest way to test schedule conflict serializability precedence graph for testing conflict serializability how to test if two schedules are view equal or not ? recoverability of schedules deadlock in dbms starvation in dbms concurrency control protocols | lock based protocol concurrency control protocol | two phase locking (2-pl)-i concurrency control protocol | two phase locking (2-pl)-ii concurrency control protocol | two phase locking (2-pl)-iii concurrency control protocol | thomas write rule concurrency control protocols | timestamp ordering protocols concurrency control protocol | multiple granularity locking concurrency control protocol | graph based protocol introduction to timestamp and deadlock prevention schemes implementation of locking in dbms dbms | challenges of database security, concurrency control -introduction, database recovery techniques, acid properties in dbms, log based recovery, dbms | why recovery is needed?, transaction isolation levels in dbms, concurrency control | types of schedules, dbms | types of recoverability of schedules and easiest way to test schedule, conflict serializability, precedence graph for testing conflict serializability, how to test if two schedules are view equal or not ?, recoverability of schedules, deadlock in dbms, starvation in dbms, concurrency control protocols | lock based protocol, concurrency control protocol | two phase locking (2-pl)-i, concurrency control protocol | two phase locking (2-pl)-ii, concurrency control protocol | two phase locking (2-pl)-iii, concurrency control protocol | thomas write rule, concurrency control protocols | timestamp ordering protocols, concurrency control protocol | multiple granularity locking, concurrency control protocol | graph based protocol, introduction to timestamp and deadlock prevention schemes, implementation of locking in dbms, dbms | challenges of database security, file structures (sequential files, indexing, b and b+ trees) : indexing in databases | set 1 file organization – set 1 file organization – set 2 (hashing in dbms) file organization – set 3 b-tree | set 1 (introduction) b-tree | set 2 (insert) b-tree | set 3 (delete) database file indexing – b+ tree (introduction) raid data warehousing data mining data replication category archives: dbms last minute notes – dbms, indexing in databases | set 1, file organization – set 1, file organization – set 2 (hashing in dbms), file organization – set 3, b-tree | set 1 (introduction), b-tree | set 2 (insert), b-tree | set 3 (delete), database file indexing – b+ tree (introduction), raid, data warehousing, data mining, data replication, category archives: dbms, last minute notes – dbms, er‐model: er and relational models, er and relational models, relational model (relational algebra, tuple calculus): er and relational models, er and relational models, database design (integrity constraints, normal forms): database design(normal forms), database design(normal forms), query languages (sql) : sql, sql, transactions and concurrency control: transactions and concurrency control, transactions and concurrency control, file structures (sequential files, indexing, b and b+ trees): file structures (sequential files, indexing, b and b+ trees) practice questions on b and b+ trees commonly asked dbms interview questions | set 1 commonly asked dbms interview questions | set 2 database management systems | set 1 database management systems | set 2 database management systems | set 3 database management systems | set 4 database management systems | set 5 database management systems | set 6 database management systems | set 7 database management systems | set 8 database management systems | set 9 database management systems | set 10 database management systems | set 11, file structures (sequential files, indexing, b and b+ trees), practice questions on b and b+ trees, commonly asked dbms interview questions | set 1, commonly asked dbms interview questions | set 2, database management systems | set 1, database management systems | set 2, database management systems | set 3, database management systems | set 4, database management systems | set 5, database management systems | set 6, database management systems | set 7, database management systems | set 8, database management systems | set 9, database management systems | set 10, database management systems | set 11, video – nptel lectures, notes – lecture slides silberschatz, korth and sudarshan, notes – lecture slides raghu ramakrishnan and johannes gehrke, notes – stanford dbms course lecture slides, notes – jeff ullman’s lecture slides, notes – canonical cover, notes – indexing, visual – b tree, notes – b+ tree, visual – b+ tree, concept of layering: osi and tcp/ip protocol stacks; basics of packet, circuit and virtual circuit-switching;, data link layer: framing, error detection, medium access control, ethernet bridging;, routing protocols: shortest path, flooding, distance vector and link state routing; fragmentation and ip addressing, ipv4, cidr notation, basics of ip support protocols (arp, dhcp, icmp), network address translation (nat);, transport layer: flow control and congestion control, udp, tcp, sockets;, application layer protocols: dns, smtp, http, ftp, email., network fundamental and physical layer : basics of computer networking network goals network topologies types of area networks – lan, man and wan manet: mobile ad hoc network types of manet types of transmission media transmission modes in computer networks (simplex, half-duplex and full-duplex) redundant link problems digital subscriber line (dsl) what is scrambling? difference between unipolar, polar and bipolar line coding schemes manchester encoding analog to digital conversion digital to analog conversion analog to analog conversion (modulation) difference between broadband and baseband transmission let’s experiment with networking layers of osi model tcp/ip model, basics of computer networking, network goals, network topologies, types of area networks – lan, man and wan, manet: mobile ad hoc network, types of manet, types of transmission media, transmission modes in computer networks (simplex, half-duplex and full-duplex), redundant link problems, digital subscriber line (dsl), what is scrambling?, difference between unipolar, polar and bipolar line coding schemes, manchester encoding, analog to digital conversion, digital to analog conversion, analog to analog conversion (modulation), difference between broadband and baseband transmission, let’s experiment with networking, layers of osi model, tcp/ip model, data link layer : multiple access protocols p2p(peer to peer) file sharing framing in data link layer lan technologies | ethernet ethernet frame format token ring frame format bit stuffing difference between byte stuffing and bit stuffing hamming code carrier sense multiple access (csma) controlled access protocols back-off algorithm for csma/cd collision detection in csma/cd efficiency of csma/cd efficiency of token ring computer networks | error detection stop and wait arq sliding window protocol | set 1 (sender side) sliding window protocol | set 2 (receiver side) sliding window protocol | set 3 (selective repeat) sliding window protocols summary with questions program to remotely power on a pc over the internet using the wake-on-lan protocol program to calculate the round trip time (rtt) introduction of mac address collision avoidance in wireless networks maximum data rate (channel capacity) for noiseless and noisy channels types of switches, multiple access protocols, p2p(peer to peer) file sharing, framing in data link layer, lan technologies | ethernet, ethernet frame format, token ring frame format, bit stuffing, difference between byte stuffing and bit stuffing, hamming code, carrier sense multiple access (csma), controlled access protocols, back-off algorithm for csma/cd, collision detection in csma/cd, efficiency of csma/cd, efficiency of token ring, computer networks | error detection, stop and wait arq, sliding window protocol | set 1 (sender side), sliding window protocol | set 2 (receiver side), sliding window protocol | set 3 (selective repeat), sliding window protocols summary with questions, program to remotely power on a pc over the internet using the wake-on-lan protocol, program to calculate the round trip time (rtt), introduction of mac address, collision avoidance in wireless networks, maximum data rate (channel capacity) for noiseless and noisy channels, types of switches, network layer : internetworking line configuration in computer networks difference between unicast, broadcast and multicast collision domain and broadcast domain ip addressing | introduction and classful addressing network layer | introduction and ipv4 datagram header network layer | ipv4 datagram fragmentation and delays fragmentation at network layer internet protocol v6 | ipv6 internet protocol version 6 (ipv6) header ip addressing | classless addressing supernetting computer networks | longest prefix matching in routers program to determine class, network and host id of an ipv4 address c program to find ip address, subnet mask & default gateway ipv4 classless subnet equation introduction to variable length subnet mask (vlsm) network address translation (nat) types of network address translation (nat) classification of routing algorithms – set 1 types of routing – set 2 classes of routing protocols – set 3 distance vector routing v/s link state routing fixed and flooding routing algorithms routing v/s routed protocols unicast routing – link state routing routing protocols set 1 (distance vector routing) route poisoning and count to infinity problem onion routing router on a stick internet control message protocol (icmp) | computer networks hot standby router protocol (hsrp) ospf protocol fundamentals ospf protocol states ospf router roles and configuration root bridge election in spanning tree protocol types of spanning tree protocol (stp) eigrp fundamentals features of enhanced interior gateway routing protocol (eigrp) routing information protocol (rip) routing interface protocol (rip) v1 & v2 link state advertisement (lsa) administrative distance (ad) and autonomous system (as) circuit switching packet switching and delays differences between virtual circuits & datagram networks computer network | circuit switching vs packet switching traceroute how arp works? arp, reverse arp(rarp), inverse arp(inarp), proxy arp and gratuitous arp packet flow in the same network packet flow in different network difference between layer-2 and layer-3 switches what’s difference between ping and traceroute? computer network | servers what is local host?, internetworking, line configuration in computer networks, difference between unicast, broadcast and multicast, collision domain and broadcast domain, ip addressing | introduction and classful addressing, network layer | introduction and ipv4 datagram header, network layer | ipv4 datagram fragmentation and delays, fragmentation at network layer, internet protocol v6 | ipv6, internet protocol version 6 (ipv6) header, ip addressing | classless addressing, supernetting, computer networks | longest prefix matching in routers, program to determine class, network and host id of an ipv4 address, c program to find ip address, subnet mask & default gateway, ipv4 classless subnet equation, introduction to variable length subnet mask (vlsm), network address translation (nat), types of network address translation (nat), classification of routing algorithms – set 1, types of routing – set 2, classes of routing protocols – set 3, distance vector routing v/s link state routing, fixed and flooding routing algorithms, routing v/s routed protocols, unicast routing – link state routing, routing protocols set 1 (distance vector routing), route poisoning and count to infinity problem, onion routing, router on a stick, internet control message protocol (icmp) | computer networks, hot standby router protocol (hsrp), ospf protocol fundamentals, ospf protocol states, ospf router roles and configuration, root bridge election in spanning tree protocol, types of spanning tree protocol (stp), eigrp fundamentals, features of enhanced interior gateway routing protocol (eigrp), routing information protocol (rip), routing interface protocol (rip) v1 & v2, link state advertisement (lsa), administrative distance (ad) and autonomous system (as), circuit switching, packet switching and delays, differences between virtual circuits & datagram networks, computer network | circuit switching vs packet switching, traceroute, how arp works?, arp, reverse arp(rarp), inverse arp(inarp), proxy arp and gratuitous arp, packet flow in the same network, packet flow in different network, difference between layer-2 and layer-3 switches, what’s difference between ping and traceroute?, computer network | servers, what is local host?, transport layer : transport layer responsibilities congestion control leaky bucket algorithm tcp | services and segment structure tcp congestion control tcp 3-way handshake process tcp connection establishment tcp connection termination error control in tcp tcp timers tcp flags tcp server-client implementation in c user datagram protocol (udp) differences between tcp and udp multiplexing and demultiplexing in transport layer, transport layer responsibilities, congestion control, leaky bucket algorithm, tcp | services and segment structure, tcp congestion control, tcp 3-way handshake process, tcp connection establishment, tcp connection termination, error control in tcp, tcp timers, tcp flags, tcp server-client implementation in c, user datagram protocol (udp), differences between tcp and udp, multiplexing and demultiplexing in transport layer, application layer : protocols in application layer dns (domain name server) | networking address resolution in dns dns spoofing or dns cache poisoning why does dns use udp and not tcp? dynamic host configuration protocol (dhcp) dhcp relay agent how dhcp server dynamically assigns ip address to a host? simple network management protocol (snmp) simple mail transfer protocol (smtp) file transfer protocol (ftp) http non-persistent & persistent connection multipurpose internet mail extension (mime) what’s difference between http:// and https:// ? what’s difference between html and http ? what’s difference between the internet and the web ? basics of wi-fi wifi protected setup (wps) wifi protected access (wpa) lifi vs. wifi network devices (hub, repeater, bridge, switch, router and gateways), protocols in application layer, dns (domain name server) | networking, address resolution in dns, dns spoofing or dns cache poisoning, why does dns use udp and not tcp?, dynamic host configuration protocol (dhcp), dhcp relay agent, how dhcp server dynamically assigns ip address to a host?, simple network management protocol (snmp), simple mail transfer protocol (smtp), file transfer protocol (ftp), http non-persistent & persistent connection, multipurpose internet mail extension (mime), what’s difference between http:// and https:// ?, what’s difference between html and http ?, what’s difference between the internet and the web ?, basics of wi-fi, wifi protected setup (wps), wifi protected access (wpa), lifi vs. wifi, network devices (hub, repeater, bridge, switch, router and gateways), network security : basic network attacks types of viruses introduction to firewall zone-based firewall firewall methodologies deniel of service and prevention cryptography | introduction to crypto-terminologies denial of service ddos attack types of dns attacks and tactics for security types of security attacks | active and passive attacks birthday attack digital signatures and certificates lzw (lempel–ziv–welch) compression technique rc4 encryption algorithm rc5 encryption algorithm sha-512 hash rsa algorithm in cryptography rsa algorithm using multiple precision arithmetic library weak rsa decryption with chinese-remainder theorem implementation of diffie-hellman algorithm dna cryptography port security unicode message authentication codes how message authentication code works? system security hash functions in system security the cia triad image steganography access-lists (acl) data encryption standard (des) difference between aes and des ciphers category archives: computer networks last minute notes – computer networks, basic network attacks, types of viruses, introduction to firewall, zone-based firewall, firewall methodologies, deniel of service and prevention, cryptography | introduction to crypto-terminologies, denial of service ddos attack, types of dns attacks and tactics for security, types of security attacks | active and passive attacks, birthday attack, digital signatures and certificates, lzw (lempel–ziv–welch) compression technique, rc4 encryption algorithm, rc5 encryption algorithm, sha-512 hash, rsa algorithm in cryptography, rsa algorithm using multiple precision arithmetic library, weak rsa decryption with chinese-remainder theorem, implementation of diffie-hellman algorithm, dna cryptography, port security, unicode, message authentication codes, how message authentication code works?, system security, hash functions in system security, the cia triad, image steganography, access-lists (acl), data encryption standard (des), difference between aes and des ciphers, category archives: computer networks, last minute notes – computer networks, network fundamental and physical layer : computer networks, computer networks, data link layer : data link layer, data link layer, network layer : network layer ip addressing, network layer, ip addressing, transport layer : transport layer, transport layer, application layer : http non-persistent & persistent connection | set 2 (practice question) application layer, http non-persistent & persistent connection | set 2 (practice question), application layer, network security : network security commonly asked computer networks interview questions | set 1 computer networks | set 1 computer networks | set 2 computer networks | set 3 computer networks | set 4 computer networks | set 5 computer networks | set 6 computer networks | set 7 computer networks | set 8 computer networks | set 9 computer networks | set 10 computer networks | set 11 computer networks | set 12, network security, commonly asked computer networks interview questions | set 1, computer networks | set 1, computer networks | set 2, computer networks | set 3, computer networks | set 4, computer networks | set 5, computer networks | set 6, computer networks | set 7, computer networks | set 8, computer networks | set 9, computer networks | set 10, computer networks | set 11, computer networks | set 12, video – nptel lectures, video – lectures by ravindrababu ravula, notes – lecture notes iit kanpur, notes – web resources on computer networks by tanenbaum, visual – sliding window animation, notes – sliding window mit, notes – ipv4 vs ipv6, machine instructions and addressing modes, alu, data‐path and control unit, instruction pipelining, pipeline hazards, memory hierarchy: cache, main memory and secondary storage, i/o interface (interrupt and dma mode), machine instructions and addressing modes : von neumann architecture basic computer instructions instruction formats (zero, one, two and three address instruction) stack based cpu organization general register based cpu organization single accumulator based cpu organization problem solving on instruction format addressing modes machine instructions difference between call and jump instructions simplified instructional computer (sic) hardware architecture (parallel computing) flynn’s taxonomy generations of computer amdahl’s law and its proof, von neumann architecture, basic computer instructions, instruction formats (zero, one, two and three address instruction), stack based cpu organization, general register based cpu organization, single accumulator based cpu organization, problem solving on instruction format, addressing modes, machine instructions, difference between call and jump instructions, simplified instructional computer (sic), hardware architecture (parallel computing), flynn’s taxonomy, generations of computer, amdahl’s law and its proof, alu, data‐path and control unit : control unit and design hardwired v/s micro-programmed control unit hardwired vs micro-programmed control unit | set 2 horizontal micro-programmed vs vertical micro-programmed control unit synchronous data transfer, control unit and design, hardwired v/s micro-programmed control unit, hardwired vs micro-programmed control unit | set 2, horizontal micro-programmed vs vertical micro-programmed control unit, synchronous data transfer, instruction pipelining : pipelining | set 1 (execution, stages and throughput) pipelining | set 2 (dependencies and data hazard) pipelining | set 3 (types and stalling) different instruction cycles performance of computer micro-operation risc and cisc risc and cisc | set 2, pipelining | set 1 (execution, stages and throughput), pipelining | set 2 (dependencies and data hazard), pipelining | set 3 (types and stalling), different instruction cycles, performance of computer, micro-operation, risc and cisc, risc and cisc | set 2, cache memory : memory hierarchy design and its characteristics cache memory cache organization | introduction locality and cache friendly code what’s difference between cpu cache and tlb? read and write operations in memory memory interleaving introduction to memory and memory units 2d and 2.5d memory organization types of computer memory (ram and rom) different types of ram ram vs rom, memory hierarchy design and its characteristics, cache memory, cache organization | introduction, locality and cache friendly code, what’s difference between cpu cache and tlb?, read and write operations in memory, memory interleaving, introduction to memory and memory units, 2d and 2.5d memory organization, types of computer memory (ram and rom), different types of ram, ram vs rom, i/o interface (interrupt and dma mode) : i/o interface (interrupt and dma mode) input-output processor kernel i/o subsystem memory mapped i/o and isolated i/o bus arbitration priority interrupts | (s/w polling and daisy chaining) asynchronous input output synchronization computer ports clusters in computer organisation human – computer interaction through the ages category archives: computer organization & architecture, i/o interface (interrupt and dma mode), input-output processor, kernel i/o subsystem, memory mapped i/o and isolated i/o, bus arbitration, priority interrupts | (s/w polling and daisy chaining), asynchronous input output synchronization, computer ports, clusters in computer organisation, human – computer interaction through the ages, category archives: computer organization & architecture, quiz on microprocessors, computer organization and architecture, video – nptel lectures, book – carl hamacher, notes – pipelining, notes – cache memory, notes – cache associativity, regular expressions and finite automata, context-free grammars and push-down automata, regular and context-free languages, pumping lemma, turing machines and undecidability, regular expression, langauges, grammar and finite automata : introduction of theory of computation finite automata | introduction chomsky hierarchy regular expressions, regular grammar and regular languages pumping lemma arden’s theorem how to identify if a language is regular or not designing finite automata from regular expression nfa with epsilon move to dfa conversion conversion from nfa to dfa minimization of dfa generating regular expression from finite automata union & intersection of regular languages with cfl designing deterministic finite automata (set 1) designing deterministic finite automata (set 2) dfa of a string with at least two 0’s and at least two 1’s dfa machines accepting odd number of 0’s or/and even number of 1’s dfa for accepting the language l = {anbm | n+m=even} dfa for strings not ending with “the” union process in dfa concatenation process in dfa star height of regular expression and regular language mealy and moore machines difference between mealy machine and moore machine, introduction of theory of computation, finite automata | introduction, chomsky hierarchy, regular expressions, regular grammar and regular languages, pumping lemma, arden’s theorem, how to identify if a language is regular or not, designing finite automata from regular expression, nfa with epsilon move to dfa conversion, conversion from nfa to dfa, minimization of dfa, generating regular expression from finite automata, union & intersection of regular languages with cfl, designing deterministic finite automata (set 1), designing deterministic finite automata (set 2), dfa of a string with at least two 0’s and at least two 1’s, dfa machines accepting odd number of 0’s or/and even number of 1’s, dfa for accepting the language l = {anbm | n+m=even}, dfa for strings not ending with “the”, union process in dfa, concatenation process in dfa, star height of regular expression and regular language, mealy and moore machines, difference between mealy machine and moore machine, context free langauges, grammar and push down automata : pushdown automata pushdown automata acceptance by final state check if the language is context free or not construct pushdown automata for given languages construct pushdown automata for l = {0n1m2m3n | m,n ≥ 0} construct pushdown automata for l = {0n1m2(n+m) | m,n ≥ 0} construct pushdown automata for all length palindrome npda for the language l ={wϵ{a,b}*| w contains equal no. of a’s and b’s} npda for accepting the language l = {an bn | n>=1} npda for accepting the language l = {an bm cn | m,n>=1} npda for accepting the language l = {an bn cm | m,n>=1} npda for accepting the language l = {am b(2m) | m>=1} npda for accepting the language l = {ambncpdq | m+n=p+q ; m,n,p,q>=1} construct pushdown automata for l = {a(2*m)c(4*n)dnbm | m,n ≥ 0} npda for accepting the language l = {ambnc(m+n) | m,n≥1} npda for accepting the language l = {amb(m+n)cn | m,n≥1} npda for accepting the language l = {a2mb3m | m≥1} npda for accepting the language l = {amb(2m+1) | m≥1} npda for l = {0i1j2k | i==j or j==k ; i , j , k >= 1} closure properties of context free languages ambiguity in cfg and cfl simplifying context free grammars converting context free grammar to chomsky normal form converting context free grammar to greibach normal form relationship between grammar and language, pushdown automata, pushdown automata acceptance by final state, check if the language is context free or not, construct pushdown automata for given languages, construct pushdown automata for l = {0n1m2m3n | m,n ≥ 0}, construct pushdown automata for l = {0n1m2(n+m) | m,n ≥ 0}, construct pushdown automata for all length palindrome, npda for the language l ={wϵ{a,b}*| w contains equal no. of a’s and b’s}, npda for accepting the language l = {an bn | n>=1}, npda for accepting the language l = {an bm cn | m,n>=1}, npda for accepting the language l = {an bn cm | m,n>=1}, npda for accepting the language l = {am b(2m) | m>=1}, npda for accepting the language l = {ambncpdq | m+n=p+q ; m,n,p,q>=1}, construct pushdown automata for l = {a(2*m)c(4*n)dnbm | m,n ≥ 0}, npda for accepting the language l = {ambnc(m+n) | m,n≥1}, npda for accepting the language l = {amb(m+n)cn | m,n≥1}, npda for accepting the language l = {a2mb3m | m≥1}, npda for accepting the language l = {amb(2m+1) | m≥1}, npda for l = {0i1j2k | i==j or j==k ; i , j , k >= 1}, closure properties of context free languages, ambiguity in cfg and cfl, simplifying context free grammars, converting context free grammar to chomsky normal form, converting context free grammar to greibach normal form, relationship between grammar and language, context sensitive langauges : context-sensitive grammar (csg) and language (csl), context-sensitive grammar (csg) and language (csl), turing machines and undecidability : recursive and recursive enumerable languages turing machine halting problem turing machine for addition turing machine for subtraction turing machine for subtraction | set 2 turing machine for multiplication turing machine for copying data construct a turing machine for language l = {0n1n2n | n≥1} construct a turing machine for language l = {wwr | w ∈ {0, 1}} construct a turing machine for language l = {ww | w ∈ {0,1}} construct turing machine for l = {anbm a(n+m) | n,m≥1} construct a turing machine for l = {aibjck | i*j = k; i, j, k ≥ 1} proof that hamiltonian path is np-complete proof that vertex cover is np complete decidability decidable and undecidable problems undecidability and reducibility computable and non-computable problems category archives: theory of computation & automata last minute notes – theory of computation, recursive and recursive enumerable languages, turing machine, halting problem, turing machine for addition, turing machine for subtraction, turing machine for subtraction | set 2, turing machine for multiplication, turing machine for copying data, construct a turing machine for language l = {0n1n2n | n≥1}, construct a turing machine for language l = {wwr | w ∈ {0, 1}}, construct a turing machine for language l = {ww | w ∈ {0,1}}, construct turing machine for l = {anbm a(n+m) | n,m≥1}, construct a turing machine for l = {aibjck | i*j = k; i, j, k ≥ 1}, proof that hamiltonian path is np-complete, proof that vertex cover is np complete, decidability, decidable and undecidable problems, undecidability and reducibility, computable and non-computable problems, category archives: theory of computation & automata, last minute notes – theory of computation, regular expression, langauges, grammar and finite automata : regular languages and finite automata practice problems on finite automata practice problems on finite automata | set 2, regular languages and finite automata, practice problems on finite automata, practice problems on finite automata | set 2, context free langauges, grammar and push down automata : context free languages and push-down automata, context free languages and push-down automata, context sensitive langauges : ., ., turing machines and undecidability : recursively enumerable sets and turing machines undecidability automata theory automata theory | set 1 automata theory | set 2 automata theory | set 3 automata theory | set 4 automata theory | set 5 automata theory | set 6, recursively enumerable sets and turing machines, undecidability, automata theory, automata theory | set 1, automata theory | set 2, automata theory | set 3, automata theory | set 4, automata theory | set 5, automata theory | set 6, video – nptel lectures, video – lectures by ravindrababu ravula, notes – nfa and dfa, notes – non regular language, notes – pda, notes – turing machine, notes – rice theorem, lexical analysis, parsing, syntax-directed translation, runtime environments, intermediate code generation, local optimisation,, data flow analyses: constant propagation, liveness analysis, common subexpression elimination., introduction of compiler : introduction of compiler design phases of a compiler symbol table in compiler static and dynamic scoping generation of programming languages error handling in compiler design error detection and recovery in compiler linker, introduction of compiler design, phases of a compiler, symbol table in compiler, static and dynamic scoping, generation of programming languages, error handling in compiler design, error detection and recovery in compiler, linker, lexical analysis : lexical analysis c program to detect tokens in a c program fast lexical analyzer generator, lexical analysis, c program to detect tokens in a c program, fast lexical analyzer generator, parsing : classification of context free grammars ambiguous grammar why first and follow? first set in syntax analysis follow set in syntax analysis program to calculate first and follow sets of given grammar introduction to syntax analysis parsing set 1 parsing set 2 parsing set 3 shift reduce parser in compiler classification of top down parsers operator grammar and precedence parser, classification of context free grammars, ambiguous grammar, why first and follow?, first set in syntax analysis, follow set in syntax analysis, program to calculate first and follow sets of given grammar, introduction to syntax analysis, parsing set 1, parsing set 2, parsing set 3, shift reduce parser in compiler, classification of top down parsers, operator grammar and precedence parser, syntax directed transalation : syntax directed translation s – attributed and l – attributed sdts in syntax directed translation, syntax directed translation, s – attributed and l – attributed sdts in syntax directed translation, runtime environments : runtime environments, runtime environments, intermediate code generation : intermediate code generation three address code in compiler detection of a loop in three address code code optimization introduction of object code data flow analysis in compiler category archives: compiler design last minute notes – compiler design, intermediate code generation, three address code in compiler, detection of a loop in three address code, code optimization, introduction of object code, data flow analysis in compiler, category archives: compiler design, last minute notes – compiler design, introduction of compiler : mcq on memory allocation and compilation process, mcq on memory allocation and compilation process, lexical analysis : lexical analysis, lexical analysis, parsing : compiler theory | set 1 compiler theory | set 2, compiler theory | set 1, compiler theory | set 2, syntax directed transalation : parsing and syntax directed translation, parsing and syntax directed translation, runtime environments : ., ., intermediate code generation : code generation and optimization, code generation and optimization, video – nptel lectures, video – lectures by ravindrababu ravula, book – basics of compiler design, notes – bivas mitra iitgp, notes – lr parsing, notes – syntax directed translation, notes – intermediate code generation, boolean algebra, combinational and sequential circuits. minimization, number representations and computer arithmetic (fixed and floating point), introduction of boolean algebra and logic gates : logic gates properties of boolean algebra minimization of boolean functions representation of boolean functions canonical and standard form functional completeness k-map implicants in k-map pdnf and pcnf variable entrant map (vem) consensus theorem difference between combinational and sequential circuit, logic gates, properties of boolean algebra, minimization of boolean functions, representation of boolean functions, canonical and standard form, functional completeness, k-map, implicants in k-map, pdnf and pcnf, variable entrant map (vem), consensus theorem, difference between combinational and sequential circuit, combinational circuits : half adder full adder half subtractor full subtractor half adder and half subtractor using nand nor gates encoders and decoders encoder binary decoder combinational circuits using decoder multiplexers carry look-ahead adder parallel adder & parallel subtractor bcd adder magnitude comparator bcd to 7 segment decoder programmable logic array programming array logic read-only memory (rom) static hazards, half adder, full adder, half subtractor, full subtractor, half adder and half subtractor using nand nor gates, encoders and decoders, encoder, binary decoder, combinational circuits using decoder, multiplexers, carry look-ahead adder, parallel adder & parallel subtractor, bcd adder, magnitude comparator, bcd to 7 segment decoder, programmable logic array, programming array logic, read-only memory (rom), static hazards, sequential circuits : introduction of sequential circuits flip-flop types and their conversion synchronous sequential circuits counters ring counter n-bit johnson counter ripple counter design counter for given sequence master slave jk flip flop asynchronous sequential circuits shift registers design 101 sequence detector amortized analysis for increment in counter, introduction of sequential circuits, flip-flop types and their conversion, synchronous sequential circuits, counters, ring counter, n-bit johnson counter, ripple counter, design counter for given sequence, master slave jk flip flop, asynchronous sequential circuits, shift registers, design 101 sequence detector, amortized analysis for increment in counter, number representation and computer airthmetic : number system and base conversions code converters – bcd(8421) to/from excess-3 code converters – binary to/from gray code program for decimal to binary conversion program for binary to decimal conversion program for decimal to octal conversion program for octal to decimal conversion program for hexadecimal to decimal conversion computer arithmetic | set – 1 computer arithmetic | set – 2 floating point representation what’s difference between 1’s complement and 2’s complement? booth’s algorithm restoring division algorithm for unsigned integer non-restoring division for unsigned integer category archives: digital electronics & logic design last minute notes – digital electronics, number system and base conversions, code converters – bcd(8421) to/from excess-3, code converters – binary to/from gray code, program for decimal to binary conversion, program for binary to decimal conversion, program for decimal to octal conversion, program for octal to decimal conversion, program for hexadecimal to decimal conversion, computer arithmetic | set – 1, computer arithmetic | set – 2, floating point representation, what’s difference between 1’s complement and 2’s complement?, booth’s algorithm, restoring division algorithm for unsigned integer, non-restoring division for unsigned integer, category archives: digital electronics & logic design, last minute notes – digital electronics, digital logic (101), number representation, video – nptel lectures, video – lectures by ravindrababu ravula, notes – number system-swarthmore, notes – ieee standard 754 floating point numbers, important topics for gate 2020 computer science, last minute notes – gate 2020, top 5 topics for each section of gate cs syllabus, gate cs 2020 syllabus, gate cs 2020 important official dates, articles on computer science, previous year papers gate cs, solutions and explanations year-wise and topic-wise., gate cs 2018 mock tests, company, about us, careers, in media, contact us, privacy policy, copyright policy, learn, algorithms, data structures, sde cheat sheet, machine learning, cs subjects, video tutorials, news, top news, technology, work & career, business, finance, lifestyle, languages, python, java, cpp, golang, c#, sql, web development, web tutorials, django tutorial, html, css, javascript, bootstrap, contribute, write an article, improve an article, pick topics to write, write interview experience, internships, video internship]