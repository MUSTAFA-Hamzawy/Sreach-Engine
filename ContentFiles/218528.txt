[a co-worker mentioned one day that he was having problems with setting multiple cookies in the same set-cookie http header, but things were fine if they were set with separate headers. he noted that it was not consistent across browsers, and that the specs seem to indicate that you can set multiple cookies with a single set-cookie header; rfc 2109 confirms that., however, that rfc has been superseded by rfc 2965, which specifies that the header set-cookie2 be used rather than set-cookie. if you look at the specs for netscape cookie behavior you’ll see it specifies using set-cookie but only shows one cookie being set per header., i hadn’t seen set-cookie2 in use before, and thought it would be a good topic to investigate. i work quite a bit with apache and took a look at its source; set-cookie2 is referenced in a couple modules, but for the most part apache will just pass cookie headers as-is. modules which explicitly set cookies (such as mod_rewrite) will use netscape-style cookies., this post will not cover the specifics of how to write code to manipulate cookies. there are several good resources explaining these techniques, as well as packages which handle the gory details. the purpose of this post is to explain cookie behavior., this example shows what different browsers do when cookies are set. it is implemented in an iframe to simplify reloading it several times. i realize that it’s cumbersome to constantly scroll between the cookie tester and the text which explains how to use it; one way to make it easier to use is to have this post opened in two windows, one reading the explanation and the other running the tests., when you click on the reload button, the frame will be reloaded with the selected settings. clicking on the http headers also reloads the frame but it causes the script to modify the headers to clear cookies from the browser which match the current settings (such as the path). clicking on the javascript button will not cause a reload, but will force the browser to use javascript to clear all cookies., you will see three sections: what the browser sent to the server, what the server sent back to the browser, and what cookies javascript detected (you may not see anything in this last section if you are using ie 6; this test does not attempt to work correctly with that browser).in the server section, the set-cookie header tests netscape-style cookies and the set-cookie2 header tests rfc 2965-style cookies., the output can be a bit confusing since the sent by browser section reflects the cookies which were set by the previous request. the detected by javascript section, however, should show the cookies previously stored as well as those the browser processed from the sent by server section., note there may be other cookies sent to the test script (such as for google analytics), but cookies not relevant to this example are filtered out., the different options you can choose will be explained below the test, where i discuss how the options influence the results., of the major browsers (latest versions at the time of this writing) only opera supports rfc 2965 cookies. you can see this is the case because the test script sends two different cookies named testcookie: one set by set-cookie and the other set by set-cookie2. following the rfc, opera ignores the set-cookie version; the value of that cookie contains rfc 2965 cookie with opera, but contains netscape on the other browsers., if you uncheck the box so rfc 2965 cookies are not sent back to the browser, opera will send a cookie2 header to indicate which version of cookies it supports., opera can send a mix of netscape and rfc 2965 cookies in the same header, but if any rfc 2965 cookies are being sent, the $version value will be included. to see this behavior in opera:, because of this behavior, you need to be careful if any other application sets cookies which are scoped such that they will also be sent to your application, since they may be set using a different spec. fortunately, the format will probably be close enough, but beware that the two standards have different quoting mechanisms (discussed below). opera will not put quotes around the value of netscape-style cookies, so you can’t assume all the cookies will be properly formatted for rfc 2965., the question which prompted this post was about setting multiple cookies in one set-cookie header. as mentioned above, the netscape specification only indicates that a single cookie can be set. even so, safari will accept a comma-separated list of cookies and set all of them. other browsers will only set the first cookie and ignore the second one., if you select send multiple cookies while leaving separate multiple netscape cookies set to comma and click reload, you’ll see that the detected by javascript section shows testcookie and testcookie2 on separate lines. on all other browsers, these two cookies will appear on the same line, indicating that the whole line is the actual value of the cookie. you can verify this by examining the cookies in each browser’s preferences., if you next change separate multiple netscape cookies to semicolon, all browsers will have the same behavior. each will show only one cookie and the value will be what you’d expect (i.e. not also include the string for the second cookie)., the netscape cookie standards explicitly states that the cookie value is, … a sequence of characters excluding semicolon, comma and white space., you need to use url-style encoding for special characters (e.g. %2c for a comma). you also cannot use quotes around the cookie’s path or around any expiration date., values for rfc 2965 cookies can be either quoted strings or tokens, the latter which is essentially non-special, non-whitespace characters. this means you need to be careful if you’re sending both set-cookie and set-cookie2 headers, since they need to be quoted differently., you may have noticed that in the test for the previous section, browsers other than safari allow a cookie to contain a non-quoted comma, contrary to the netscape specification., both netscape and rfc 2965 cookies allow you to set a path to scope the cookie, as well as setting a domain. if you send the same cookie multiple times but with different paths, the browser will send all of the cookies, and cookies with the narrower scope will appear before others having a broader scope. for example, if you send:, the browser will send back:, if you do not specify the path, netscape cookies will default to the, path of the document that created the cookie property, which seems ambiguous. indeed, the different browsers seem to treat the default differently. to examine the behavior:, after doing this, safari will send the cookie full path with / and no path. this would indicate that safari treats the lack of the path as being the same as the path up to but not including the last /. since the path with the trailing / is more specific, that cookie gets sent before the one without the path., firefox and ie will send the cookie no path followed by full path, indicating that they treat the lack of the path as including the trailing /., opera seems to treat the path the same, whether or not it has a trailing /. you can see this because it will only send the no path cookie. in fact, you should have seen that no more than one cookie is being sent during all steps., rfc 2965 is more explicit about what should happen if a cookie has no path. it says that the default path is the same as the url of the request, up to and including the right-most /., you can test opera’s rfc 2965 cookie behavior by running the same test as above but make sure the rfc 2965 checkbox is selected. as of this writing, the latest version (9.64) seems to not follow the behavior specified by the rfc. instead, it has the same behavior as netscape cookies, treating the paths with and without the trailing / the same., just as with paths, if the same cookie is set with different domains, they will all get sent to the server. both the netscape and rfc 2965 specifications state that the default domain should match the hostname in the request. unlike the path, however, cookies with the same name but different domains have no specified order in which they should be sent. this can be tested with:, you can see that safari will send three cookies, the first one having short domain, the second full domain, and the third no domain. firefox also sends three cookies, but in the order of full domain, short domain, and no domain., opera and ie will assume the lack of a domain is the same as setting the full domain, which is why you only see the cookie without a domain and the one with short domain. both of these browsers also seem to order the cookies from most-specific domain (or with no domain) to least-specific., the netscape specification says that dates used for cookie expiration should use two digits for the year, such as:, safari, firefox, and opera accept two-digit years, but ie requires four digits. fortunately, the other browsers also accept four digits., rfc 2965 gets around that by stating a cookie’s lifetime should be specified with max-age which specifies the number of seconds the cookie should live. a value of zero specifies that a cookie should (but not must) be deleted immediately. opera does remove cookies in this case., posted by fmf @ 5:39pm][frank's musings, setting cookies, cookie testing example, rfc 2965 cookie support, setting multiple cookies in one header, differing quoting mechanisms, same cookie, different paths, default path for netscape cookies, default path for rfc 2965 cookies, same cookie, different domains, cookie date formats, leave a reply cancel reply, category:, some sites i follow, archives:, meta:]setting cookies | frank's musings[sep, may, 2015, 2018, reload, http headers, javascript, sent by browser, detected by javascript, sent by server, javascript, rfc 2965 cookies, reload, reload, rfc 2965 cookies, use path, /, reload, javascript, reload, rfc 2965 cookies, use path, none, reload, send multiple cookies, separate multiple netscape cookies, comma, reload, detected by javascript, separate multiple netscape cookies, semicolon, javascript, rfc 2965 cookies, multiple cookies, use path, full, reload, use path, full with /, reload, use path, none, reload, full path with /, no path, no path, full path, no path, rfc 2965, javascript, send multiple cookies, use domain, full hostname, reload, use domain, .washington.edu, reload, use domain, none, reload][about, trip reports, setting cookies web apps 19.06.2009 a co-worker mentioned one day that he was having problems with setting multiple cookies in the same set-cookie http header, but things were fine if they were set with separate headers. he noted that it was not consistent across browsers, and that the specs seem to indicate that you can set multiple cookies with a single set-cookie header; rfc 2109 confirms that. however, that rfc has been superseded by rfc 2965, which specifies that the header set-cookie2 be used rather than set-cookie. if you look at the specs for netscape cookie behavior you’ll see it specifies using set-cookie but only shows one cookie being set per header. i hadn’t seen set-cookie2 in use before, and thought it would be a good topic to investigate. i work quite a bit with apache and took a look at its source; set-cookie2 is referenced in a couple modules, but for the most part apache will just pass cookie headers as-is. modules which explicitly set cookies (such as mod_rewrite) will use netscape-style cookies. this post will not cover the specifics of how to write code to manipulate cookies. there are several good resources explaining these techniques, as well as packages which handle the gory details. the purpose of this post is to explain cookie behavior. cookie testing example this example shows what different browsers do when cookies are set. it is implemented in an iframe to simplify reloading it several times. i realize that it’s cumbersome to constantly scroll between the cookie tester and the text which explains how to use it; one way to make it easier to use is to have this post opened in two windows, one reading the explanation and the other running the tests. when you click on the reload button, the frame will be reloaded with the selected settings. clicking on the http headers also reloads the frame but it causes the script to modify the headers to clear cookies from the browser which match the current settings (such as the path). clicking on the javascript button will not cause a reload, but will force the browser to use javascript to clear all cookies. you will see three sections: what the browser sent to the server, what the server sent back to the browser, and what cookies javascript detected (you may not see anything in this last section if you are using ie 6; this test does not attempt to work correctly with that browser).in the server section, the set-cookie header tests netscape-style cookies and the set-cookie2 header tests rfc 2965-style cookies. the output can be a bit confusing since the sent by browser section reflects the cookies which were set by the previous request. the detected by javascript section, however, should show the cookies previously stored as well as those the browser processed from the sent by server section. note there may be other cookies sent to the test script (such as for google analytics), but cookies not relevant to this example are filtered out. the different options you can choose will be explained below the test, where i discuss how the options influence the results. send rfc 2965 cookies: send multiple cookies in one header: separate multiple netscape cookies with: comma (,)semicolon (;) use path: none/fullfull with / use domain: none.washington.edufull hostname clear cookies via: rfc 2965 cookie support of the major browsers (latest versions at the time of this writing) only opera supports rfc 2965 cookies. you can see this is the case because the test script sends two different cookies named testcookie: one set by set-cookie and the other set by set-cookie2. following the rfc, opera ignores the set-cookie version; the value of that cookie contains rfc 2965 cookie with opera, but contains netscape on the other browsers. if you uncheck the box so rfc 2965 cookies are not sent back to the browser, opera will send a cookie2 header to indicate which version of cookies it supports. opera can send a mix of netscape and rfc 2965 cookies in the same header, but if any rfc 2965 cookies are being sent, the $version value will be included. to see this behavior in opera: click on javascript to clear all test cookies. make sure rfc 2965 cookies is selected and click reload once. you will see no cookie being sent, but the cookie2 tells the server that rfc 2965 cookies will be accepted. click reload again and you should see a cookie being sent by the browser with a version number, following rfc 2965. deselect rfc 2965 cookies, change use path to /, then click reload twice. you’ll see the non-rfc 2965 cookie is being sent along with the rfc 2965 cookie, and the header has the version string. click on javascript to clear all the test cookies again. click on reload twice and this time you will see the cookie being sent with the cookie2 header to tell the server the browser can handle rfc 2965 cookies. re-select rfc 2965 cookies and change use path to none, then click reload twice. you will see that the cookies will be sent with the version string. because of this behavior, you need to be careful if any other application sets cookies which are scoped such that they will also be sent to your application, since they may be set using a different spec. fortunately, the format will probably be close enough, but beware that the two standards have different quoting mechanisms (discussed below). opera will not put quotes around the value of netscape-style cookies, so you can’t assume all the cookies will be properly formatted for rfc 2965. setting multiple cookies in one header the question which prompted this post was about setting multiple cookies in one set-cookie header. as mentioned above, the netscape specification only indicates that a single cookie can be set. even so, safari will accept a comma-separated list of cookies and set all of them. other browsers will only set the first cookie and ignore the second one. if you select send multiple cookies while leaving separate multiple netscape cookies set to comma and click reload, you’ll see that the detected by javascript section shows testcookie and testcookie2 on separate lines. on all other browsers, these two cookies will appear on the same line, indicating that the whole line is the actual value of the cookie. you can verify this by examining the cookies in each browser’s preferences. if you next change separate multiple netscape cookies to semicolon, all browsers will have the same behavior. each will show only one cookie and the value will be what you’d expect (i.e. not also include the string for the second cookie). differing quoting mechanisms the netscape cookie standards explicitly states that the cookie value is … a sequence of characters excluding semicolon, comma and white space. you need to use url-style encoding for special characters (e.g. %2c for a comma). you also cannot use quotes around the cookie’s path or around any expiration date. values for rfc 2965 cookies can be either quoted strings or tokens, the latter which is essentially non-special, non-whitespace characters. this means you need to be careful if you’re sending both set-cookie and set-cookie2 headers, since they need to be quoted differently. you may have noticed that in the test for the previous section, browsers other than safari allow a cookie to contain a non-quoted comma, contrary to the netscape specification. same cookie, different paths both netscape and rfc 2965 cookies allow you to set a path to scope the cookie, as well as setting a domain. if you send the same cookie multiple times but with different paths, the browser will send all of the cookies, and cookies with the narrower scope will appear before others having a broader scope. for example, if you send: set-cookie: test=value1; path=/a/b
set-cookie: test=value2; path=/a/b/c the browser will send back: cookie: test=value2; test=value1 default path for netscape cookies if you do not specify the path, netscape cookies will default to the path of the document that created the cookie property which seems ambiguous. indeed, the different browsers seem to treat the default differently. to examine the behavior: clear cookies by clicking the javascript button. make sure rfc 2965 cookies and multiple cookies are deselected. set use path to full and click reload. set use path to full with / and click reload again. set use path to none and click reload twice. after doing this, safari will send the cookie full path with / and no path. this would indicate that safari treats the lack of the path as being the same as the path up to but not including the last /. since the path with the trailing / is more specific, that cookie gets sent before the one without the path. firefox and ie will send the cookie no path followed by full path, indicating that they treat the lack of the path as including the trailing /. opera seems to treat the path the same, whether or not it has a trailing /. you can see this because it will only send the no path cookie. in fact, you should have seen that no more than one cookie is being sent during all steps. default path for rfc 2965 cookies rfc 2965 is more explicit about what should happen if a cookie has no path. it says that the default path is the same as the url of the request up to and including the right-most /. you can test opera’s rfc 2965 cookie behavior by running the same test as above but make sure the rfc 2965 checkbox is selected. as of this writing, the latest version (9.64) seems to not follow the behavior specified by the rfc. instead, it has the same behavior as netscape cookies, treating the paths with and without the trailing / the same. same cookie, different domains just as with paths, if the same cookie is set with different domains, they will all get sent to the server. both the netscape and rfc 2965 specifications state that the default domain should match the hostname in the request. unlike the path, however, cookies with the same name but different domains have no specified order in which they should be sent. this can be tested with: clear cookies by clicking javascript. make sure send multiple cookies is not selected. set use domain to full hostname and click reload. set use domain to .washington.edu and click reload. set use domain to none and click reload twice. you can see that safari will send three cookies, the first one having short domain, the second full domain, and the third no domain. firefox also sends three cookies, but in the order of full domain, short domain, and no domain. opera and ie will assume the lack of a domain is the same as setting the full domain, which is why you only see the cookie without a domain and the one with short domain. both of these browsers also seem to order the cookies from most-specific domain (or with no domain) to least-specific. cookie date formats the netscape specification says that dates used for cookie expiration should use two digits for the year, such as: thu, 01-jan-70 00:00:00 gmt safari, firefox, and opera accept two-digit years, but ie requires four digits. fortunately, the other browsers also accept four digits. rfc 2965 gets around that by stating a cookie’s lifetime should be specified with max-age which specifies the number of seconds the cookie should live. a value of zero specifies that a cookie should (but not must) be deleted immediately. opera does remove cookies in this case. posted by fmf @ 5:39pm, send rfc 2965 cookies:, send multiple cookies in one header:, separate multiple netscape cookies with: comma (,)semicolon (;), use path: none/fullfull with /, use domain: none.washington.edufull hostname, clear cookies via:, , click on javascript to clear all test cookies., make sure rfc 2965 cookies is selected and click reload once. you will see no cookie being sent, but the cookie2 tells the server that rfc 2965 cookies will be accepted. click reload again and you should see a cookie being sent by the browser with a version number, following rfc 2965., deselect rfc 2965 cookies, change use path to /, then click reload twice. you’ll see the non-rfc 2965 cookie is being sent along with the rfc 2965 cookie, and the header has the version string., click on javascript to clear all the test cookies again. click on reload twice and this time you will see the cookie being sent with the cookie2 header to tell the server the browser can handle rfc 2965 cookies., re-select rfc 2965 cookies and change use path to none, then click reload twice. you will see that the cookies will be sent with the version string., clear cookies by clicking the javascript button., make sure rfc 2965 cookies and multiple cookies are deselected., set use path to full and click reload., set use path to full with / and click reload again., set use path to none and click reload twice., clear cookies by clicking javascript., make sure send multiple cookies is not selected., set use domain to full hostname and click reload., set use domain to .washington.edu and click reload., set use domain to none and click reload twice., leave a reply cancel reply, category: apache books browsers css debugging infrastructure javascript jquery mac media meta programming web apps, apache, books, browsers, css, debugging, infrastructure, javascript, jquery, mac, media, meta, programming, web apps, a list apart, daring fireball, infinite loop, surfin’ safari, april 2013, july 2011, september 2010, march 2010, february 2010, september 2009, july 2009, june 2009, may 2009, april 2009, march 2009, february 2009, january 2009, december 2008, november 2008, october 2008, september 2008, rss, comments rss, valid xhtml, xfn]