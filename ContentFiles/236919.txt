[suppose we have a list of strings.&& we can concatenate these strings together into a loop.&& where for each string we can choose to reverse it or not. among all of the possible loops.&& we need to find the lexicographically largest string after cutting the loop.&& which will make the looped string into a regular one. specifically.&& to find the lexicographically largest string.&& we need to experience two phases −.&& concatenate all the strings into one loop.&& where we can reverse some strings or not and connect them in the same order as given..&& cut and make one cutting point in any place of the loop.&& which will make the looped string into a regular one starting from the character at the cutting point. and the job is to find the lexicographically largest one among all the possible regular strings..&& so.&& if the input is like abc.&& xyz.&& then the output will be zyxcba as we can get the looped string like -abcxyz-.&& -abczyx-.&& -cbaxyz-.&& -cbazyx-”.&& where - is used to represent the looped status. the answer string came from the fourth looped one.&& where we can cut from the middle character a and get zyxcba..&& to solve this.&& we will follow these steps −.&& define a function solve().&& this will take idx.&& array strs.&& rev.&&.&& temp := strs[idx].&& if rev is non-zero.&& then −.&& reverse the array temp.&& str1 := empty string.&& str2 := empty string.&& for initialize i := 0.&& when i < idx.&& update (increase i by 1).&& do −.&& str1 := str1 + strs[i].&& for initialize i := idx + 1.&& when i < size of strs.&& update (increase i by 1).&& do −.&& str2 := str2 + strs[i].&& for initialize k := 0.&& when k < size of temp.&& update (increase k by 1).&& do −.&& newone := substring of temp from index k to end concatenate str2 concatenate str1 concatenate substring of temp from index (0 to k-1).&& if ret is empty or ret < newone.&& then −.&& ret := newone.&& define a function findmax().&& this will take an array strs.&&.&& for initialize i := 0.&& when i < size of strs.&& update (increase i by 1).&& do −.&& temp := strs[i].&& reverse the array temp.&& strs[i] := (if strs[i] > temp.&& then strs[i].&& otherwise temp).&& from the main method do the following −.&& ret := empty string.&& findmax(strs).&& for initialize i := 0.&& when i < size of strs.&& update (increase i by 1).&& do −.&& solve(i.&& strs.&& false).&& solve(i.&& strs.&& true).&& return ret.&& let us see the following implementation to get better understanding −.&&  live demo.&& .&& we make use of cookies to improve our user experience. by using this website.&& you agree with our cookies policy. agree learn more][split concatenated strings in c++, example, input, output]split concatenated strings in c++[][java jsp ios html android python c programming c++ programming c# php css javascript jquery sap sap hana data structure rdbms mysql mathematics 8085 microprocessor operating system digital electronics analysis of algorithms mobile development front end web development selenium mongodb computer network general topics, java, jsp, ios, html, android, python, c programming, c++ programming, c#, php, css, javascript, jquery, sap, sap hana, data structure, rdbms, mysql, mathematics, 8085 microprocessor, operating system, digital electronics, analysis of algorithms, mobile development, front end, web development, selenium, mongodb, computer network, general topics, library, ebooks, courses, trending categories, data structure, networking, rdbms, operating system, java, ios, html, css, android, python, c programming, c++, c#, mongodb, mysql, javascript, php, selected reading, upsc ias exams notes, developers best practices, questions and answers, effective resume writing, hr interview questions, computer glossary, who is who, define a function solve(), this will take idx, array strs, rev,, temp := strs[idx], if rev is non-zero, then − reverse the array temp, reverse the array temp, str1 := empty string, str2 := empty string, for initialize i := 0, when i < idx, update (increase i by 1), do − str1 := str1 + strs[i], str1 := str1 + strs[i], for initialize i := idx + 1, when i < size of strs, update (increase i by 1), do − str2 := str2 + strs[i], str2 := str2 + strs[i], for initialize k := 0, when k < size of temp, update (increase k by 1), do − newone := substring of temp from index k to end concatenate str2 concatenate str1 concatenate substring of temp from index (0 to k-1) if ret is empty or ret < newone, then − ret := newone, newone := substring of temp from index k to end concatenate str2 concatenate str1 concatenate substring of temp from index (0 to k-1), if ret is empty or ret < newone, then − ret := newone, ret := newone, define a function findmax(), this will take an array strs,, for initialize i := 0, when i < size of strs, update (increase i by 1), do − temp := strs[i] reverse the array temp strs[i] := (if strs[i] > temp, then strs[i], otherwise temp), temp := strs[i], reverse the array temp, strs[i] := (if strs[i] > temp, then strs[i], otherwise temp), from the main method do the following −, ret := empty string, findmax(strs), for initialize i := 0, when i < size of strs, update (increase i by 1), do − solve(i, strs, false) solve(i, strs, true), solve(i, strs, false), solve(i, strs, true), return ret, related questions & answers, concatenated words in c++, split a string in balanced strings in c++, find the uncommon values concatenated from both the strings in java, python – split strings on prefix occurrence, maximum consecutive zeroes in concatenated binary string in c++, write a program in c++ to split two strings to make it a palindrome, how to split strings on multiple delimiters with python?, split list in c++, program to split two strings to make palindrome using python, java program to split into a number of sub-strings, maximum length of a concatenated string with unique characters in c++, how to print concatenated string in python?, concatenated string with uncommon characters in python?, split array largest sum in c++, check if given string can be split into four distinct strings in python, print,  add notes,  bookmark this page,  report error,  suggestions, about us, terms of use, cookies policy, faqs, helping, contact]