[flexibility causes pressure that makes layouts look bad. we can relieve that pressure in isolated ways thanks to css calculations, interpolation, and container awareness, but we lack a means of interconnection that would help maintain balance in compositions., css forces are values that travel from a high-pressure area to other, low-pressure areas to help layouts reach a comfortable equilibrium., , let’s assume that this layout looks good., good-looking designs are hard to make. people have practiced design for centuries, and by practicing we develop our judgment about what looks good. design may not always succeed, or feel appropriate, and we may not always agree about how good something looks, but practitioners share a general sense of overall quality or goodness., , next, let’s assume that this layout has changed in a way that does not look good. maybe it feels like there’s too much empty space. maybe short paragraphs are looking weird. maybe heading sizes seem like they need adjustment. whatever is going on, certain pressures are causing disruption., layouts change for many reasons. as designers of flexible compositions, we need to understand that there is inherent balance in good-looking typography, and that this balance is disrupted by pressure that results from layout changes., pressure is easiest to grasp when we look at text blocks in isolation, as we did in chapter 6 of flexible typesetting:, , relieving pressure gets easier with practice, because we develop schema about available options and we have experiences that inform our judgment about which options to apply in which circumstances. but relieving pressure in isolated text blocks isn’t enough to bring flexible layouts back into balance., to achieve an active balance throughout a composition, we should borrow a concept from fluid dynamics: pressure-gradient forces., , wikipedia:, the pressure-gradient force is the force that results when there is a difference in pressure across a surface [and it] is always directed from the region of higher-pressure to the region of lower-pressure. when a fluid is in an equilibrium state (i.e. there are no net forces, and no acceleration), the system is referred to as being in hydrostatic equilibrium., sounds like a recipe for balanced, fluid layouts! (never mind that in meteorology high-pressure areas feel more comfortable and low-pressure areas mean rain. my point here is that pressure gets distributed to balance a system.), , observing and relieving pressure shouldn’t be an isolated exercise. pressure creates opportunities for forces to distribute relief throughout a layout. practically speaking, this means we need the ability to recognize pressures, apply forces, and prioritize forces., , for example, a flexible line spacing value in one container could influence margins that surround the text block. that change in spaciousness may mean that nearby headings need size or spacing adjustments to stay feeling connected., , or a scaling heading’s font size could influence a root variable that controls a measurement system, thereby affecting other parts of the composition in ways that should trickle into remote property relationships., always with you, it cannot be done. — master yoda, i don’t know how to make this idea real, but i sense the need for it to exist. experiments with css variables in vue, as well as my limited understanding of css module scripts, make me want to believe it is possible. i have wished for things before, and it has worked out well., for flexible design to look as good as humans are capable of making things look, our container-oriented constraint systems need a key counterpart — a content-sensitive relationship system that balances flexible layout by prioritizing and directing forces according to pressure., wed, 4 may 2022, designed by tim brown in codepen. typeset in mallory by tobias frere-jones, with adobe caslon by carol twombly and unibody 8 by underware — all served by adobe fonts., notes: rss  •  thoughts: rss][tim brown, css forces]tim brown: css forces[css forces][]