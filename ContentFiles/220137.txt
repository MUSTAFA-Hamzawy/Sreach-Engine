[web technology reference for developers, structure of content on the web, code used to describe document style, general-purpose scripting language, protocol for transmitting web resources, interfaces for building web applications, web technology reference for developers, learn web development, learn web development, learn to structure web content with html, learn to style content using css, learn to run scripts in the browser, learn to make the web accessible to all, more mdn. your mdn., frequently asked questions about mdn plus, the document property cookie lets you read and write cookies associated with the document. it serves as a getter and setter for the actual values of the cookies., in the code above allcookies is a string containing a semicolon-separated list of all cookies (i.e. key=value pairs). note that each key and value may be surrounded by whitespace (space and tab characters): in fact, rfc 6265 mandates a single space after each semicolon, but some user agents may not abide by this., in the code above, newcookie is a string of form key=value. note that you can only set/update a single cookie at a time using this method. consider also that:, note: prior to gecko 6.0, paths with quotes were treated as if the quotes were part of the string, instead of as if they were delimiters surrounding the actual path string. this has been fixed., note: the domain must match the domain of the javascript origin. setting cookies to foreign domains will be silently ignored., warning: when user privacy is a concern, it's important that any web app implementation invalidate cookie data after a certain timeout instead of relying on the browser to do it. many browsers let users specify that cookies should never expire, which is not necessarily safe., note: the dash is considered part of the prefix., note: these flags are only settable with the secure attribute., note: as you can see from the code above, document.cookie is an accessor property with native setter and getter functions, and consequently is not a data property with a value: what you write is not the same as what you read, everything is always mediated by the javascript interpreter., in order to use the following code, please replace all occurrences of the word dosomethingonlyonce (the name of the cookie) with a custom name., it is important to note that the path attribute does not protect against unauthorized reading of the cookie from a different path. it can be easily bypassed using the dom, for example by creating a hidden <iframe> element with the path of the cookie, then accessing this iframe's contentdocument.cookie property. the only way to protect the cookie is by using a different domain or subdomain, due to the same origin policy., cookies are often used in web applications to identify a user and their authenticated session. stealing a cookie from a web application leads to hijacking the authenticated user's session. common ways to steal cookies include using social engineering or by exploiting a cross-site scripting (xss) vulnerability in the application -, the httponly cookie attribute can help to mitigate this attack by preventing access to cookie value through javascript. read more about cookies and security., the reason for the syntax of the document.cookie accessor property is due to the client-server nature of cookies, which differs from other client-client storage methods (like, for instance, localstorage):, bcd tables only load in the browser, last modified: apr 27, 2022, by mdn contributors, your blueprint for a better internet., visit mozilla corporation’s not-for-profit parent, the mozilla foundation. portions of this content are ©1998–2022 by individual mozilla.org contributors. content available under a creative commons license.][in this article, in this article, document.cookie, syntax, read all cookies accessible from this location, write a new cookie, examples, example #1: simple usage, example #2: get a sample cookie named test2, example #3: do something only once, example #4: reset the previous cookie, example #5: check a cookie existence, example #6: check that a cookie has a specific value, security, notes, specifications, browser compatibility, see also, found a problem with this page?, mdn, support, our communities, developers]document.cookie - web apis | mdn[document object model, document, note:, note:, warning:, note:, note:, note:, no maximum length, arbitrarily large cookies][skip to main content, skip to search, skip to select language, referencesreferences overview / web technology web technology reference for developers html structure of content on the web css code used to describe document style javascript general-purpose scripting language http protocol for transmitting web resources web apis interfaces for building web applications web technology web technology reference for developers, overview / web technology web technology reference for developers, html structure of content on the web, css code used to describe document style, javascript general-purpose scripting language, http protocol for transmitting web resources, web apis interfaces for building web applications, web technology web technology reference for developers, guidesguides overview / mdn learning area learn web development mdn learning area learn web development html learn to structure web content with html css learn to style content using css javascript learn to run scripts in the browser accessibility learn to make the web accessible to all, overview / mdn learning area learn web development, mdn learning area learn web development, html learn to structure web content with html, css learn to style content using css, javascript learn to run scripts in the browser, accessibility learn to make the web accessible to all, mdn plusmdn plus overview more mdn. your mdn. faq frequently asked questions about mdn plus, overview more mdn. your mdn., faq frequently asked questions about mdn plus, already a subscriber?, get mdn plus, references, web apis, document, document.cookie, english (us), syntax, examples, security, notes, specifications, browser compatibility, see also, document object model, document, constructor document(), document(), properties activeelement deprecated alinkcolor deprecated all deprecated anchors deprecated applets deprecated bgcolor body characterset childelementcount children compatmode contenttype currentscript defaultview designmode dir doctype documentelement documenturi deprecated domain embeds deprecated fgcolor firstelementchild forms deprecated fullscreen fullscreenelement fullscreenenabled head deprecated height hidden images implementation lastelementchild lastmodified deprecated laststylesheetset deprecated linkcolor links location non-standard mozsyntheticdocument experimental deprecated origin pictureinpictureelement pictureinpictureenabled plugins pointerlockelement deprecated preferredstylesheetset readystate referrer deprecated rootelement scripts scrollingelement deprecated selectedstylesheetset stylesheets deprecated stylesheetsets experimental timeline title url visibilitystate deprecated vlinkcolor deprecated width deprecated xmlencoding deprecated xmlversion, activeelement, deprecated alinkcolor, deprecated all, deprecated anchors, deprecated applets, deprecated bgcolor, body, characterset, childelementcount, children, compatmode, contenttype, currentscript, defaultview, designmode, dir, doctype, documentelement, documenturi, deprecated domain, embeds, deprecated fgcolor, firstelementchild, forms, deprecated fullscreen, fullscreenelement, fullscreenenabled, head, deprecated height, hidden, images, implementation, lastelementchild, lastmodified, deprecated laststylesheetset, deprecated linkcolor, links, location, non-standard mozsyntheticdocument, experimental deprecated origin, pictureinpictureelement, pictureinpictureenabled, plugins, pointerlockelement, deprecated preferredstylesheetset, readystate, referrer, deprecated rootelement, scripts, scrollingelement, deprecated selectedstylesheetset, stylesheets, deprecated stylesheetsets, experimental timeline, title, url, visibilitystate, deprecated vlinkcolor, deprecated width, deprecated xmlencoding, deprecated xmlversion, methods adoptnode() append() caretpositionfrompoint() non-standard caretrangefrompoint() deprecated clear() close() createattribute() createattributens() createcdatasection() createcomment() createdocumentfragment() createelement() createelementns() deprecated createentityreference() createevent() createexpression() createnodeiterator() creatensresolver() createprocessinginstruction() createrange() createtextnode() deprecated createtouch() deprecated createtouchlist() createtreewalker() elementfrompoint() elementsfrompoint() deprecated enablestylesheetsforset() evaluate() deprecated execcommand() exitfullscreen() exitpictureinpicture() experimental exitpointerlock() getanimations() deprecated getboxobjectfor() getelementbyid() getelementsbyclassname() getelementsbyname() getelementsbytagname() getelementsbytagnamens() getselection() hasfocus() hasstorageaccess() importnode() non-standard mozsetimageelement() open() prepend() deprecated querycommandenabled() deprecated querycommandsupported() queryselector() queryselectorall() deprecated registerelement() releasecapture() replacechildren() requeststorageaccess() write() writeln(), adoptnode(), append(), caretpositionfrompoint(), non-standard caretrangefrompoint(), deprecated clear(), close(), createattribute(), createattributens(), createcdatasection(), createcomment(), createdocumentfragment(), createelement(), createelementns(), deprecated createentityreference(), createevent(), createexpression(), createnodeiterator(), creatensresolver(), createprocessinginstruction(), createrange(), createtextnode(), deprecated createtouch(), deprecated createtouchlist(), createtreewalker(), elementfrompoint(), elementsfrompoint(), deprecated enablestylesheetsforset(), evaluate(), deprecated execcommand(), exitfullscreen(), exitpictureinpicture(), experimental exitpointerlock(), getanimations(), deprecated getboxobjectfor(), getelementbyid(), getelementsbyclassname(), getelementsbyname(), getelementsbytagname(), getelementsbytagnamens(), getselection(), hasfocus(), hasstorageaccess(), importnode(), non-standard mozsetimageelement(), open(), prepend(), deprecated querycommandenabled(), deprecated querycommandsupported(), queryselector(), queryselectorall(), deprecated registerelement(), releasecapture(), replacechildren(), requeststorageaccess(), write(), writeln(), events non-standard afterscriptexecute animationcancel animationend animationiteration animationstart non-standard beforescriptexecute copy cut domcontentloaded drag dragend dragenter dragleave dragover dragstart drop fullscreenchange fullscreenerror gotpointercapture keydown deprecated keypress keyup lostpointercapture paste pointercancel pointerdown pointerenter pointerleave pointerlockchange pointerlockerror pointermove pointerout pointerover pointerup readystatechange scroll selectionchange selectstart touchcancel touchend touchmove touchstart transitioncancel transitionend transitionrun transitionstart visibilitychange wheel, non-standard afterscriptexecute, animationcancel, animationend, animationiteration, animationstart, non-standard beforescriptexecute, copy, cut, domcontentloaded, drag, dragend, dragenter, dragleave, dragover, dragstart, drop, fullscreenchange, fullscreenerror, gotpointercapture, keydown, deprecated keypress, keyup, lostpointercapture, paste, pointercancel, pointerdown, pointerenter, pointerleave, pointerlockchange, pointerlockerror, pointermove, pointerout, pointerover, pointerup, readystatechange, scroll, selectionchange, selectstart, touchcancel, touchend, touchmove, touchstart, transitioncancel, transitionend, transitionrun, transitionstart, visibilitychange, wheel, inheritance: node eventtarget, node, eventtarget, related pages for dom abortcontroller abortsignal abstractrange attr cdatasection characterdata comment customevent domerror domexception domimplementation domparser dompoint dompointreadonly domrect domtimestamp domtokenlist documentfragment documenttype element event eventtarget htmlcollection mutationobserver namednodemap node nodeiterator nodelist processinginstruction range staticrange text textdecoder textencoder timeranges treewalker xmldocument, abortcontroller, abortsignal, abstractrange, attr, cdatasection, characterdata, comment, customevent, domerror, domexception, domimplementation, domparser, dompoint, dompointreadonly, domrect, domtimestamp, domtokenlist, documentfragment, documenttype, element, event, eventtarget, htmlcollection, mutationobserver, namednodemap, node, nodeiterator, nodelist, processinginstruction, range, staticrange, text, textdecoder, textencoder, timeranges, treewalker, xmldocument, syntax, examples, security, notes, specifications, browser compatibility, see also, any of the following cookie attribute values can optionally follow the key-value pair, specifying the cookie to set/update, and preceded by a semi-colon separator: ;path=path (e.g., '/', '/mydir') if not specified, defaults to the current path of the current document location. note: prior to gecko 6.0, paths with quotes were treated as if the quotes were part of the string, instead of as if they were delimiters surrounding the actual path string. this has been fixed. ;domain=domain (e.g., 'example.com' or 'subdomain.example.com'). if not specified, this defaults to the host portion of the current document location. contrary to earlier specifications, leading dots in domain names are ignored, but browsers may decline to set the cookie containing such dots. if a domain is specified, subdomains are always included. note: the domain must match the domain of the javascript origin. setting cookies to foreign domains will be silently ignored. ;max-age=max-age-in-seconds (e.g., 60*60*24*365 or 31536000 for a year) ;expires=date-in-gmtstring-format if neither expires nor max-age specified it will expire at the end of session. warning: when user privacy is a concern, it's important that any web app implementation invalidate cookie data after a certain timeout instead of relying on the browser to do it. many browsers let users specify that cookies should never expire, which is not necessarily safe. see date.toutcstring() for help formatting this value. ;secure cookie to only be transmitted over secure protocol as https. before chrome 52, this flag could appear with cookies from http domains. ;samesite samesite prevents the browser from sending this cookie along with cross-site requests. possible values are lax, strict or none. the lax value will send the cookie for all same-site requests and top-level navigation get requests. this is sufficient for user tracking, but it will prevent many cross-site request forgery (csrf) attacks. this is the default value in modern browsers. the strict value will prevent the cookie from being sent by the browser to the target site in all cross-site browsing contexts, even when following a regular link. the none value explicitly states no restrictions will be applied. the cookie will be sent in all requests—both cross-site and same-site., ;path=path (e.g., '/', '/mydir') if not specified, defaults to the current path of the current document location. note: prior to gecko 6.0, paths with quotes were treated as if the quotes were part of the string, instead of as if they were delimiters surrounding the actual path string. this has been fixed., ;domain=domain (e.g., 'example.com' or 'subdomain.example.com'). if not specified, this defaults to the host portion of the current document location. contrary to earlier specifications, leading dots in domain names are ignored, but browsers may decline to set the cookie containing such dots. if a domain is specified, subdomains are always included. note: the domain must match the domain of the javascript origin. setting cookies to foreign domains will be silently ignored., ;max-age=max-age-in-seconds (e.g., 60*60*24*365 or 31536000 for a year), ;expires=date-in-gmtstring-format if neither expires nor max-age specified it will expire at the end of session. warning: when user privacy is a concern, it's important that any web app implementation invalidate cookie data after a certain timeout instead of relying on the browser to do it. many browsers let users specify that cookies should never expire, which is not necessarily safe. see date.toutcstring() for help formatting this value., see date.toutcstring() for help formatting this value., ;secure cookie to only be transmitted over secure protocol as https. before chrome 52, this flag could appear with cookies from http domains., ;samesite samesite prevents the browser from sending this cookie along with cross-site requests. possible values are lax, strict or none. the lax value will send the cookie for all same-site requests and top-level navigation get requests. this is sufficient for user tracking, but it will prevent many cross-site request forgery (csrf) attacks. this is the default value in modern browsers. the strict value will prevent the cookie from being sent by the browser to the target site in all cross-site browsing contexts, even when following a regular link. the none value explicitly states no restrictions will be applied. the cookie will be sent in all requests—both cross-site and same-site., the lax value will send the cookie for all same-site requests and top-level navigation get requests. this is sufficient for user tracking, but it will prevent many cross-site request forgery (csrf) attacks. this is the default value in modern browsers., the strict value will prevent the cookie from being sent by the browser to the target site in all cross-site browsing contexts, even when following a regular link., the none value explicitly states no restrictions will be applied. the cookie will be sent in all requests—both cross-site and same-site., the cookie value string can use encodeuricomponent() to ensure that the string does not contain any commas, semicolons, or whitespace (which are disallowed in cookie values)., some user agent implementations support the following cookie prefixes: __secure- signals to the browser that it should only include the cookie in requests transmitted over a secure channel. __host- signals to the browser that in addition to the restriction to only use the cookie from a secure origin, the scope of the cookie is limited to a path attribute passed down by the server. if the server omits the path attribute the "directory" of the request uri is used. it also signals that the domain attribute must not be present, which prevents the cookie from being sent to other domains. for chrome the path attribute must always be the origin. note: the dash is considered part of the prefix. note: these flags are only settable with the secure attribute., __secure- signals to the browser that it should only include the cookie in requests transmitted over a secure channel., __host- signals to the browser that in addition to the restriction to only use the cookie from a secure origin, the scope of the cookie is limited to a path attribute passed down by the server. if the server omits the path attribute the "directory" of the request uri is used. it also signals that the domain attribute must not be present, which prevents the cookie from being sent to other domains. for chrome the path attribute must always be the origin., starting with firefox 2, a better mechanism for client-side storage is available - whatwg dom storage., you can delete a cookie by updating its expiration time to zero., keep in mind that the more cookies you have, the more data will be transferred between the server and the client for each request. this will make each request slower. it is highly recommended for you to use whatwg dom storage if you are going to keep "client-only" data., rfc 2965 (section 5.3, "implementation limits") specifies that there should be no maximum length of a cookie's key or value size, and encourages implementations to support arbitrarily large cookies. each browser's implementation maximum will necessarily be different, so consult individual browser documentation., http cookies, dom storage, url.pathname, date.toutcstring(), rfc 2965, edit on github, source on github, report a problem with this content on github, want to fix the problem yourself? see our contribution guide., mdn on twitter, mdn on github, about, hacks blog, careers, product help, report a page issue, report a site issue, mdn community, mdn forum, mdn chat, web technologies, learn web development, mdn plus, website privacy notice, cookies, legal, community participation guidelines]