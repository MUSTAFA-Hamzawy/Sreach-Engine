[, this page contains ugc net computer science preparation notes / tutorials on algorithms, programming and data structures, operating systems, database management systems (dbms), computer networks, computer organization and architecture, theory of computation, compiler design, digital logic, software engineering, machine learning, and artificial intelligence and fuzzy logic listed according to paper-iii (core group) of the ugc net cs syllabus., data structures and algorithms :, oops and scripting languages :, operating systems :, database management systems :, computer organization and microprocessor :, computer organization and microprocessor :, data transmission and computer networks :, data transmission and computer networks :, software engineering :, software engineering :, computer graphics :, computer graphics :, artificial intelligence :, artificial intelligence :, artificial intelligence :, please write comments if you find anything incorrect, or you want to share more information about the topic discussed above!][ugc net cs notes according to syllabus of paper-iii (core group), other useful links :, , start your coding journey now!]ugc net cs notes according to syllabus of paper-iii (core group) - geeksforgeeks[according to paper-iii (core group) of the ugc net cs syllabus.][courses for working professionals live dsa live classes system design java backend development full stack live explore more self-paced dsa- self paced sde theory must-do coding questions explore more for students live competitive programming data structures with c++ data science explore more self-paced dsa- self paced cip java / python / c++ explore more school courses school guide python programming learn to make apps explore more all courses, for working professionals live dsa live classes system design java backend development full stack live explore more self-paced dsa- self paced sde theory must-do coding questions explore more, live dsa live classes system design java backend development full stack live explore more, dsa live classes, system design, java backend development, full stack live, explore more, self-paced dsa- self paced sde theory must-do coding questions explore more, dsa- self paced, sde theory, must-do coding questions, explore more, for students live competitive programming data structures with c++ data science explore more self-paced dsa- self paced cip java / python / c++ explore more, live competitive programming data structures with c++ data science explore more, competitive programming, data structures with c++, data science, explore more, self-paced dsa- self paced cip java / python / c++ explore more, dsa- self paced, cip, java / python / c++, explore more, school courses school guide python programming learn to make apps explore more, school guide, python programming, learn to make apps, explore more, all courses, tutorials practice ds & algo. must do questions dsa topic-wise dsa company-wise algorithms analysis of algorithms asymptotic analysis worst, average and best cases asymptotic notations little o and little omega notations lower and upper bound theory analysis of loops solving recurrences amortized analysis what does 'space complexity' mean ? pseudo-polynomial algorithms polynomial time approximation scheme a time complexity question searching algorithms sorting algorithms graph algorithms pattern searching geometric algorithms mathematical bitwise algorithms randomized algorithms greedy algorithms dynamic programming divide and conquer backtracking branch and bound all algorithms data structures arrays linked list stack queue binary tree binary search tree heap hashing graph advanced data structure matrix strings all data structures interview corner company preparation top topics practice company questions interview experiences experienced interviews internship interviews competititve programming design patterns system design tutorial multiple choice quizzes languages c c++ java python c# javascript jquery sql php scala perl go language html css kotlin ml & data science machine learning data science cs subjects mathematics operating system dbms computer networks computer organization and architecture theory of computation compiler design digital logic software engineering gate gate computer science notes last minute notes gate cs solved papers gate cs original papers and official keys gate 2021 dates gate cs 2021 syllabus important topics for gate cs web technologies html css javascript angularjs reactjs nodejs bootstrap jquery php software designs software design patterns system design tutorial school learning school programming mathematics number system algebra trigonometry statistics probability geometry mensuration calculus maths notes (class 8-12) class 8 notes class 9 notes class 10 notes class 11 notes class 12 notes ncert solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution rd sharma solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution physics notes (class 8-11) class 8 notes class 9 notes class 10 notes class 11 notes cs exams/psus isro isro cs original papers and official keys isro cs solved papers isro cs syllabus for scientist/engineer exam ugc net ugc net cs notes paper ii ugc net cs notes paper iii ugc net cs solved papers student campus ambassador program school ambassador program project geek of the month campus geek of the month placement course competititve programming testimonials student chapter geek on the top internship careers, practice ds & algo. must do questions dsa topic-wise dsa company-wise, must do questions, dsa topic-wise, dsa company-wise, algorithms analysis of algorithms asymptotic analysis worst, average and best cases asymptotic notations little o and little omega notations lower and upper bound theory analysis of loops solving recurrences amortized analysis what does 'space complexity' mean ? pseudo-polynomial algorithms polynomial time approximation scheme a time complexity question searching algorithms sorting algorithms graph algorithms pattern searching geometric algorithms mathematical bitwise algorithms randomized algorithms greedy algorithms dynamic programming divide and conquer backtracking branch and bound all algorithms, analysis of algorithms asymptotic analysis worst, average and best cases asymptotic notations little o and little omega notations lower and upper bound theory analysis of loops solving recurrences amortized analysis what does 'space complexity' mean ? pseudo-polynomial algorithms polynomial time approximation scheme a time complexity question, asymptotic analysis, worst, average and best cases, asymptotic notations, little o and little omega notations, lower and upper bound theory, analysis of loops, solving recurrences, amortized analysis, what does 'space complexity' mean ?, pseudo-polynomial algorithms, polynomial time approximation scheme, a time complexity question, searching algorithms, sorting algorithms, graph algorithms, pattern searching, geometric algorithms, mathematical, bitwise algorithms, randomized algorithms, greedy algorithms, dynamic programming, divide and conquer, backtracking, branch and bound, all algorithms, data structures arrays linked list stack queue binary tree binary search tree heap hashing graph advanced data structure matrix strings all data structures, arrays, linked list, stack, queue, binary tree, binary search tree, heap, hashing, graph, advanced data structure, matrix, strings, all data structures, interview corner company preparation top topics practice company questions interview experiences experienced interviews internship interviews competititve programming design patterns system design tutorial multiple choice quizzes, company preparation, top topics, practice company questions, interview experiences, experienced interviews, internship interviews, competititve programming, design patterns, system design tutorial, multiple choice quizzes, languages c c++ java python c# javascript jquery sql php scala perl go language html css kotlin, c, c++, java, python, c#, javascript, jquery, sql, php, scala, perl, go language, html, css, kotlin, ml & data science machine learning data science, machine learning, data science, cs subjects mathematics operating system dbms computer networks computer organization and architecture theory of computation compiler design digital logic software engineering, mathematics, operating system, dbms, computer networks, computer organization and architecture, theory of computation, compiler design, digital logic, software engineering, gate gate computer science notes last minute notes gate cs solved papers gate cs original papers and official keys gate 2021 dates gate cs 2021 syllabus important topics for gate cs, gate computer science notes, last minute notes, gate cs solved papers, gate cs original papers and official keys, gate 2021 dates, gate cs 2021 syllabus, important topics for gate cs, web technologies html css javascript angularjs reactjs nodejs bootstrap jquery php, html, css, javascript, angularjs, reactjs, nodejs, bootstrap, jquery, php, software designs software design patterns system design tutorial, software design patterns, system design tutorial, school learning school programming mathematics number system algebra trigonometry statistics probability geometry mensuration calculus maths notes (class 8-12) class 8 notes class 9 notes class 10 notes class 11 notes class 12 notes ncert solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution rd sharma solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution physics notes (class 8-11) class 8 notes class 9 notes class 10 notes class 11 notes, school programming, mathematics number system algebra trigonometry statistics probability geometry mensuration calculus, number system, algebra, trigonometry, statistics, probability, geometry, mensuration, calculus, maths notes (class 8-12) class 8 notes class 9 notes class 10 notes class 11 notes class 12 notes, class 8 notes, class 9 notes, class 10 notes, class 11 notes, class 12 notes, ncert solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution, class 8 maths solution, class 9 maths solution, class 10 maths solution, class 11 maths solution, class 12 maths solution, rd sharma solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution, class 8 maths solution, class 9 maths solution, class 10 maths solution, class 11 maths solution, class 12 maths solution, physics notes (class 8-11) class 8 notes class 9 notes class 10 notes class 11 notes, class 8 notes, class 9 notes, class 10 notes, class 11 notes, cs exams/psus isro isro cs original papers and official keys isro cs solved papers isro cs syllabus for scientist/engineer exam ugc net ugc net cs notes paper ii ugc net cs notes paper iii ugc net cs solved papers, isro isro cs original papers and official keys isro cs solved papers isro cs syllabus for scientist/engineer exam, isro cs original papers and official keys, isro cs solved papers, isro cs syllabus for scientist/engineer exam, ugc net ugc net cs notes paper ii ugc net cs notes paper iii ugc net cs solved papers, ugc net cs notes paper ii, ugc net cs notes paper iii, ugc net cs solved papers, student campus ambassador program school ambassador program project geek of the month campus geek of the month placement course competititve programming testimonials student chapter geek on the top internship careers, campus ambassador program, school ambassador program, project, geek of the month, campus geek of the month, placement course, competititve programming, testimonials, student chapter, geek on the top, internship, careers, jobs apply for jobs post a job job-a-thon, apply for jobs, post a job, job-a-thon, events, , write come write articles for us and get featured practice learn and code with the best industry experts premium get access to ad-free content, doubt assistance and more! jobs come and find your dream job with us geeks digest quizzes geeks campus gblog articles ide campus mantri, geeks digest, quizzes, geeks campus, gblog articles, ide, campus mantri, , , home, saved videos, courses, , gblog, puzzles, what's new ?, data structures, algorithms, interview preparation, topic-wise practice, c++, java, python, competitive programming, machine learning, html, sde sheet, puzzles, gfg school, projects, last updated : 25 nov, 2021, definition, simple and composite structures, arrays, lists, stacks queues, priority queues. binary trees, b – trees, graphs., sorting and searching algorithms, analysis of algorithms, interpolation and binary search, asymptotic notations-big ohm, omega and theta. average case analysis of simple programs like finding of a maximum of n elements. recursion and its systematic removal. quicksort – non – recursive implementation with minimal stack storage., design of algorithms (divide and conquer, greedy method, dynamic programming, back tracking, branch and bound)., lower bound theory, non – deterministic algorithm, non – deterministic programming constructs. simple non-deterministic programs. np – hard and np – complete problems., data structures : array stack queue linked list binary tree binary search tree heap tree graph data structure, array, stack, queue, linked list, binary tree, binary search tree, heap tree, graph data structure, asymptotic analysis of algorithms : analysis of algorithms | set 1 (asymptotic analysis) analysis of algorithms | set 2 (worst, average and best cases) analysis of algorithms | set 3 (asymptotic notations) analysis of algorithms | set 4 (analysis of loops) analysis of algorithm | set 5 (amortized analysis introduction) analysis of algorithms | little o and little omega notations what does ‘space complexity’ mean? articles | analysis of algorithms, analysis of algorithms | set 1 (asymptotic analysis), analysis of algorithms | set 2 (worst, average and best cases), analysis of algorithms | set 3 (asymptotic notations), analysis of algorithms | set 4 (analysis of loops), analysis of algorithm | set 5 (amortized analysis introduction), analysis of algorithms | little o and little omega notations, what does ‘space complexity’ mean?, articles | analysis of algorithms, recurrence relations : analysis of algorithm | set 4 (solving recurrences), analysis of algorithm | set 4 (solving recurrences), divide and conquer : divide and conquer | set 1 (introduction) binary search why is binary search preferred over ternary search? merge sort merge sort for linked lists merge sort for doubly linked list how to make mergesort to perform o(n) comparisons in best case? quicksort iterative quick sort quicksort on singly linked list quicksort on doubly linked list when does the worst case of quicksort occur? why quick sort preferred for arrays and merge sort for linked lists? write a program to calculate pow(x,n) median of two sorted arrays of same size count inversions in an array | set 1 (using merge sort) divide and conquer | set 2 (closest pair of points) divide and conquer | set 5 (strassen’s matrix multiplication) sort a nearly sorted (or k sorted) array search in an almost sorted array k-th element of two sorted arrays k’th smallest/largest element in unsorted array | set 2 (expected linear time) searching and sorting, divide and conquer | set 1 (introduction), binary search, why is binary search preferred over ternary search?, merge sort, merge sort for linked lists, merge sort for doubly linked list, how to make mergesort to perform o(n) comparisons in best case?, quicksort, iterative quick sort, quicksort on singly linked list, quicksort on doubly linked list, when does the worst case of quicksort occur?, why quick sort preferred for arrays and merge sort for linked lists?, write a program to calculate pow(x,n), median of two sorted arrays of same size, count inversions in an array | set 1 (using merge sort), divide and conquer | set 2 (closest pair of points), divide and conquer | set 5 (strassen’s matrix multiplication), sort a nearly sorted (or k sorted) array, search in an almost sorted array, k-th element of two sorted arrays, k’th smallest/largest element in unsorted array | set 2 (expected linear time), searching and sorting, greedy techniques : greedy algorithms | set 1 (activity selection problem) job sequencing problem | set 1 (greedy algorithm) greedy algorithms | set 3 (huffman coding) greedy algorithms | set 4 (efficient huffman coding for sorted input) greedy algorithms | set 2 (kruskal’s minimum spanning tree algorithm) greedy algorithms | set 5 (prim’s minimum spanning tree (mst)) greedy algorithms | set 6 (prim’s mst for adjacency list representation) applications of minimum spanning tree problem greedy algorithms | set 7 (dijkstra’s shortest path algorithm) greedy algorithms | set 8 (dijkstra’s algorithm for adjacency list representation) greedy algorithm to find minimum number of coins strongly connected components greedy algorithms, greedy algorithms | set 1 (activity selection problem), job sequencing problem | set 1 (greedy algorithm), greedy algorithms | set 3 (huffman coding), greedy algorithms | set 4 (efficient huffman coding for sorted input), greedy algorithms | set 2 (kruskal’s minimum spanning tree algorithm), greedy algorithms | set 5 (prim’s minimum spanning tree (mst)), greedy algorithms | set 6 (prim’s mst for adjacency list representation), applications of minimum spanning tree problem, greedy algorithms | set 7 (dijkstra’s shortest path algorithm), greedy algorithms | set 8 (dijkstra’s algorithm for adjacency list representation), greedy algorithm to find minimum number of coins, strongly connected components, greedy algorithms, graph based algorithms : graph and its representations breadth first search or bfs for a graph depth first search or dfs for a graph applications of depth first search detect cycle in a directed graph disjoint set (or union-find) | set 1 (detect cycle in an undirected graph) detect cycle in an undirected graph topological sorting longest path in a directed acyclic graph dynamic programming | set 23 (bellman–ford algorithm) dynamic programming | set 16 (floyd warshall algorithm) shortest path in directed acyclic graph some interesting shortest path questions | set 1 shortest path with exactly k edges in a directed and weighted graph biconnected components biconnected graph articulation points (or cut vertices) in a graph check if a graph is strongly connected | set 1 (kosaraju using dfs) bridges in a graph transitive closure of a graph graph algorithms, graph and its representations, breadth first search or bfs for a graph, depth first search or dfs for a graph, applications of depth first search, detect cycle in a directed graph, disjoint set (or union-find) | set 1 (detect cycle in an undirected graph), detect cycle in an undirected graph, topological sorting, longest path in a directed acyclic graph, dynamic programming | set 23 (bellman–ford algorithm), dynamic programming | set 16 (floyd warshall algorithm), shortest path in directed acyclic graph, some interesting shortest path questions | set 1, shortest path with exactly k edges in a directed and weighted graph, biconnected components, biconnected graph, articulation points (or cut vertices) in a graph, check if a graph is strongly connected | set 1 (kosaraju using dfs), bridges in a graph, transitive closure of a graph, graph algorithms, dynamic programming : dynamic programming | set 1 (overlapping subproblems property) dynamic programming | set 2 (optimal substructure property) dynamic programming | set 4 (longest common subsequence) dynamic programming | set 8 (matrix chain multiplication) dynamic programming | set 10 ( 0-1 knapsack problem) dynamic programming | set 6 (min cost path) dynamic programming | set 25 (subset sum problem) dynamic programming | set 23 (bellman–ford algorithm) dynamic programming | set 16 (floyd warshall algorithm) total number of non-decreasing numbers with n digits vertex cover problem | set 2 (dynamic programming solution for tree) smallest power of 2 greater than or equal to n travelling salesman problem | set 1 (naive and dynamic programming) travelling salesman problem | set 2 (approximate using mst) dynamic programming, dynamic programming | set 1 (overlapping subproblems property), dynamic programming | set 2 (optimal substructure property), dynamic programming | set 4 (longest common subsequence), dynamic programming | set 8 (matrix chain multiplication), dynamic programming | set 10 ( 0-1 knapsack problem), dynamic programming | set 6 (min cost path), dynamic programming | set 25 (subset sum problem), dynamic programming | set 23 (bellman–ford algorithm), dynamic programming | set 16 (floyd warshall algorithm), total number of non-decreasing numbers with n digits, vertex cover problem | set 2 (dynamic programming solution for tree), smallest power of 2 greater than or equal to n, travelling salesman problem | set 1 (naive and dynamic programming), travelling salesman problem | set 2 (approximate using mst), dynamic programming, back tracking : backtracking | introduction backtracking | set 1 (the knight’s tour problem) backtracking | set 2 (rat in a maze) backtracking | set 3 (n queen problem) backtracking | set 4 (subset sum) backtracking | set 5 (m coloring problem) backtracking | set 6 (hamiltonian cycle) backtracking | set 7 (sudoku) backtracking | set 8 (solving cryptarithmetic puzzles) backtracking | set 9 (magnet puzzle) partition of a set into k subsets with equal sum write a program to print all permutations of a given string tug of war word break problem using backtracking print all palindromic partitions of a string top 20 backtracking algorithm interview questions, backtracking | introduction, backtracking | set 1 (the knight’s tour problem), backtracking | set 2 (rat in a maze), backtracking | set 3 (n queen problem), backtracking | set 4 (subset sum), backtracking | set 5 (m coloring problem), backtracking | set 6 (hamiltonian cycle), backtracking | set 7 (sudoku), backtracking | set 8 (solving cryptarithmetic puzzles), backtracking | set 9 (magnet puzzle), partition of a set into k subsets with equal sum, write a program to print all permutations of a given string, tug of war, word break problem using backtracking, print all palindromic partitions of a string, top 20 backtracking algorithm interview questions, branch and bound : branch and bound | set 1 (introduction with 0/1 knapsack) branch and bound | set 2 (implementation of 0/1 knapsack) branch and bound | set 3 (8 puzzle problem) branch and bound | set 4 (job assignment problem) branch and bound | set 5 (n queen problem) branch and bound | set 6 (traveling salesman problem), branch and bound | set 1 (introduction with 0/1 knapsack), branch and bound | set 2 (implementation of 0/1 knapsack), branch and bound | set 3 (8 puzzle problem), branch and bound | set 4 (job assignment problem), branch and bound | set 5 (n queen problem), branch and bound | set 6 (traveling salesman problem), searching and sorting : linear search linear search vs binary search selection sort bubble sort insertion sort heap sort radix sort counting sort, linear search, linear search vs binary search, selection sort, bubble sort, insertion sort, heap sort, radix sort, counting sort, non-deterministic algorithms, npc and nph : np-completeness | set 1 (introduction) proof that hamiltonian path is np-complete, np-completeness | set 1 (introduction), proof that hamiltonian path is np-complete, data structures : array stack queue linked list binary trees binary search trees balanced binary search trees heap tree traversals, array, stack, queue, linked list, binary trees, binary search trees, balanced binary search trees, heap, tree traversals, asymptotic analysis of algorithms : analysis of algorithms, analysis of algorithms, recurrence relations : analysis of algorithms (recurrences), analysis of algorithms (recurrences), divide and conquer : divide and conquer mergesort, divide and conquer, mergesort, greedy techniques : greedy algorithms graph shortest paths graph minimum spanning tree, greedy algorithms, graph shortest paths, graph minimum spanning tree, graph based algorithms : graph graph traversals, graph, graph traversals, dynamic programming : dynamic programming, dynamic programming, , back tracking : backtracking, backtracking, branch and bound :, , searching and sorting : searching sorting, searching, sorting, non-deterministic algorithms, npc and nph : np complete, np complete, video – nptel lectures: data structure, video – geeksforgeeks videos, video – lectures by ravindrababu ravula, mit – introduction to algorithms, book – clrs solutions manual, visual – data structures and algorithms., notes – big – o notation, notes – master theorem, notes – extended master theorem, notes – master theorem problems and answers, object oriented programming and design : object, messages, classes, encapsulation, inheritance, polymorphism, aggregation, abstract classes, generalization as extension and restriction. object oriented design. multiple inheritance, metadata., object, messages, classes, encapsulation, inheritance, polymorphism, aggregation, abstract classes, generalization as extension and restriction., object oriented design. multiple inheritance, metadata., markup languages : html, dhtml, xml scripting, java, servelets, applets., html, dhtml, xml, scripting, java, servelets, applets., object oriented programming and design : basic concepts of object oriented programming using c++ why c++ is partially object oriented language? why java is not a purely object-oriented language? introduction to object oriented programming in javascript commonly asked oop interview questions | set 1 object oriented programming | set 1 object oriented programming (oop), basic concepts of object oriented programming using c++, why c++ is partially object oriented language?, why java is not a purely object-oriented language?, introduction to object oriented programming in javascript, commonly asked oop interview questions | set 1, object oriented programming | set 1, object oriented programming (oop), markup languages : html | basics html | attributes html | subscript and superscript tags html | paragraph html | text formatting html | quotations html | style tag html | tables html | svg-basics html | responsive modal login form html | class attribute html | lists html | canvas basics html | iframes html | responsive full page image using css html | comments html | links html5 | video html | images html5 | audio html | adding youtube videos html | heading html | design form html | paragraph html | style attribute html | doctypes html | color styles and hsl html | object tag tag archives: html xml | basics displaying xml using css displaying xml using xslt difference between scripting and programming languages java programming language introduction to java servlets servlet collaboration difference between servlet and jsp java applet basics draw a ellipse and a rectangle in java applet, html | basics, html | attributes, html | subscript and superscript tags, html | paragraph, html | text formatting, html | quotations, html | style tag, html | tables, html | svg-basics, html | responsive modal login form, html | class attribute, html | lists, html | canvas basics, html | iframes, html | responsive full page image using css, html | comments, html | links, html5 | video, html | images, html5 | audio, html | adding youtube videos, html | heading, html | design form, html | paragraph, html | style attribute, html | doctypes, html | color styles and hsl, html | object tag, tag archives: html, xml | basics, displaying xml using css, displaying xml using xslt, difference between scripting and programming languages, java programming language, introduction to java servlets, servlet collaboration, difference between servlet and jsp, java applet basics, draw a ellipse and a rectangle in java applet, object oriented programming and design : oop concepts class and object, oop concepts, class and object, markup languages : html and xml quizzes on java language java multiple choice questions, html and xml, quizzes on java language, java multiple choice questions, , programming languages concepts : programming language concepts, paradigms and models. data: data types, operators, expressions, assignment. flow of control. control structures, i / o statements, user – defined and built – in functions, parameter passing. principles, classes, inheritance, class hierarchies, polymorphism, dynamic binding, reference semantics and their implementation. principles, functions, lists, types and polymorphisms, higher order functions, lazy evaluation, equations and pattern matching. principles, horn clauses and their execution, logical variables, relations, data structures, controlling the search order, program development in prolog, implementation of prolog, example programs in prolog. principles of parallelism, coroutines, communication and execution. parallel virtual machine (pvm) and message passing interface (mpi) routines and calls. parallel programs in pvm paradigm as well as mpi paradigm for simple problems like matrix multiplication. preconditions, post-conditions, axiomatic approach for semantics, correctness, denotational semantics., programming language concepts, paradigms and models., data: data types, operators, expressions, assignment. flow of control., control structures, i / o statements, user – defined and built – in functions, parameter passing., principles, classes, inheritance, class hierarchies, polymorphism, dynamic binding, reference semantics and their implementation., principles, functions, lists, types and polymorphisms, higher order functions, lazy evaluation, equations and pattern matching., principles, horn clauses and their execution, logical variables, relations, data structures, controlling the search order, program development in prolog, implementation of prolog, example programs in prolog., principles of parallelism, coroutines, communication and execution., parallel virtual machine (pvm) and message passing interface (mpi) routines and calls., parallel programs in pvm paradigm as well as mpi paradigm for simple problems like matrix multiplication., preconditions, post-conditions, axiomatic approach for semantics, correctness, denotational semantics., theory of computation : finite automata, pushdown automata. non-determinism and nfa, dpda, and pdas and languages accepted by these structures. grammars, languages – types of grammars – type 0, type 1, type 2, and type 3. the relationship between types of grammars, and finite machines. pushdown automata and context free grammars. lexical analysis-regular expressions and regular languages. lex package on unix. conversion of nfa to dfa. minimizing the number of states in a dfa compilation and interpretation., finite automata, pushdown automata. non-determinism and nfa, dpda, and pdas and languages accepted by these structures., grammars, languages – types of grammars – type 0, type 1, type 2, and type 3., the relationship between types of grammars, and finite machines. pushdown automata and context free grammars., lexical analysis-regular expressions and regular languages., lex package on unix. conversion of nfa to dfa. minimizing the number of states in a dfa compilation and interpretation., compiler design : compiler structure, compiler construction tools, compilation phases, bootstrap compilers. context free grammars. parsing and parse trees. representation of parse (derivation) trees as rightmost and leftmost derivations. bottom up parsers-shift-reduce, operator precedence, and lr. yacc package on unix system. top down parsers-left recursion and its removal. recursive descent parser. predictive parser intermediate codes – quadruples, triples. intermediate code generation, code generation. code optimization., compiler structure, compiler construction tools, compilation phases, bootstrap compilers., context free grammars. parsing and parse trees., representation of parse (derivation) trees as rightmost and leftmost derivations., bottom up parsers-shift-reduce, operator precedence, and lr., yacc package on unix system. top down parsers-left recursion and its removal. recursive descent parser. predictive parser, intermediate codes – quadruples, triples. intermediate code generation, code generation. code optimization., programming languages concepts :, , theory of computation : introduction of theory of computation finite automata introduction chomsky hierarchy regular expressions, regular grammar and regular languages pumping lemma designing finite automata from regular expression nfa with epsilon move to dfa conversion conversion from nfa to dfa minimization of dfa regular expression from finite automata union & intersection of regular languages with cfl mealy and moore machines dfa of a string with at least two 0’s and at least two 1’s star height of regular expression/language pushdown automata pushdown automata acceptance by final state construct pushdown automata for given languages construct pushdown automata for all length palindrome closure properties of context free languages ambiguity in context free grammar and context free languages simplifying context free grammars converting context free grammar to chomsky normal form converting context free grammar to greibach normal form relationship between grammar and language, introduction of theory of computation, finite automata introduction, chomsky hierarchy, regular expressions, regular grammar and regular languages, pumping lemma, designing finite automata from regular expression, nfa with epsilon move to dfa conversion, conversion from nfa to dfa, minimization of dfa, regular expression from finite automata, union & intersection of regular languages with cfl, mealy and moore machines, dfa of a string with at least two 0’s and at least two 1’s, star height of regular expression/language, pushdown automata, pushdown automata acceptance by final state, construct pushdown automata for given languages, construct pushdown automata for all length palindrome, closure properties of context free languages, ambiguity in context free grammar and context free languages, simplifying context free grammars, converting context free grammar to chomsky normal form, converting context free grammar to greibach normal form, relationship between grammar and language, compiler design : compiler vs interpreter introduction of compiler design phases of a compiler symbol table in compiler error handling in compiler design error detection and recovery in compiler lexical analysis c program to detect tokens in a c program flex (fast lexical analyzer generator) classification of context free grammars ambiguous grammar why first and follow? first set in syntax analysis follow set in syntax analysis first and follow sets of given grammar introduction to syntax analysis parsing | set 1 parsing | set 2 parsing | set 3 shift reduce parser in compiler classification of top down parsers operator grammar and precedence parser syntax directed translation runtime environments intermediate code generation three address code in compiler code optimization introduction of object code data flow analysis in compiler, compiler vs interpreter, introduction of compiler design, phases of a compiler, symbol table in compiler, error handling in compiler design, error detection and recovery in compiler, lexical analysis, c program to detect tokens in a c program, flex (fast lexical analyzer generator), classification of context free grammars, ambiguous grammar, why first and follow?, first set in syntax analysis, follow set in syntax analysis, first and follow sets of given grammar, introduction to syntax analysis, parsing | set 1, parsing | set 2, parsing | set 3, shift reduce parser in compiler, classification of top down parsers, operator grammar and precedence parser, syntax directed translation, runtime environments, intermediate code generation, three address code in compiler, code optimization, introduction of object code, data flow analysis in compiler, programming languages concepts :, , theory of computation : regular languages and finite automata practice problems on finite automata practice problems on finite automata | set 2 context free languages and push-down automata automata theory | set 1 automata theory | set 2 automata theory | set 3 automata theory | set 4 automata theory | set 5 automata theory | set 6, regular languages and finite automata, practice problems on finite automata, practice problems on finite automata | set 2, context free languages and push-down automata, automata theory | set 1, automata theory | set 2, automata theory | set 3, automata theory | set 4, automata theory | set 5, automata theory | set 6, compiler design : mcq on memory allocation and compilation process lexical analysis parsing and syntax directed translation code generation and optimization compiler theory | set 1 compiler theory | set 2, mcq on memory allocation and compilation process, lexical analysis, parsing and syntax directed translation, code generation and optimization, compiler theory | set 1, compiler theory | set 2, programming languages concepts :, , theory of computation : video – nptel toc lectures video – toc lectures by ravindrababu ravula notes – nfa and dfa notes – non regular language notes – pda, video – nptel toc lectures, video – toc lectures by ravindrababu ravula, notes – nfa and dfa, notes – non regular language, notes – pda, compiler design : video – nptel lectures video – lectures by ravindrababu ravula notes – bivas mitra iitgp notes – lr parsing notes – syntax directed translation notes – intermediate code generation, video – nptel lectures, video – lectures by ravindrababu ravula, notes – bivas mitra iitgp, notes – lr parsing, notes – syntax directed translation, notes – intermediate code generation, introduction, memory management, support for concurrent process, scheduling, system deadlock, multiprogramming system, i/o management, distributed operating systems, study of unix and windows nt., processes, threads, cpu scheduling : what happens when we turn on computer? introduction of operating system types of operating systems dual mode operations in os 32-bit and 64-bit operating systems real time systems process management | introduction states of a process process table and process control block (pcb) process scheduler difference between dispatcher and scheduler process management | cpu scheduling program for fcfs scheduling | set 1 program for fcfs scheduling | set 2 (processes with different arrival times) convoy effect in operating systems program for preemptive priority cpu scheduling program for round robin scheduling | set 1 program for shortest job first (or sjf) scheduling | set 1 (non- preemptive) program for shortest job first (sjf) scheduling | set 2 (preemptive) shortest job first scheduling with predicted burst time highest response ratio next (hrrn) scheduling program for priority scheduling | set 1 priority scheduling with different arrival time | set 2 multilevel queue scheduling multilevel feedback queue scheduling multiple-processor scheduling measure the time spent in context switch starvation and aging in operating systems introduction of system call operating system | thread threads and its types multi threading models benefits of multithreading process-based and thread-based multitasking user level thread vs kernel level thread microkernel monolithic kernel and key differences from microkernel difference between multitasking, multithreading and multiprocessing, what happens when we turn on computer?, introduction of operating system, types of operating systems, dual mode operations in os, 32-bit and 64-bit operating systems, real time systems, process management | introduction, states of a process, process table and process control block (pcb), process scheduler, difference between dispatcher and scheduler, process management | cpu scheduling, program for fcfs scheduling | set 1, program for fcfs scheduling | set 2 (processes with different arrival times), convoy effect in operating systems, program for preemptive priority cpu scheduling, program for round robin scheduling | set 1, program for shortest job first (or sjf) scheduling | set 1 (non- preemptive), program for shortest job first (sjf) scheduling | set 2 (preemptive), shortest job first scheduling with predicted burst time, highest response ratio next (hrrn) scheduling, program for priority scheduling | set 1, priority scheduling with different arrival time | set 2, multilevel queue scheduling, multilevel feedback queue scheduling, multiple-processor scheduling, measure the time spent in context switch, starvation and aging in operating systems, introduction of system call, operating system | thread, threads and its types, multi threading models, benefits of multithreading, process-based and thread-based multitasking, user level thread vs kernel level thread, microkernel, monolithic kernel and key differences from microkernel, difference between multitasking, multithreading and multiprocessing, interprocess communication, concurrency and synchronization : process synchronization | introduction critical section inter process communication ipc using message queues ipc through shared memory semaphores in operating system mutex vs semaphore lock variable synchronization mechanism peterson’s algorithm for mutual exclusion | set 1 (basic c implementation) peterson’s algorithm for mutual exclusion | set 2 (cpu cycles and memory fence) peterson’s algorithm (using processes and shared memory) readers-writers problem | set 1 (introduction and readers preference solution) reader-writers solution using monitors process synchronization | monitors dining-philosophers solution using monitors dining philosopher problem using semaphores dekker’s algorithm bakery algorithm priority inversion : what the heck ! what’s difference between priority inversion and priority inheritance ?, process synchronization | introduction, critical section, inter process communication, ipc using message queues, ipc through shared memory, semaphores in operating system, mutex vs semaphore, lock variable synchronization mechanism, peterson’s algorithm for mutual exclusion | set 1 (basic c implementation), peterson’s algorithm for mutual exclusion | set 2 (cpu cycles and memory fence), peterson’s algorithm (using processes and shared memory), readers-writers problem | set 1 (introduction and readers preference solution), reader-writers solution using monitors, process synchronization | monitors, dining-philosophers solution using monitors, dining philosopher problem using semaphores, dekker’s algorithm, bakery algorithm, priority inversion : what the heck !, what’s difference between priority inversion and priority inheritance ?, deadlock : process management | deadlock introduction deadlock prevention and avoidance deadlock detection and recovery resource allocation graph (rag) banker’s algorithm program for banker’s algorithm | set 1 (safety algorithm) banker’s algorithm : print all the safe state deadlock detection algorithm, process management | deadlock introduction, deadlock prevention and avoidance, deadlock detection and recovery, resource allocation graph (rag), banker’s algorithm, program for banker’s algorithm | set 1 (safety algorithm), banker’s algorithm : print all the safe state, deadlock detection algorithm, main memory management : mapping virtual address to physical addresses memory management |partition allocation method paging page table entries inverted page table segmentation program for first fit algorithm in memory management program for next fit algorithm in memory management working with shared libraries | set 1 static and dynamic libraries | set 1 buddy system allocating kernel memory, mapping virtual address to physical addresses, memory management |partition allocation method, paging, page table entries, inverted page table, segmentation, program for first fit algorithm in memory management, program for next fit algorithm in memory management, working with shared libraries | set 1, static and dynamic libraries | set 1, buddy system, allocating kernel memory, virtual memory : virtual memory secondary memory – hard disk drive page fault handling page replacement algorithms program for optimal page replacement algorithm techniques to handle thrashing what exactly spooling is all about? overlays in memory management swap space, virtual memory, secondary memory – hard disk drive, page fault handling, page replacement algorithms, program for optimal page replacement algorithm, techniques to handle thrashing, what exactly spooling is all about?, overlays in memory management, swap space, i/o management and distributed os : file systems file directory | path name file allocation methods difference between fat32, exfat, and ntfs file system disk scheduling algorithms category archives: operating systems last minute notes – operating systems, file systems, file directory | path name, file allocation methods, difference between fat32, exfat, and ntfs file system, disk scheduling algorithms, category archives: operating systems, last minute notes – operating systems, study of unix and windows nt :, , , processes, threads, cpu scheduling : process management cpu scheduling, process management, cpu scheduling, inter-process communication, concurrency and synchronization : concurrency and synchronization, concurrency and synchronization, deadlock : deadlock, deadlock, main memory management : memory management, memory management, virtual memory : virtual memory | questions, virtual memory | questions, i/o management and distributed os : input output systems, input output systems, study of unix and windows nt : unix, unix, video – nptel lectures, video – lectures by ravindrababu ravula, notes – virginiatech univ. web resource, notes – galvin lecture slides, book – william stallings practice problems and solutions, notes – virtual memory and cache, notes – segmentation and paging, notes – some interesting problems on virtual memory, database concepts, er diagrams, data models, design of relational database, normalisation,, sql and qbe, query processing and optimisation, centralised and distributed database, security, concurrency and recovery in centralised and distributed database systems, object oriented database management systems (concepts, composite objects, integration with rdbms applications), oracle., introduction and er model : database management system – introduction | set 1 database management system introduction | set 2 (3-tier architecture) dbms architecture 2-level, 3-level need for dbms advantages of dbms over file system data abstraction and data independence er model recursive relationships minimization of er diagram enhanced er model mapping from er model to relational model, database management system – introduction | set 1, database management system introduction | set 2 (3-tier architecture), dbms architecture 2-level, 3-level, need for dbms, advantages of dbms over file system, data abstraction and data independence, er model, recursive relationships, minimization of er diagram, enhanced er model, mapping from er model to relational model, data models and relational model : relational model relational algebra – overview dbms | anomalies in relational model relational model introduction and codd rules keys in relational model (candidate, super, primary, alternate and foreign) relational algebra-basic operators relational algebra – extended operators dbms | how to solve relational algebra problems for gate -1 dbms | how to solve relational algebra problems for gate -2, relational model, relational algebra – overview, dbms | anomalies in relational model, relational model introduction and codd rules, keys in relational model (candidate, super, primary, alternate and foreign), relational algebra-basic operators, relational algebra – extended operators, dbms | how to solve relational algebra problems for gate -1, dbms | how to solve relational algebra problems for gate -2, database design (integrity constraints, normal forms) : database normalization | introduction database normalization | normal forms functional dependency and attribute closure finding attribute closure and candidate keys using functional dependencies number of possible superkeys lossless decomposition dependency preserving decomposition lossless join and dependency preserving decomposition dbms | how to find the highest normal form of a relation equivalence of functional dependencies armstrong’s axioms in functional dependency canonical cover denormalization in databases, database normalization | introduction, database normalization | normal forms, functional dependency and attribute closure, finding attribute closure and candidate keys using functional dependencies, number of possible superkeys, lossless decomposition, dependency preserving decomposition, lossless join and dependency preserving decomposition, dbms | how to find the highest normal form of a relation, equivalence of functional dependencies, armstrong’s axioms in functional dependency, canonical cover, denormalization in databases, concurrency and recovery : concurrency control -introduction database recovery techniques acid properties in dbms log based recovery transaction isolation levels in dbms conflict serializability precedence graph for testing conflict serializability how to test if two schedules are view equal or not ? recoverability of schedules deadlock in dbms starvation in dbms concurrency control protocols | lock based protocol concurrency control protocol | two phase locking (2-pl)-i concurrency control protocol | two phase locking (2-pl)-ii concurrency control protocol | two phase locking (2-pl)-iii concurrency control protocol | thomas write rule concurrency control protocols | timestamp ordering protocols concurrency control protocol | multiple granularity locking concurrency control protocol | graph based protocol introduction to timestamp and deadlock prevention schemes, concurrency control -introduction, database recovery techniques, acid properties in dbms, log based recovery, transaction isolation levels in dbms, conflict serializability, precedence graph for testing conflict serializability, how to test if two schedules are view equal or not ?, recoverability of schedules, deadlock in dbms, starvation in dbms, concurrency control protocols | lock based protocol, concurrency control protocol | two phase locking (2-pl)-i, concurrency control protocol | two phase locking (2-pl)-ii, concurrency control protocol | two phase locking (2-pl)-iii, concurrency control protocol | thomas write rule, concurrency control protocols | timestamp ordering protocols, concurrency control protocol | multiple granularity locking, concurrency control protocol | graph based protocol, introduction to timestamp and deadlock prevention schemes, sql and qbe : structured query language (sql) inner vs outer join having vs where clause database objects nested queries in sql sql tutorial, structured query language (sql), inner vs outer join, having vs where clause, database objects, nested queries in sql, sql tutorial, oracle :, , introduction and er model : er and relational models database design (normal forms) transactions and concurrency control sql, er and relational models, database design (normal forms), transactions and concurrency control, sql, video – nptel lectures, notes – lecture slides silberschatz, korth and sudarshan, notes – lecture slides raghu ramakrishnan and johannes gehrke, notes – stanford dbms course lecture slides, notes – jeff ullman’s lecture slides, notes – canonical cover, combinational circuit design, sequential circuit design, hardwired and micro programmed processor design, instruction formats, addressing modes, memory types and organisation, interfacing peripheral devices, interrupts, microprocessor architecture, instruction set and programming (8085, p – iii / p – iv), microprocessor applications., combinational circuit design : half adder full adder half subtractor full subtractor half adder and half subtractor using nand nor gates encoders and decoders encoder binary decoder combinational circuits using decoder multiplexers carry look-ahead adder parallel adder & parallel subtractor bcd adder magnitude comparator bcd to 7 segment decoder programmable logic array programming array logic read-only memory (rom), half adder, full adder, half subtractor, full subtractor, half adder and half subtractor using nand nor gates, encoders and decoders, encoder, binary decoder, combinational circuits using decoder, multiplexers, carry look-ahead adder, parallel adder & parallel subtractor, bcd adder, magnitude comparator, bcd to 7 segment decoder, programmable logic array, programming array logic, read-only memory (rom), sequential circuit design : introduction of sequential circuits flip-flop types and their conversion synchronous sequential circuits counters n-bit johnson counter ripple counter design counter for given sequence master slave jk flip flop asynchronous sequential circuits shift registers design 101 sequence detector amortized analysis for increment in counter, introduction of sequential circuits, flip-flop types and their conversion, synchronous sequential circuits, counters, n-bit johnson counter, ripple counter, design counter for given sequence, master slave jk flip flop, asynchronous sequential circuits, shift registers, design 101 sequence detector, amortized analysis for increment in counter, hardwired and microprogrammed processor design : hardwired v/s micro-programmed control unit, hardwired v/s micro-programmed control unit, instruction formats and addressing modes : von neumann architecture basic computer instructions instruction formats (zero, one, two and three address instruction) problem solving on instruction format addressing modes machine instructions difference between call and jump instructions simplified instructional computer (sic) flynn’s taxonomy generations of computer pipelining | set 1 (execution, stages and throughput) pipelining | set 2 (dependencies and data hazard) pipelining | set 3 (types and stalling) different instruction cycles micro-operation, von neumann architecture, basic computer instructions, instruction formats (zero, one, two and three address instruction), problem solving on instruction format, addressing modes, machine instructions, difference between call and jump instructions, simplified instructional computer (sic), flynn’s taxonomy, generations of computer, pipelining | set 1 (execution, stages and throughput), pipelining | set 2 (dependencies and data hazard), pipelining | set 3 (types and stalling), different instruction cycles, micro-operation, memory organization and interrupts : cache memory cache organization | introduction what’s difference between cpu cache and tlb? types of computer memory (ram and rom) different types of ram i/o interface (interrupt and dma mode) priority interrupts | (s/w polling and daisy chaining) asynchronous input output synchronization clusters in computer organisation, cache memory, cache organization | introduction, what’s difference between cpu cache and tlb?, types of computer memory (ram and rom), different types of ram, i/o interface (interrupt and dma mode), priority interrupts | (s/w polling and daisy chaining), asynchronous input output synchronization, clusters in computer organisation, microprocessor and 8085 : microprocessor tutorials, microprocessor tutorials, digital logic, computer organization and architecture, microprocessor, video – nptel lectures: digital logic, video – lectures by ravindrababu ravula: digital logic, video – nptel lectures: co, notes – pipelining, notes – cache memory, notes – cache associativity, analog and digital transmission, asynchronous and synchronous transmission, transmission media, multiplexing and concentration, switching techniques, polling., topologies, networking devices, osi reference model, protocols for – (i) data link layer, (ii) network layer, (iii) transport layer, tcp / ip protocols, networks security, network administration., type of transmission and media : types of transmission media data communication | transmission impairment transmission modes in computer networks (simplex, half-duplex and full-duplex), types of transmission media, data communication | transmission impairment, transmission modes in computer networks (simplex, half-duplex and full-duplex), switching techniques and polling : switching techniques: message switching circuit switching packet switching and delays circuit switching vs packet switching, switching techniques: message switching, circuit switching, packet switching and delays, circuit switching vs packet switching, introduction of computer network and osi model : basics of computer networking network topologies types of area networks – lan, man and wan manet: mobile ad hoc network types of transmission media transmission modes in computer networks (simplex, half-duplex and full-duplex) collision domain and broadcast domain redundant link problems digital subscriber line (dsl) what is scrambling? difference between unipolar, polar and bipolar line coding schemes analog to digital conversion digital to analog conversion analog to analog conversion (modulation) difference between broadband and baseband transmission let’s experiment with networking layers of osi model tcp/ip model network devices (hub, repeater, bridge, switch, router, gateways and brouter), basics of computer networking, network topologies, types of area networks – lan, man and wan, manet: mobile ad hoc network, types of transmission media, transmission modes in computer networks (simplex, half-duplex and full-duplex), collision domain and broadcast domain, redundant link problems, digital subscriber line (dsl), what is scrambling?, difference between unipolar, polar and bipolar line coding schemes, analog to digital conversion, digital to analog conversion, analog to analog conversion (modulation), difference between broadband and baseband transmission, let’s experiment with networking, layers of osi model, tcp/ip model, network devices (hub, repeater, bridge, switch, router, gateways and brouter), data link layer : multiple access protocols p2p(peer to peer) file sharing framing in data link layer lan technologies | ethernet ethernet frame format difference between byte stuffing and bit stuffing hamming code carrier sense multiple access (csma) controlled access protocols back-off algorithm for csma/cd collision detection in csma/cd efficiency of csma/cd efficiency of token ring computer networks | error detection stop and wait arq sliding window protocol | set 1 (sender side) sliding window protocol | set 2 (receiver side) sliding window protocol | set 3 (selective repeat) sliding window protocols summary with questions program to remotely power on a pc over the internet using the wake-on-lan protocol program to calculate the round trip time (rtt) introduction of mac address collision avoidance in wireless networks maximum data rate (channel capacity) for noiseless and noisy channels, multiple access protocols, p2p(peer to peer) file sharing, framing in data link layer, lan technologies | ethernet, ethernet frame format, difference between byte stuffing and bit stuffing, hamming code, carrier sense multiple access (csma), controlled access protocols, back-off algorithm for csma/cd, collision detection in csma/cd, efficiency of csma/cd, efficiency of token ring, computer networks | error detection, stop and wait arq, sliding window protocol | set 1 (sender side), sliding window protocol | set 2 (receiver side), sliding window protocol | set 3 (selective repeat), sliding window protocols summary with questions, program to remotely power on a pc over the internet using the wake-on-lan protocol, program to calculate the round trip time (rtt), introduction of mac address, collision avoidance in wireless networks, maximum data rate (channel capacity) for noiseless and noisy channels, network layer : internetworking line configuration in computer networks difference between unicast, broadcast and multicast collision domain and broadcast domain ip addressing | introduction and classful addressing network layer | introduction and ipv4 datagram header network layer | ipv4 datagram fragmentation and delays fragmentation at network layer internet protocol v6 | ipv6 internet protocol version 6 (ipv6) header ip addressing | classless addressing supernetting computer networks | longest prefix matching in routers program to determine class, network and host id of an ipv4 address c program to find ip address, subnet mask & default gateway network address translation (nat) types of network address translation (nat) classification of routing algorithms – set 1 types of routing – set 2 classes of routing protocols – set 3 distance vector routing v/s link state routing fixed and flooding routing algorithms routing v/s routed protocols unicast routing – link state routing routing protocols set 1 (distance vector routing) route poisoning and count to infinity problem onion routing router on a stick internet control message protocol (icmp) | computer networks hot standby router protocol (hsrp) ospf protocol fundamentals ospf protocol states ospf router roles and configuration root bridge election in spanning tree protocol types of spanning tree protocol (stp) eigrp fundamentals features of enhanced interior gateway routing protocol (eigrp) routing information protocol (rip) link state advertisement (lsa) administrative distance (ad) and autonomous system (as) circuit switching packet switching and delays differences between virtual circuits & datagram networks computer network | circuit switching vs packet switching traceroute how arp works? arp, reverse arp(rarp), inverse arp(inarp), proxy arp and gratuitous arp packet flow in the same network packet flow in different network what’s difference between ping and traceroute?, internetworking, line configuration in computer networks, difference between unicast, broadcast and multicast, collision domain and broadcast domain, ip addressing | introduction and classful addressing, network layer | introduction and ipv4 datagram header, network layer | ipv4 datagram fragmentation and delays, fragmentation at network layer, internet protocol v6 | ipv6, internet protocol version 6 (ipv6) header, ip addressing | classless addressing, supernetting, computer networks | longest prefix matching in routers, program to determine class, network and host id of an ipv4 address, c program to find ip address, subnet mask & default gateway, network address translation (nat), types of network address translation (nat), classification of routing algorithms – set 1, types of routing – set 2, classes of routing protocols – set 3, distance vector routing v/s link state routing, fixed and flooding routing algorithms, routing v/s routed protocols, unicast routing – link state routing, routing protocols set 1 (distance vector routing), route poisoning and count to infinity problem, onion routing, router on a stick, internet control message protocol (icmp) | computer networks, hot standby router protocol (hsrp), ospf protocol fundamentals, ospf protocol states, ospf router roles and configuration, root bridge election in spanning tree protocol, types of spanning tree protocol (stp), eigrp fundamentals, features of enhanced interior gateway routing protocol (eigrp), routing information protocol (rip), link state advertisement (lsa), administrative distance (ad) and autonomous system (as), circuit switching, packet switching and delays, differences between virtual circuits & datagram networks, computer network | circuit switching vs packet switching, traceroute, how arp works?, arp, reverse arp(rarp), inverse arp(inarp), proxy arp and gratuitous arp, packet flow in the same network, packet flow in different network, what’s difference between ping and traceroute?, transport layer : transport layer responsibilities congestion control leaky bucket algorithm tcp congestion control tcp 3-way handshake process tcp connection establishment tcp connection termination error control in tcp tcp timers user datagram protocol (udp) multiplexing and demultiplexing in transport layer, transport layer responsibilities, congestion control, leaky bucket algorithm, tcp congestion control, tcp 3-way handshake process, tcp connection establishment, tcp connection termination, error control in tcp, tcp timers, user datagram protocol (udp), multiplexing and demultiplexing in transport layer, network security : basic network attacks types of viruses introduction to firewall deniel of service and prevention digital signatures and certificates lzw (lempel–ziv–welch) compression technique rc4 encryption algorithm rsa algorithm in cryptography rsa algorithm using multiple precision arithmetic library weak rsa decryption with chinese-remainder theorem implementation of diffie-hellman algorithm dna cryptography port security unicode message authentication codes how message authentication code works? hash functions in system security the cia triad image steganography access-lists (acl) last minute notes – computer networks, basic network attacks, types of viruses, introduction to firewall, deniel of service and prevention, digital signatures and certificates, lzw (lempel–ziv–welch) compression technique, rc4 encryption algorithm, rsa algorithm in cryptography, rsa algorithm using multiple precision arithmetic library, weak rsa decryption with chinese-remainder theorem, implementation of diffie-hellman algorithm, dna cryptography, port security, unicode, message authentication codes, how message authentication code works?, hash functions in system security, the cia triad, image steganography, access-lists (acl), last minute notes – computer networks, computer networks, data link layer, network layer, ip addressing, transport layer, application layer, network security, video – nptel lectures, video – lectures by ravindrababu ravula, notes – lecture notes iit kanpur, notes – web resources on computer networks by tanenbaum, visual – sliding window animation, software development models, requirement analysis and specifications, software design, programming techniques and tools, software validation and quality assurance techniques, software maintenance and advanced concepts, software management., software models : classical waterfall model iterative waterfall model incremental process model prototyping model cocomo model spiral model rapid application development model (rad) rad model vs traditional sdlc, classical waterfall model, iterative waterfall model, incremental process model, prototyping model, cocomo model, spiral model, rapid application development model (rad), rad model vs traditional sdlc, requirement analysis and specifications : classification of software requirements project size estimation techniques requirements engineering process, classification of software requirements, project size estimation techniques, requirements engineering process, programming techniques and tools :, , software validation and qat : classification of software software testing | basics black box testing white box testing requirements elicitation challenges in eliciting requirements capability maturity model (cmm) debugging, classification of software, software testing | basics, black box testing, white box testing, requirements elicitation, challenges in eliciting requirements, capability maturity model (cmm), debugging, software maintenance and management : project management process system configuration management, project management process, system configuration management, software engineering, , display systems, input devices, 2d geometry, graphic operations, 3d graphics, animation, graphic standard, applications., concepts, storage devices, input tools, authoring tools, application, files., display system and input devices : vector vs raster graphics segments in computer graphics a-buffer method z-buffer or depth-buffer method back-face detection method, vector vs raster graphics, segments in computer graphics, a-buffer method, z-buffer or depth-buffer method, back-face detection method, graphics operations and 3d graphics : 2d transformation in computer graphics | set 1 (scaling of objects) 2d transformation | rotation of objects point clipping algorithm in computer graphics line clipping | set 1 (cohen–sutherland algorithm) polygon clipping | sutherland–hodgman algorithm snowflakes fractal koch curve or koch snowflake klee’s algorithm (length of union of segments of a line) cubic bezier curve fractals in c/c++ dda line generation algorithm in computer graphics bresenham’s line generation algorithm bresenham’s circle drawing algorithm neighbors of a point on a circle using bresenham’s algorithm bresenham’s algorithm for 3-d line drawing mid-point line generation algorithm program to find line passing through 2 points anti-aliased line | xiaolin wu’s algorithm mid-point circle drawing algorithm boundary fill algorithm draw a circle without floating point arithmetic chain code for 2d line, 2d transformation in computer graphics | set 1 (scaling of objects), 2d transformation | rotation of objects, point clipping algorithm in computer graphics, line clipping | set 1 (cohen–sutherland algorithm), polygon clipping | sutherland–hodgman algorithm, snowflakes fractal, koch curve or koch snowflake, klee’s algorithm (length of union of segments of a line), cubic bezier curve, fractals in c/c++, dda line generation algorithm in computer graphics, bresenham’s line generation algorithm, bresenham’s circle drawing algorithm, neighbors of a point on a circle using bresenham’s algorithm, bresenham’s algorithm for 3-d line drawing, mid-point line generation algorithm, program to find line passing through 2 points, anti-aliased line | xiaolin wu’s algorithm, mid-point circle drawing algorithm, boundary fill algorithm, draw a circle without floating point arithmetic, chain code for 2d line, storage devices and tools :, , , , definitions, ai approach for solving problems., automated reasoning with prepositional logic and predicate logic-fundamental proof procedure, refutation, resolution, refinements to resolution (ordering / pruning / restriction strategies)., state space representation of problems, bounding functions, breadth first, depth first, a, a*, ao*, etc. performance comparison of various search techniques., frames, scripts, semantic nets, production systems, procedural representations. prolog programming., components of an expert system, knowledge representation and acquisition techniques, building expert system and shell., rtns, atns, parsing of ambiguous cfgs. tree adjoining grammars (tags)., systems approach to planning, designing, development, implementation and evaluation of mis., decision-making processes, evaluation of dss, group decision support system and case studies, adaptive design approach to dss development, cognitive style in dss, integrating expert and decision support systems., getting started with machine learning, artificial intelligence | an introduction, machine learning, an introduction to machine learning | set 2, introduction to data in machine learning, introduction to deep learning, demystifying machine learning, machine learning – applications, machine learning and artificial intelligence, difference between machine learning and artificial intelligence, agents in artificial intelligence, types of learning – supervised learning, types of learning – part 2, supervised and unsupervised learning, reinforcement learning, regression and classification | supervised machine learning, logistic regression, multivariate regression, confusion matrix in machine learning, a single neuron neural network, clustering in machine learning, different types of clustering algorithm, k means clustering – introduction, analysis of test data using k-means clustering, introduction to artificial neutral networks | set 1, introduction to artificial neural network | set 2, introduction to ann (artificial neural networks) | set 3 (hybrid systems), fuzzy logic | introduction, fuzzy logic | set 2 (classical and fuzzy sets), machine learning, fuzzy logic and misc, , , ugc net cs notes according to syllabus of paper-ii, previous years ugc net cs solved papers, articles on computer science, gate cs notes according to gate 2019 syllabus, company, about us, careers, in media, contact us, privacy policy, copyright policy, learn, algorithms, data structures, sde cheat sheet, machine learning, cs subjects, video tutorials, news, top news, technology, work & career, business, finance, lifestyle, languages, python, java, cpp, golang, c#, sql, web development, web tutorials, django tutorial, html, css, javascript, bootstrap, contribute, write an article, improve an article, pick topics to write, write interview experience, internships, video internship]