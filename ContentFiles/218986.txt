[the public suffix list is a cross-vendor initiative to provide an accurate list of domain name suffixes, maintained by the hard work of mozilla volunteers and by submissions from registries, to whom we are very grateful., the usefulness of this can be seen if we take the example of cookies. in the past, browsers used an algorithm which only denied setting wide-ranging cookies for top-level domains with no dots (e.g. com or org). however, this did not work for top-level domains where only third-level registrations are allowed (e.g. co.uk). in these cases, websites could set a cookie for .co.uk which would be passed onto every website registered under co.uk., since there was and remains no algorithmic method of finding the highest level at which a domain may be registered for a particular top-level domain (the policies differ with each registry), the only method is to create a list. this is the aim of the public suffix list., software using the public suffix list will be able to determine where cookies may and may not be set, protecting the user from being tracked across sites., as well as this, the public suffix list can also be used to support features such as site grouping in browsers. by knowing where the user-controlled section of the domain name begins and ends, browsers can group cookies and history entries by site in a way that couldn't easily be done before., some use the psl to determine what is a valid domain name and what isn't. this is dangerous. gtlds and cctlds are constantly updating, coming and going - and certainly not static. if the psl is incorporated in a static manner, and your software does not regularly receive psl updates, it will erroneously think that valid tlds are not valid, or conversely treat decommissioned tlds that should be invalid as valid. the dns should be the proper source for this information, despite the performance benefits of some local source to pre-empt network latency. if you must use the psl for this purpose, please do not bake static copies of the psl into your software without update mechanisms that are frequently checking for its frequent updates and incorporating them., these are some of the uses of the list we know about. if you are using it for something else, you are encouraged to tell us, because it helps us to assess the potential impact of changes. for that, you can use the psl-discuss mailing list, where we consider issues related to the maintenance, format and semantics of the list. note: please *do not* use this mailing list to request additions to the psl's data., in the future it may be used for, for example, restricting dom storage allowances on a per-domain basis., qt uses it to restrict cookie setting from version 4.7.2 onwards., crawler-commons is a suite of tools for building a web crawler, and it uses the psl., c, perl and php: regdom-libs includes libraries for working with the public suffix list., c: libpsl, a fast offline psl lookup library in c, c: faup, a command line tool with a c library and python bindings, c#: nager.publicsuffix, elixir: publicsuffix-elixir, erlang: publicsuffix_erlang, go: x/net/publicsuffix, go: tldextract, go: publicsuffix-go, haskell: publicsuffix-haskell, java: regdom-libs has a java port too, java: guava - google's core java libraries - has a psl-using class, java: java api for the public suffix list, javascript: publicsuffixlist.js, javascript: tld.js, typescript: tldts, lua: lua-psl, .net: louw.publicsuffix., objective-c: kkdomain, perl: domain::publicsuffix, php: php-domain-parser, php: tldextract, python: publicsuffix2, python: publicsuffixlist, python: dnspy - claims to be more flexible., ruby: publicsuffix-ruby gem, rust: publicsuffix - a super-fast dynamic implementation that can be updated at runtime, rust: psl - an even faster static implementation, compiled down to native rust code, rust: addr - a public suffix list based domain name and email address parser, rust: psl-types - common types for the public suffix implementation crates, swift: dashlane/swiftdomainparser, there's also a list of libraries in various languages in the comments on this stack overflow question., copyright © 2007–21 mozilla foundation.][public suffix list, learn more about the public suffix list, uses]learn more about the public suffix list[][learn more, the list, submit amendments, restricting cookie setting, restricting the setting of the document.domain property, sorting in the download manager, sorting in the cookie manager, searching in history, domain highlighting in the url bar, restricting cookie setting, determining whether entered text is a search or a website url, determining whether wildcard subdomains are allowed in origin trial tokens, restricting cookie setting, restricting the setting of the document.domain property, restricting cookie setting, domain highlighting in the url bar, zone determination, activex opt-in list security restriction, dmarc, cab forum baseline requirements. the baseline requirements ban the issuance of wildcard certs where the wildcard is the next label immediately after a registry-controlled label, and suggests using the "icann domains" section of the public suffix list for determining what's registry-controlled., html 5 (document.domain), let's encrypt uses it for rate limiting applications to their ca. if you just need an exception from their rate limits, please do not request a change to the psl, but instead use their form, linked from their documentation. this is a faster way to achieve what you want, and the psl is really not intended as a means to work around third party limits., cloudflare uses the psl in a number of ways, but most notably limits a domain to be available in only one account unless present in the psl. again, third party limits are not something the psl was designed for, so addressing account splitting with cloudflare directly is the appropriate solution., the tranco service that is widely used by security researchers uses the psl as a means to aggregate domain listings sourced from alexa, majestic and cisco umbrella.]