[web technology reference for developers, structure of content on the web, code used to describe document style, general-purpose scripting language, protocol for transmitting web resources, interfaces for building web applications, web technology reference for developers, learn web development, learn web development, learn to structure web content with html, learn to style content using css, learn to run scripts in the browser, learn to make the web accessible to all, more mdn. your mdn., frequently asked questions about mdn plus, an http cookie (web cookie, browser cookie) is a small piece of data that a server sends to a user's web browser. the browser may store the cookie and send it back to the same server with later requests. typically, an http cookie is used to tell if two requests come from the same browserâ€”keeping a user logged in, for example. it remembers stateful information for the stateless http protocol., cookies are mainly used for three purposes:, logins, shopping carts, game scores, or anything else the server should remember, user preferences, themes, and other settings, recording and analyzing user behavior, cookies were once used for general client-side storage. while this made sense when they were the only way to store data on the client, modern storage apis are now recommended. cookies are sent with every request, so they can worsen performance (especially for mobile data connections). modern apis for client storage are the web storage api (localstorage and sessionstorage) and indexeddb., note: to see stored cookies (and other storage that a web page can use), you can enable the storage inspector in developer tools and select cookies from the storage tree., after receiving an http request, a server can send one or more set-cookie headers with the response. the browser usually stores the cookie and sends it with requests made to the same server inside a cookie http header. you can specify an expiration date or time period after which the cookie shouldn't be sent. you can also set additional restrictions to a specific domain and path to limit where the cookie is sent. for details about the header attributes mentioned below, refer to the set-cookie reference article., the set-cookie http response header sends cookies from the server to the user agent. a simple cookie is set like this:, this instructs the server sending headers to tell the client to store a pair of cookies:, then, with every subsequent request to the server, the browser sends all previously stored cookies back to the server using the cookie header., note: here's how to use the set-cookie header in various server-side applications:, the lifetime of a cookie can be defined in two ways:, for example:, note: when you set an expires date and time, they're relative to the client the cookie is being set on, not the server., if your site authenticates users, it should regenerate and resend session cookies, even ones that already exist, whenever a user authenticates. this approach helps prevent session fixation attacks, where a third party can reuse a user's session., you can ensure that cookies are sent securely and aren't accessed by unintended parties or scripts in one of two ways: with the secure attribute and the httponly attribute., a cookie with the secure attribute is only sent to the server with an encrypted request over the https protocol. it's never sent with unsecured http (except on localhost), which means man-in-the-middle attackers can't access it easily. insecure sites (with http: in the url) can't set cookies with the secure attribute. however, don't assume that secure prevents all access to sensitive information in cookies. for example, someone with access to the client's hard disk (or javascript if the httponly attribute isn't set) can read and modify the information., a cookie with the httponly attribute is inaccessible to the javascript document.cookie api; it's only sent to the server. for example, cookies that persist in server-side sessions don't need to be available to javascript and should have the httponly attribute. this precaution helps mitigate cross-site scripting (xss) attacks., here's an example:, the domain and path attributes define the scope of a cookie: what urls the cookies should be sent to., the domain attribute specifies which hosts can receive a cookie. if unspecified, the attribute defaults to the same host that set the cookie, excluding subdomains. if domain is specified, then subdomains are always included. therefore, specifying domain is less restrictive than omitting it. however, it can be helpful when subdomains need to share information about a user., for example, if you set domain=mozilla.org, cookies are available on subdomains like developer.mozilla.org., the path attribute indicates a url path that must exist in the requested url in order to send the cookie header. the %x2f ("/") character is considered a directory separator, and subdirectories match as well., for example, if you set path=/docs, these request paths match:, but these request paths don't:, the samesite attribute lets servers specify whether/when cookies are sent with cross-site requests (where site is defined by the registrable domain and the scheme: http or https). this provides some protection against cross-site request forgery attacks (csrf). it takes three possible values: strict, lax, and none., with strict, the cookie is only sent to the site where it originated. lax is similar, except that cookies are sent when the user navigates to the cookie's origin site. for example, by following a link from an external site. none specifies that cookies are sent on both originating and cross-site requests, but only in secure contexts (i.e., if samesite=none then the secure attribute must also be set). if no samesite attribute is set, the cookie is treated as lax., here's an example:, note: the standard related to samesite recently changed (mdn documents the new behavior above). see the cookies browser compatibility table for information about how the attribute is handled in specific browser versions:, because of the design of the cookie mechanism, a server can't confirm that a cookie was set from a secure origin or even tell where a cookie was originally set., a vulnerable application on a subdomain can set a cookie with the domain attribute, which gives access to that cookie on all other subdomains. this mechanism can be abused in a session fixation attack. see session fixation for primary mitigation methods., as a defense-in-depth measure, however, you can use cookie prefixes to assert specific facts about the cookie. two prefixes are available:, if a cookie name has this prefix, it's accepted in a set-cookie header only if it's also marked with the secure attribute, was sent from a secure origin, does not include a domain attribute, and has the path attribute set to /. this way, these cookies can be seen as "domain-locked"., if a cookie name has this prefix, it's accepted in a set-cookie header only if it's marked with the secure attribute and was sent from a secure origin. this is weaker than the __host- prefix., the browser will reject cookies with these prefixes that don't comply with their restrictions. note that this ensures that subdomain-created cookies with prefixes are either confined to the subdomain or ignored completely. as the application server only checks for a specific cookie name when determining if the user is authenticated or a csrf token is correct, this effectively acts as a defense measure against session fixation., note: on the application server, the web application must check for the full cookie name including the prefix. user agents do not strip the prefix from the cookie before sending it in a request's cookie header., for more information about cookie prefixes and the current state of browser support, see the prefixes section of the set-cookie reference article., you can create new cookies via javascript using the document.cookie property. you can access existing cookies from javascript as well if the httponly flag isn't set., cookies created via javascript can't include the httponly flag., please note the security issues in the security section below. cookies available to javascript can be stolen through xss., note: when you store information in cookies, keep in mind that all cookie values are visible to, and can be changed by, the end user. depending on the application, you may want to use an opaque identifier that the server looks up, or investigate alternative authentication/confidentiality mechanisms such as json web tokens., ways to mitigate attacks involving cookies:, a cookie is associated with a particular domain and scheme (such as http or https), and may also be associated with subdomains if the set-cookie domain attribute is set. if the cookie domain and scheme match the current page, the cookie is considered to be from the same site as the page, and is referred to as a first-party cookie., if the domain and scheme are different, the cookie is not considered to be from the same site, and is referred to as a third-party cookie. while the server hosting a web page sets first-party cookies, the page may contain images or other components stored on servers in other domains (for example, ad banners) that may set third-party cookies. these are mainly used for advertising and tracking across the web. for example, the types of cookies used by google., a third-party server can create a profile of a user's browsing history and habits based on cookies sent to it by the same browser when accessing multiple sites. firefox, by default, blocks third-party cookies that are known to contain trackers. third-party cookies (or just tracking cookies) may also be blocked by other browser settings or extensions. cookie blocking can cause some third-party components (such as social media widgets) not to function as intended., note: servers can (and should) set the cookie samesite attribute to specify whether or not cookies may be sent to third party sites., legislation or regulations that cover the use of cookies include:, these regulations have global reach. they apply to any site on the world wide web that users from these jurisdictions access (the eu and california, with the caveat that california's law applies only to entities with gross revenue over 25 million usd, among things)., these regulations include requirements such as:, there may be other regulations that govern the use of cookies in your locality. the burden is on you to know and comply with these regulations. there are companies that offer "cookie banner" code that helps you comply with these regulations., another approach to storing data in the browser is the web storage api. the window.sessionstorage and window.localstorage properties correspond to session and permanent cookies in duration, but have larger storage limits than cookies, and are never sent to a server. more structured and larger amounts of data can be stored using the indexeddb api, or a library built on it., there are some techniques designed to recreate cookies after they're deleted. these are known as "zombie" cookies. these techniques violate the principles of user privacy and user control, may violate data privacy regulations, and could expose a website using them to legal liability., last modified: apr 27, 2022, by mdn contributors, your blueprint for a better internet., visit mozilla corporationâ€™s not-for-profit parent, the mozilla foundation. portions of this content are Â©1998â€“2022 by individual mozilla.org contributors. content available under a creative commons license.][in this article, in this article, using http cookies, creating cookies, the set-cookie and cookie headers, define the lifetime of a cookie, restrict access to cookies, define where cookies are sent, security, tracking and privacy, third-party cookies, cookie-related regulations, other ways to store information in the browser, see also, found a problem with this page?, mdn, support, our communities, developers]using http cookies - http | mdn[http, guides:, references:, http cookie, note:, note:, note:, note:, note:, note:, note:][skip to main content, skip to search, skip to select language, referencesreferences overview / web technology web technology reference for developers html structure of content on the web css code used to describe document style javascript general-purpose scripting language http protocol for transmitting web resources web apis interfaces for building web applications web technology web technology reference for developers, overview / web technology web technology reference for developers, html structure of content on the web, css code used to describe document style, javascript general-purpose scripting language, http protocol for transmitting web resources, web apis interfaces for building web applications, web technology web technology reference for developers, guidesguides overview / mdn learning area learn web development mdn learning area learn web development html learn to structure web content with html css learn to style content using css javascript learn to run scripts in the browser accessibility learn to make the web accessible to all, overview / mdn learning area learn web development, mdn learning area learn web development, html learn to structure web content with html, css learn to style content using css, javascript learn to run scripts in the browser, accessibility learn to make the web accessible to all, mdn plusmdn plus overview more mdn. your mdn. faq frequently asked questions about mdn plus, overview more mdn. your mdn., faq frequently asked questions about mdn plus, already a subscriber?, get mdn plus, references, http, using http cookies, english (us), creating cookies, security, tracking and privacy, other ways to store information in the browser, see also, http, guides:, resources and uris identifying resources on the web data uris introduction to mime types common mime types choosing between www and non-www urls, identifying resources on the web, data uris, introduction to mime types, common mime types, choosing between www and non-www urls, http guide basics of http overview of http evolution of http http messages a typical http session connection management in http/1.x protocol upgrade mechanism, basics of http, overview of http, evolution of http, http messages, a typical http session, connection management in http/1.x, protocol upgrade mechanism, http security content security policy (csp) http public key pinning (hpkp) http strict transport security (hsts) cookie security x-content-type-options x-frame-options x-xss-protection mozilla web security guidelines mozilla observatory, content security policy (csp), http public key pinning (hpkp), http strict transport security (hsts), cookie security, x-content-type-options, x-frame-options, x-xss-protection, mozilla web security guidelines, mozilla observatory, http access control (cors), http authentication, http caching, http compression, http conditional requests, http content negotiation, http cookies, http range requests, http redirects, http specifications, feature policy, references:, http headers accept accept-ch experimental non-standard deprecated accept-ch-lifetime accept-charset accept-encoding accept-language accept-patch accept-post accept-ranges access-control-allow-credentials access-control-allow-headers access-control-allow-methods access-control-allow-origin access-control-expose-headers access-control-max-age access-control-request-headers access-control-request-method age allow alt-svc authorization cache-control clear-site-data connection content-disposition experimental non-standard deprecated content-dpr content-encoding content-language content-length content-location content-range content-security-policy content-security-policy-report-only content-type cookie cross-origin-embedder-policy cross-origin-opener-policy cross-origin-resource-policy date experimental device-memory digest dnt experimental downlink experimental non-standard deprecated dpr experimental early-data experimental ect etag expect expect-ct expires experimental feature-policy forwarded from host if-match if-modified-since if-none-match if-range if-unmodified-since http headers keep-alive non-standard deprecated large-allocation last-modified link location nel origin deprecated pragma proxy-authenticate proxy-authorization deprecated public-key-pins deprecated public-key-pins-report-only range referer referrer-policy retry-after experimental rtt save-data experimental sec-ch-ua experimental sec-ch-ua-arch experimental sec-ch-ua-bitness experimental sec-ch-ua-full-version experimental sec-ch-ua-full-version-list experimental sec-ch-ua-mobile experimental sec-ch-ua-model experimental sec-ch-ua-platform experimental sec-ch-ua-platform-version sec-fetch-dest sec-fetch-mode sec-fetch-site sec-fetch-user sec-websocket-accept server server-timing service-worker-navigation-preload set-cookie sourcemap strict-transport-security te timing-allow-origin tk trailer transfer-encoding upgrade upgrade-insecure-requests user-agent vary via experimental non-standard deprecated viewport-width want-digest deprecated warning experimental deprecated width www-authenticate x-content-type-options x-dns-prefetch-control non-standard x-forwarded-for non-standard x-forwarded-host non-standard x-forwarded-proto x-frame-options x-xss-protection, accept, accept-ch, experimental non-standard deprecated accept-ch-lifetime, accept-charset, accept-encoding, accept-language, accept-patch, accept-post, accept-ranges, access-control-allow-credentials, access-control-allow-headers, access-control-allow-methods, access-control-allow-origin, access-control-expose-headers, access-control-max-age, access-control-request-headers, access-control-request-method, age, allow, alt-svc, authorization, cache-control, clear-site-data, connection, content-disposition, experimental non-standard deprecated content-dpr, content-encoding, content-language, content-length, content-location, content-range, content-security-policy, content-security-policy-report-only, content-type, cookie, cross-origin-embedder-policy, cross-origin-opener-policy, cross-origin-resource-policy, date, experimental device-memory, digest, dnt, experimental downlink, experimental non-standard deprecated dpr, experimental early-data, experimental ect, etag, expect, expect-ct, expires, experimental feature-policy, forwarded, from, host, if-match, if-modified-since, if-none-match, if-range, if-unmodified-since, http headers, keep-alive, non-standard deprecated large-allocation, last-modified, link, location, nel, origin, deprecated pragma, proxy-authenticate, proxy-authorization, deprecated public-key-pins, deprecated public-key-pins-report-only, range, referer, referrer-policy, retry-after, experimental rtt, save-data, experimental sec-ch-ua, experimental sec-ch-ua-arch, experimental sec-ch-ua-bitness, experimental sec-ch-ua-full-version, experimental sec-ch-ua-full-version-list, experimental sec-ch-ua-mobile, experimental sec-ch-ua-model, experimental sec-ch-ua-platform, experimental sec-ch-ua-platform-version, sec-fetch-dest, sec-fetch-mode, sec-fetch-site, sec-fetch-user, sec-websocket-accept, server, server-timing, service-worker-navigation-preload, set-cookie, sourcemap, strict-transport-security, te, timing-allow-origin, tk, trailer, transfer-encoding, upgrade, upgrade-insecure-requests, user-agent, vary, via, experimental non-standard deprecated viewport-width, want-digest, deprecated warning, experimental deprecated width, www-authenticate, x-content-type-options, x-dns-prefetch-control, non-standard x-forwarded-for, non-standard x-forwarded-host, non-standard x-forwarded-proto, x-frame-options, x-xss-protection, http request methods connect delete get head http request methods options patch post put trace, connect, delete, get, head, http request methods, options, patch, post, put, trace, http response status codes 100 continue 101 switching protocols 103 early hints 200 ok 201 created 202 accepted 203 non-authoritative information 204 no content 205 reset content 206 partial content 300 multiple choices 301 moved permanently 302 found 303 see other 304 not modified 307 temporary redirect 308 permanent redirect 400 bad request 401 unauthorized 402 payment required 403 forbidden 404 not found 405 method not allowed 406 not acceptable 407 proxy authentication required 408 request timeout 409 conflict 410 gone 411 length required 412 precondition failed 413 payload too large 414 uri too long 415 unsupported media type 416 range not satisfiable 417 expectation failed 418 i'm a teapot 422 unprocessable entity 425 too early 426 upgrade required 428 precondition required 429 too many requests 431 request header fields too large 451 unavailable for legal reasons 500 internal server error 501 not implemented 502 bad gateway 503 service unavailable 504 gateway timeout 505 http version not supported 506 variant also negotiates 507 insufficient storage 508 loop detected 510 not extended 511 network authentication required http response status codes, 100 continue, 101 switching protocols, 103 early hints, 200 ok, 201 created, 202 accepted, 203 non-authoritative information, 204 no content, 205 reset content, 206 partial content, 300 multiple choices, 301 moved permanently, 302 found, 303 see other, 304 not modified, 307 temporary redirect, 308 permanent redirect, 400 bad request, 401 unauthorized, 402 payment required, 403 forbidden, 404 not found, 405 method not allowed, 406 not acceptable, 407 proxy authentication required, 408 request timeout, 409 conflict, 410 gone, 411 length required, 412 precondition failed, 413 payload too large, 414 uri too long, 415 unsupported media type, 416 range not satisfiable, 417 expectation failed, 418 i'm a teapot, 422 unprocessable entity, 425 too early, 426 upgrade required, 428 precondition required, 429 too many requests, 431 request header fields too large, 451 unavailable for legal reasons, 500 internal server error, 501 not implemented, 502 bad gateway, 503 service unavailable, 504 gateway timeout, 505 http version not supported, 506 variant also negotiates, 507 insufficient storage, 508 loop detected, 510 not extended, 511 network authentication required, http response status codes, csp directives csp: base-uri csp: block-all-mixed-content csp: child-src csp: connect-src csp: default-src csp: font-src csp: form-action csp: frame-ancestors csp: frame-src csp: img-src content-security-policy csp: manifest-src csp: media-src csp: navigate-to csp: object-src csp: plugin-types csp: prefetch-src deprecated csp: referrer csp: report-to csp: report-uri csp: require-sri-for csp: require-trusted-types-for csp: sandbox csp: script-src csp: script-src-attr csp: script-src-elem csp source values csp: style-src csp: style-src-attr csp: style-src-elem csp: trusted-types csp: upgrade-insecure-requests csp: worker-src, csp: base-uri, csp: block-all-mixed-content, csp: child-src, csp: connect-src, csp: default-src, csp: font-src, csp: form-action, csp: frame-ancestors, csp: frame-src, csp: img-src, content-security-policy, csp: manifest-src, csp: media-src, csp: navigate-to, csp: object-src, csp: plugin-types, csp: prefetch-src, deprecated csp: referrer, csp: report-to, csp: report-uri, csp: require-sri-for, csp: require-trusted-types-for, csp: sandbox, csp: script-src, csp: script-src-attr, csp: script-src-elem, csp source values, csp: style-src, csp: style-src-attr, csp: style-src-elem, csp: trusted-types, csp: upgrade-insecure-requests, csp: worker-src, cors errors reason: cors header 'access-control-allow-origin' does not match 'xyz' reason: cors request did not succeed reason: cors disabled reason: cors request external redirect not allowed reason: invalid token 'xyz' in cors header 'access-control-allow-headers' reason: invalid token 'xyz' in cors header 'access-control-allow-methods' reason: did not find method in cors header 'access-control-allow-methods' reason: expected 'true' in cors header 'access-control-allow-credentials' reason: missing token 'xyz' in cors header 'access-control-allow-headers' from cors preflight channel reason: cors header 'access-control-allow-origin' missing reason: multiple cors header 'access-control-allow-origin' not allowed reason: credential is not supported if the cors header 'access-control-allow-origin' is '*' reason: cors header 'origin' cannot be added reason: cors preflight channel did not succeed reason: cors request not http cors errors, reason: cors header 'access-control-allow-origin' does not match 'xyz', reason: cors request did not succeed, reason: cors disabled, reason: cors request external redirect not allowed, reason: invalid token 'xyz' in cors header 'access-control-allow-headers', reason: invalid token 'xyz' in cors header 'access-control-allow-methods', reason: did not find method in cors header 'access-control-allow-methods', reason: expected 'true' in cors header 'access-control-allow-credentials', reason: missing token 'xyz' in cors header 'access-control-allow-headers' from cors preflight channel, reason: cors header 'access-control-allow-origin' missing, reason: multiple cors header 'access-control-allow-origin' not allowed, reason: credential is not supported if the cors header 'access-control-allow-origin' is '*', reason: cors header 'origin' cannot be added, reason: cors preflight channel did not succeed, reason: cors request not http, cors errors, feature-policy directives experimental feature-policy: accelerometer experimental feature-policy: ambient-light-sensor experimental feature-policy: autoplay experimental feature-policy: battery experimental feature-policy: camera experimental feature-policy: display-capture experimental feature-policy: document-domain experimental feature-policy: encrypted-media experimental feature-policy: fullscreen experimental feature-policy: gamepad experimental feature-policy: geolocation experimental feature-policy: gyroscope experimental feature-policy experimental non-standard feature-policy: layout-animations experimental non-standard feature-policy: legacy-image-formats experimental feature-policy: magnetometer experimental feature-policy: microphone experimental feature-policy: midi experimental non-standard feature-policy: oversized-images experimental feature-policy: payment experimental feature-policy: picture-in-picture experimental feature-policy: publickey-credentials-get experimental feature-policy: screen-wake-lock experimental feature-policy: speaker-selection experimental feature-policy: sync-xhr experimental non-standard feature-policy: unoptimized-images experimental non-standard feature-policy: unsized-media experimental feature-policy: usb experimental feature-policy: web-share experimental feature-policy: xr-spatial-tracking, experimental feature-policy: accelerometer, experimental feature-policy: ambient-light-sensor, experimental feature-policy: autoplay, experimental feature-policy: battery, experimental feature-policy: camera, experimental feature-policy: display-capture, experimental feature-policy: document-domain, experimental feature-policy: encrypted-media, experimental feature-policy: fullscreen, experimental feature-policy: gamepad, experimental feature-policy: geolocation, experimental feature-policy: gyroscope, experimental feature-policy, experimental non-standard feature-policy: layout-animations, experimental non-standard feature-policy: legacy-image-formats, experimental feature-policy: magnetometer, experimental feature-policy: microphone, experimental feature-policy: midi, experimental non-standard feature-policy: oversized-images, experimental feature-policy: payment, experimental feature-policy: picture-in-picture, experimental feature-policy: publickey-credentials-get, experimental feature-policy: screen-wake-lock, experimental feature-policy: speaker-selection, experimental feature-policy: sync-xhr, experimental non-standard feature-policy: unoptimized-images, experimental non-standard feature-policy: unsized-media, experimental feature-policy: usb, experimental feature-policy: web-share, experimental feature-policy: xr-spatial-tracking, creating cookies, security, tracking and privacy, other ways to store information in the browser, see also, php, node.js, python, ruby on rails, session cookies are deleted when the current session ends. the browser defines when the "current session" ends, and some browsers use session restoring when restarting. this can cause session cookies to last indefinitely., permanent cookies are deleted at a date specified by the expires attribute, or after a period of time specified by the max-age attribute., /docs, /docs/, /docs/web/, /docs/web/http, /, /docsets, /fr/docs, samesite=lax is the new default if samesite isn't specified. previously, cookies were sent for all requests by default., cookies with samesite=none must now also specify the secure attribute (they require a secure context)., cookies from the same domain are no longer considered to be from the same site if sent using a different scheme (http: or https:)., use the httponly attribute to prevent access to cookie values via javascript., cookies that are used for sensitive information (such as indicating authentication) should have a short lifetime, with the samesite attribute set to strict or lax. (see samesite attribute, above.) in browsers that support samesite, this ensures that the authentication cookie isn't sent with cross-site requests. this would make the request effectively unauthenticated to the application server., the general data privacy regulation (gdpr) in the european union, the eprivacy directive in the eu, the california consumer privacy act, notifying users that your site uses cookies., allowing users to opt out of receiving some or all cookies., allowing users to use the bulk of your service without receiving cookies., set-cookie, cookie, document.cookie, navigator.cookieenabled, samesite cookies, inspecting cookies using the storage inspector, cookie specification: rfc 6265, http cookie on wikipedia, cookies, the gdpr, and the eprivacy directive, edit on github, source on github, report a problem with this content on github, want to fix the problem yourself? see our contribution guide., mdn on twitter, mdn on github, about, hacks blog, careers, product help, report a page issue, report a site issue, mdn community, mdn forum, mdn chat, web technologies, learn web development, mdn plus, website privacy notice, cookies, legal, community participation guidelines]