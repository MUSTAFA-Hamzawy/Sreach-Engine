[app actions help you expand the reach of your android app by letting users launch directly into specific app features from google assistant. app actions build on top of your app's deep links, giving users more ways to access the features they already want to use., as an android developer, you can implement one of the available built-in intents to help users get things done faster and more smoothly., this codelab covers intermediate-level concepts for developing with actions on google. you should have prior experience with developing android apps and handling deep links to follow this codelab. developers entirely new to android may instead want to get started with one of the codelabs for android developer fundamentals., beta: check out the app actions beta codelab to learn about implementing app actions using the android shortcuts framework. if you're learning how to maintain app actions implemented using an actions.xml resource file, continue with this codelab., in this codelab, you'll add these features to a sample fitness android app:, , before continuing, make sure you have the following tools in your environment:, familiarity with kotlin and xml are recommended, although not required, to understand the code used in this codelab., caution: app action testing must be completed on a physical android device. attempting to invoke app actions on a virtual device using assistant can result in the response "sorry, i couldn't find that" instead of the expected deep link., the app actions in this codelab will only trigger successfully for google assistant languages in the following locales: en-us, en-gb, en-ca, en-in, en-be, en-sg, and en-au. other languages and locales are not available for the built-in intents used by the android app in this codelab., in this codelab, you'll use an android device to test app actions. before testing on a physical android device, make sure it's connected to your local development machine. you must be signed in to the google app on the device and signed in to android studio using the same google account., app actions connect users from google assistant to your android app. but how do they work?, when a user indicates to assistant that they want to use your app, assistant looks for app actions registered to your app from an actions.xml file. app actions are described in this file by using a combination of built-in intents (which semantically describe an app capability) and fulfillment instructions (like a deep link template)., an actions.xml file contains the following information for each app action:, based on information given to google assistant by the user, app actions creates a deep link to fulfill the intent. your android activity then filters for and handles the provided deep link to provide the user with their desired functionality., altogether, the result becomes a user experience where assistant invokes your app functionality in response to a user's query., note: this codelab covers a simple app action that launches an activity in your android app. app actions can also present information as an embedded visual card (android slice) that users can interact with on google assistant., the starting point for this codelab is a sample fitness app for android. in the app, users can start and stop exercise timers, as well as view information about their exercise routines., to get the base files for this codelab, run the following command to clone the github repository:, using the --branch codelab-start option checks out the branch where this codelab starts., optional: if you want to reference the finished project, the codelab-complete branch contains what your fitness app will look like by the end of this codelab., once you've cloned the repository, open it in android studio:, as you implement app actions for the fitness app, you'll be tasked with testing inputs using an android studio plugin. you'll install this plugin later in the codelab, but you won't be able to use the test tool until your app is uploaded to a project in the google play console., to make your version of the sample fitness app unique in the console, change the application id listed in the default android configs of your app/build.gradle file:, replace "myuniquename" in the applicationid with something unique to you. doing so changes the package name and prevents a later "duplicate package name" issue when uploading to the play console., before making any other changes to the app, it may be helpful to get an idea of what the sample app can do. try running the app on an emulator:, the emulator starts and boots just like a physical device, so it may take a while depending on the speed of your computer. once your app builds and the emulator is ready, android studio uploads the app to the emulator and runs it., note: you can find the most recent information about using an android virtual device in the android studio documentation. please refer there if you run into any issues following the steps listed above., , briefly explore the app to see what it can do. tapping the run icon starts an exercise timer, and tapping the x icon then stops the timer. these are the two tasks you'll enable with app actions., repeat the above steps on your test device to confirm that the app functions the same way on both surfaces. before continuing, set up and verify that assistant is working on your physical device by long-pressing on the home button. you'll need to sign in to assistant on your test device if you haven't already., build your app in android studio and upload it to the play console as an internal release. uploading the app is a prerequisite for using the app actions test tool in android studio., in android studio, do the following steps:, in the google play console, upload the app bundle you just created as a new app:, now that you've successfully uploaded your app to the play console, it's time to go back to android studio., note: refer to troubleshooting if you experience issues uploading the app to google play console., google assistant needs to be aware of app actions registered to your app, so you need to communicate that information somehow. during development, you do that using the "app actions test tool" android studio plugin., if you don't already have the plugin, install it:, note: the test plugin sends information to assistant through the google app on your android device. your test device needs access to the play store to update your google app before app actions can function properly., to set up an app action, you need to find a built-in intent that maps to a function performed by your android app. the built-in intents reference page lists the built-in intents available for google assistant, each of which models a common way users express tasks they're trying to do., in the reference, built-in intents that can be fulfilled by app actions are grouped by category and functionality., key point: choosing the built-in intents appropriate for what your user wants to do is an essential part of implementing app actions., for this codelab, you're implementing two built-in intents to help out your user:, this process involves setting up a deep link, defining the app action in the app's xml resources, then connecting the two., deep links take users directly to content, passing information from the intent to the app in the process. by default, the assistant uses deep links to fulfill the intent and pass parameters to the app. for this codelab, incoming deep links use the "fit-actions.firebaseapp.com" host and "https" scheme., in the android manifest file, add an intent filter for the main activity to define the supported deep links:, now in the main activity, add the following function to define the behavior for an incoming deep link:, deeplink.start and deeplink.stop are defined as constants in the sample app, and they map to the corresponding paths of an incoming deep link. in the deeplink.start case, the handler also gets arguments that come in via deep link url parameters., now, update the handleintent function of the same file to use the deep link handler:, now when the app filters an intent of the format "https://fit-actions.firebaseapp.com/start", it starts an exercise timer., if you're familiar with the android debug bridge (adb), you can test the deep link handler on a running device. to do so, update the app on your device and use the following shell command:, for app actions to work, google assistant needs to know which app actions are registered to your app. you communicate this information by uploading an actions.xml file to the play console as part of your android package., it only takes a few steps to create the new resource and reference it:, to describe the app actions supported by the app, you create a new xml file named actions.xml in app/src/main/res/xml., in android studio, do the following steps:, once the new file is created, replace the contents of actions.xml with the following code:, in the above code, you use elements to define app actions for starting and stopping an exercise timer in the app. the intentname attributes correspond to the two built-in intents you're fulfilling using app actions, and the elements tell assistant how to use your app to achieve the action., here, both actions are fulfilled by constructing deep links using the urltemplate attribute. the url templates use the host and scheme you defined for deep links in your androidmanifest.xml file. the paths in each url template correspond to what the handledeeplink function (added earlier to the main activity) expects., note that for starting the timer, you also map the exercise.name parameter from the built-in intent to the exercisetype url parameter. this allows your deep link handler to get arguments for its business logic from assistant., in the previous step, android studio added a reference to your actions.xml file in androidmanifest.xml. verify this by checking for the following element in the android manifest:, if you see the above <meta-data> element in your manifest file, move on to testing your app action., if you don't see the above <meta-data> element in your manifest file, add it., it's time to try out your app actions on your test device!, connect your test device and use the test tool to test the app action:, when the app actions test tool creates or updates a preview of your app actions, it does so for a single google account, temporarily registering your defined app actions. that preview enables assistant to recognize your app actions before deploying the production version of your app to the google play console., once the test tool fetches the built-in intents for your app, you can directly provide the intents with parameter values and trigger the app action from android studio!, as an alternative, you can use the invocation name directly in the assistant app on your device to try out your app action. for example, you could say "hey google, start running in fit actions" to launch the app action that starts an exercise timer., tip: you can type commands to google assistant by long-pressing home, then tapping the keyboard icon that appears when no audio is detected., you can now start and stop exercise timers in your fitness app via google assistant, but you may have noticed that only certain exercises are recognized. requests like "start my swim in fit actions" or "start hiking in fit actions" lead to a timer that starts with the text "start unknown in..."., that's because the only exercise types currently supported by the sample app are "running", "cycling", and "walking." how can you better accommodate users who want to use the app to track other exercises?, for this app, you can increase the number of available exercises in a couple of ways:, tip: use app actions as a way to get users started on a process—avoid building for extremely complex phrases. even if your app can bundle task steps together with app actions, users might not provide all the information you need at once., if you add support for more exercise types, then you can connect to more pathways in your app based on the exercise a user wants to do. that's one way to help users, and it's the correct choice if your app can perform different tasks for different exercises., for the fitness app, you can take the second option to make google assistant immediately more accommodating. once you do, users will be able to start a timer using queries containing another supported text field value. in this codelab, you'll use inline inventory to map "start hiking" to the app functionality for "start walking"., inline inventory defines specific entities your app expects users to include when triggering app actions with assistant. you add inline inventory in your actions.xml file to directly create a listing of supported options for users. inventory items are grouped in an <entity-set> element, and action definitions can reference entity sets to use them for mapping parameters., as mentioned earlier, the sample app has functionality to support "running", "cycling", and "walking". create an entity set and reference it in actions.intent.start_exercise so your app only needs to use entity identifiers for deep linking:, each <entity> element in the inline inventory represents a unique match for the user's query. entities allow assistant to distinguish between supported inputs like running, walking, and cycling. they're especially useful when you want assistant to recognize certain information that's specific to your app, like menu items or services., by adding an entity for the "hiking" string, you allow hikers to take advantage of functionality you already built for walking!, note: in this fitness sample, the actions.intent.start_exercise built-in intent provides supported text field values that closely match strings in the app's business logic. think of the supported text field values for a built-in intent as pre-defined inline inventory values you can map to a url or to identifiers for deep linking. as a result, entities primarily act as a mapping layer for those text field values and aren't strictly necessary to uniquely identify those strings., in the test tool, creating or updating a preview fetches the registered built-in intents for your app. you can then directly provide the intents with parameter values and trigger the app action from android studio., try out your inventory in the app actions test tool:, , congratulations!, you've now covered the skills necessary to add app actions to an android app., from here, you can try making further refinements to your fitness app. to give you some inspiration, we've provided an extended version of the app in the master branch of the repo on github. the extended version uses android slices to additionally present exercise information through assistant. it also incorporates the app action deployment requirements for production android apps., to learn more about actions on google, explore these resources:, follow us on twitter @actionsongoogle to stay tuned to our latest announcements, and tweet to #aogdevs to share what you have built!, before you go, please fill out this form to help us improve the codelab. let us know if you encountered any issues, needed more information to complete steps, or even if everything just went smoothly!, except as otherwise noted, the content of this page is licensed under the creative commons attribution 4.0 license, and code samples are licensed under the apache 2.0 license. for details, see the google developers site policies. java is a registered trademark of oracle and/or its affiliates.][extend an android app to google assistant with app actions, 1. overview, what you'll build, what you'll learn, what you'll need, 2. understand how it works, 3. set up for local development, download your base files, change android application id, build.gradle, try out the app, upload to play console, install test plugin, 4. identify app actions and prepare deep links, implement deep links, androidmanifest.xml, fitmainactivity.kt, fitmainactivity.kt, 5. define app actions, create actions.xml, actions.xml, confirm that your android manifest references actions.xml, androidmanifest.xml, test app actions, 6. support specific wordings, inline inventory, actions.xml, test your inventory, 7. next steps, what we've covered, what's next, feedback survey, connect, programs, developer consoles]extend an android app to google assistant with app actions  |  google codelabs[beta:, what you'll need, caution:, note:, download your base files, optional:, welcome to android studio, open an existing android studio project, change android application id, try out the app, run, run app, run, select deployment target, ok, note:, home, upload to play console, build, generate signed bundle / apk, next, next, finish, all apps, create app, create app, release, internal testing, create new release, internal testing, app bundles and apks, save, note:, install test plugin, file, settings, android studio, preferences, note:, key point:, create actions.xml, file, new, xml, app actions xml file, actions file name, finish, actions.xml, confirm that your android manifest references actions.xml, test app actions, tools, app actions, app actions test tool, invocation name, locale, create preview, configure, run, tip:, home, keyboard, tip:, inline inventory, actions.xml, note:, test your inventory, update preview, configure, exercise.name, select target device, run, congratulations!, what we've covered, what's next, feedback survey][language, english, bahasa indonesia, deutsch, español, español – américa latina, français, português – brasil, русский, 中文 – 简体, 日本語, 한국어, users can start an exercise timer in the app using google assistant., users can stop the exercise timer in the app using google assistant., how to know if app actions are right for your android app., how to connect a built-in intent with an android activity., how to get deep link url parameters for an android app from the assistant., how to use inline inventory to map identifiers to app functionality, how to test app actions in android studio., a terminal to run shell commands with git installed., the latest version of android studio., a google account with access to the google play console., a physical android device on which to test your app actions., what built-in intent the app action uses., how the app action can be fulfilled (for example, via deep link)., how parameters for the intent map to information provided to assistant by the user., in the welcome to android studio dialog, click open an existing android studio project (if you already have a project open, close it first)., to start working on the fitness app, find and select the folder where you cloned the repository., in android studio, select run > run app or click run in the toolbar., in the select deployment target dialog, select a virtual device and click ok. the recommended os version is android 8 (api level 26) or higher, although actions run on devices back to android 5 (api level 21)., go to build > generate signed bundle / apk., select "android app bundle" and click next., enter details to digitally sign your app and click next., select the "release" build variant and click finish., on the all apps page, click create app., give the app any name you want and click create app. for this codelab, you won't need to fill out any of the app information once the app is created., from the sidebar menu, go to release and find the internal testing page., click create new release on the internal testing page., in the app bundles and apks panel, upload the aab file you generated earlier (it's likely in the app/release directory)., click save., go to file > settings (android studio > preferences on macos)., in the plugins section, go to marketplace and search for "app actions test tool"., install the tool and restart android studio., start exercise tracking (actions.intent.start_exercise), stop exercise tracking (actions.intent.stop_exercise), create actions.xml to establish which built-in intents to connect and what parameters are needed., map built-in intent parameters to deep link parameters in your activities., add a reference to your actions.xml file in androidmanifest.xml., go to file > new > xml > app actions xml file., enter "actions" as the actions file name., click finish to both create the new actions.xml file and add a reference to it in your androidmanifest.xml., go to tools > app actions > app actions test tool. you may be asked to sign in to android studio. use the same account used earlier with the google play console., in the invocation name field, enter "fit actions"., if the language of your assistant is not "english (us)", enter the locale that matches the language of your assistant in the locale field., click create preview., using the configure drop-down list, select the built-in intent you want to test., click run. if given the option to open with google, select "always" to allow assistant to open supported links (you can change this later in your app settings)., add app support for more exercise types like swimming and climbing (limited by the supported text field values for the actions.intent.start_exercise built-in intent), map another supported exercise type, like "hiking", to one that's supported in the app like "walking", click update preview., from the configure drop-down list, select "actions.intent.start_exercise"., type "hiking" into the exercise.name field., select your device from the select target device drop-down list., click run., how to identify android activities that have a corresponding built-in intent users can trigger via app actions., how to pass parameters from a built-in intent to an android app., how to use inline inventory to map supported values to app functionality identifiers., how to test app actions in android studio., actions.google.com: official documentation site for actions on google., app actions sample index: sample apps and code for exploring the capabilities of app actions., actions on google github repo: sample code and libraries., r/googleassistantdev: official reddit community for developers working with google assistant., connect blog facebook medium twitter youtube, blog, facebook, medium, twitter, youtube, programs women techmakers google developer groups google developers experts accelerators google developer student clubs, women techmakers, google developer groups, google developers experts, accelerators, google developer student clubs, developer consoles google api console google cloud platform console google play console firebase console actions on google console cast sdk developer console chrome web store dashboard, google api console, google cloud platform console, google play console, firebase console, actions on google console, cast sdk developer console, chrome web store dashboard, android, chrome, firebase, google cloud platform, all products, terms, privacy, sign up for the google developers newsletter subscribe, language, english, bahasa indonesia, deutsch, español, español – américa latina, français, português – brasil, русский, 中文 – 简体, 日本語, 한국어]