[apr 30th.&& 2021.&& way back in dec 2015.&& @maxogden wrote a nice guide on stabilizing your own video with ffmpeg. i return to it on occasion and have updated my gist comment to offer some updated commands. since enough has changed regarding installation and use.&& i figure a new.&& spiffy.&& and working guide deserves a non-gist home..&& presenting the 2021-era guide to pretty easy diy video stabilization!.&& on linux.&& you can sudo make install..&& there are plenty of options for libvidstab.&& like shakiness.&& accuracy.&& smoothing. the defaults are good.&& but you may want to experiment. there’s even a visual diagnostic mode..&& assuming the source video is named clip.mkv….&& you now have a clip-stabilized.mkv!.&& use the vstack or hstack filter.&& depending on if you want them stacked vertically or side-by-side:.&& feb 28th.&& 2018.&& i’ve published a few articles on medium that may interest the reader here:.&& understand how raf callbacks are scheduled and why its very reasonable to have multiple callbacks execute within the same frame..&& the canonical guide to using the chrome devtools ui for debugging node.js. it definitely beats console.log. ;).&& aside from that.&& i’ve been busy working on lighthouse.&& performance metrics.&& tooling.&& and devtools..&& mar 27th.&& 2015.&& recently.&& i’ve spent some time recently profiling real-world mobile websites. using the 1000/100/6 performance model1.&& and spelunking deep into each app.&& the findings have been fascinating..&& i’ve written up case study documents for each.&& incorporating all the findings:.&& ➜ perf audits: cnet.&& time.&& google play.&& in this doc.&& we look at the scrolling of cnet.&& input latency on cnet.&& some very interesting challenges on the responsive time.com.&& and infinite scroll on google play’s desktop site..&& the intended audience is browser engineers and performance-minded frontend developers. it’s fairly advanced.&& but i’m spelunking deep to identify how the sites butt heads with the browser apis and architecture..&& lastly.&& we’re using this research to improve chrome devtools and what you hear from chrome..&& (btw.&& use this link to view the same doc but with comments enabled).&& 1 - more on this performance model later. stay tuned..&& heyo.&& i’m a front-end developer.&& and work on the google chrome team focused on developer tooling. i live in sunny palo alto. contact me or read more about me.&& paul irish doesnt care about attribution.&& b. — its all yours under creative commons cc0. unrelatedly.&& i made a dope webapp for the caltrain schedule. check it.][paul irish, making the www great, video stabilization with `ffmpeg` and `vidstab`, raf internals & node debugging guide, advanced performance audits with devtools, popular posts]paul irish[clip.mkv, clip-stabilized.mkv, front-end developer, google chrome, contact me][rss, blog, archives, about, contact, illustrated diagnoses for the poor performance, what actions the developer should take, how chrome’s tooling should improve, questions and insights for the rendering engine (blink), why moving elements with translate() is better than pos:abs top/left, conditional stylesheets vs css hacks? answer: neither!, semantics in practice and mapping semantic value to its consumers, the protocol-relative url, chrome canary for developers]