[, introduction :, regular languages and finite automata :, >> practice problems on finite automata >> practice problems on finite automata | set 2 >> quiz on regular languages and finite automata, context free grammar and context free languages :, pushdown automata :, >> quiz on context free languages and pushdown automata, turing machine :, decidability :, >> quiz on undecidability, quick links :, please write comments if you find anything incorrect, or you want to share more information about the topic discussed above., writing code in comment? please use ide.geeksforgeeks.org, generate link and share the link here.][table of contents, table of contents, theory of computation and automata tutorials, recent articles on theory of computation, , start your coding journey now!]theory of computation and automata tutorials - geeksforgeeks[introduction :, regular languages and finite automata :, context free grammar and context free languages :, pushdown automata :, turing machine :, decidability :, quick links :][courses for working professionals live dsa live classes system design java backend development full stack live explore more self-paced dsa- self paced sde theory must-do coding questions explore more for students live competitive programming data structures with c++ data science explore more self-paced dsa- self paced cip java / python / c++ explore more school courses school guide python programming learn to make apps explore more all courses, for working professionals live dsa live classes system design java backend development full stack live explore more self-paced dsa- self paced sde theory must-do coding questions explore more, live dsa live classes system design java backend development full stack live explore more, dsa live classes, system design, java backend development, full stack live, explore more, self-paced dsa- self paced sde theory must-do coding questions explore more, dsa- self paced, sde theory, must-do coding questions, explore more, for students live competitive programming data structures with c++ data science explore more self-paced dsa- self paced cip java / python / c++ explore more, live competitive programming data structures with c++ data science explore more, competitive programming, data structures with c++, data science, explore more, self-paced dsa- self paced cip java / python / c++ explore more, dsa- self paced, cip, java / python / c++, explore more, school courses school guide python programming learn to make apps explore more, school guide, python programming, learn to make apps, explore more, all courses, tutorials practice ds & algo. must do questions dsa topic-wise dsa company-wise algorithms analysis of algorithms asymptotic analysis worst, average and best cases asymptotic notations little o and little omega notations lower and upper bound theory analysis of loops solving recurrences amortized analysis what does 'space complexity' mean ? pseudo-polynomial algorithms polynomial time approximation scheme a time complexity question searching algorithms sorting algorithms graph algorithms pattern searching geometric algorithms mathematical bitwise algorithms randomized algorithms greedy algorithms dynamic programming divide and conquer backtracking branch and bound all algorithms data structures arrays linked list stack queue binary tree binary search tree heap hashing graph advanced data structure matrix strings all data structures interview corner company preparation top topics practice company questions interview experiences experienced interviews internship interviews competititve programming design patterns system design tutorial multiple choice quizzes languages c c++ java python c# javascript jquery sql php scala perl go language html css kotlin ml & data science machine learning data science cs subjects mathematics operating system dbms computer networks computer organization and architecture theory of computation compiler design digital logic software engineering gate gate computer science notes last minute notes gate cs solved papers gate cs original papers and official keys gate 2021 dates gate cs 2021 syllabus important topics for gate cs web technologies html css javascript angularjs reactjs nodejs bootstrap jquery php software designs software design patterns system design tutorial school learning school programming mathematics number system algebra trigonometry statistics probability geometry mensuration calculus maths notes (class 8-12) class 8 notes class 9 notes class 10 notes class 11 notes class 12 notes ncert solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution rd sharma solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution physics notes (class 8-11) class 8 notes class 9 notes class 10 notes class 11 notes cs exams/psus isro isro cs original papers and official keys isro cs solved papers isro cs syllabus for scientist/engineer exam ugc net ugc net cs notes paper ii ugc net cs notes paper iii ugc net cs solved papers student campus ambassador program school ambassador program project geek of the month campus geek of the month placement course competititve programming testimonials student chapter geek on the top internship careers, practice ds & algo. must do questions dsa topic-wise dsa company-wise, must do questions, dsa topic-wise, dsa company-wise, algorithms analysis of algorithms asymptotic analysis worst, average and best cases asymptotic notations little o and little omega notations lower and upper bound theory analysis of loops solving recurrences amortized analysis what does 'space complexity' mean ? pseudo-polynomial algorithms polynomial time approximation scheme a time complexity question searching algorithms sorting algorithms graph algorithms pattern searching geometric algorithms mathematical bitwise algorithms randomized algorithms greedy algorithms dynamic programming divide and conquer backtracking branch and bound all algorithms, analysis of algorithms asymptotic analysis worst, average and best cases asymptotic notations little o and little omega notations lower and upper bound theory analysis of loops solving recurrences amortized analysis what does 'space complexity' mean ? pseudo-polynomial algorithms polynomial time approximation scheme a time complexity question, asymptotic analysis, worst, average and best cases, asymptotic notations, little o and little omega notations, lower and upper bound theory, analysis of loops, solving recurrences, amortized analysis, what does 'space complexity' mean ?, pseudo-polynomial algorithms, polynomial time approximation scheme, a time complexity question, searching algorithms, sorting algorithms, graph algorithms, pattern searching, geometric algorithms, mathematical, bitwise algorithms, randomized algorithms, greedy algorithms, dynamic programming, divide and conquer, backtracking, branch and bound, all algorithms, data structures arrays linked list stack queue binary tree binary search tree heap hashing graph advanced data structure matrix strings all data structures, arrays, linked list, stack, queue, binary tree, binary search tree, heap, hashing, graph, advanced data structure, matrix, strings, all data structures, interview corner company preparation top topics practice company questions interview experiences experienced interviews internship interviews competititve programming design patterns system design tutorial multiple choice quizzes, company preparation, top topics, practice company questions, interview experiences, experienced interviews, internship interviews, competititve programming, design patterns, system design tutorial, multiple choice quizzes, languages c c++ java python c# javascript jquery sql php scala perl go language html css kotlin, c, c++, java, python, c#, javascript, jquery, sql, php, scala, perl, go language, html, css, kotlin, ml & data science machine learning data science, machine learning, data science, cs subjects mathematics operating system dbms computer networks computer organization and architecture theory of computation compiler design digital logic software engineering, mathematics, operating system, dbms, computer networks, computer organization and architecture, theory of computation, compiler design, digital logic, software engineering, gate gate computer science notes last minute notes gate cs solved papers gate cs original papers and official keys gate 2021 dates gate cs 2021 syllabus important topics for gate cs, gate computer science notes, last minute notes, gate cs solved papers, gate cs original papers and official keys, gate 2021 dates, gate cs 2021 syllabus, important topics for gate cs, web technologies html css javascript angularjs reactjs nodejs bootstrap jquery php, html, css, javascript, angularjs, reactjs, nodejs, bootstrap, jquery, php, software designs software design patterns system design tutorial, software design patterns, system design tutorial, school learning school programming mathematics number system algebra trigonometry statistics probability geometry mensuration calculus maths notes (class 8-12) class 8 notes class 9 notes class 10 notes class 11 notes class 12 notes ncert solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution rd sharma solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution physics notes (class 8-11) class 8 notes class 9 notes class 10 notes class 11 notes, school programming, mathematics number system algebra trigonometry statistics probability geometry mensuration calculus, number system, algebra, trigonometry, statistics, probability, geometry, mensuration, calculus, maths notes (class 8-12) class 8 notes class 9 notes class 10 notes class 11 notes class 12 notes, class 8 notes, class 9 notes, class 10 notes, class 11 notes, class 12 notes, ncert solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution, class 8 maths solution, class 9 maths solution, class 10 maths solution, class 11 maths solution, class 12 maths solution, rd sharma solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution, class 8 maths solution, class 9 maths solution, class 10 maths solution, class 11 maths solution, class 12 maths solution, physics notes (class 8-11) class 8 notes class 9 notes class 10 notes class 11 notes, class 8 notes, class 9 notes, class 10 notes, class 11 notes, cs exams/psus isro isro cs original papers and official keys isro cs solved papers isro cs syllabus for scientist/engineer exam ugc net ugc net cs notes paper ii ugc net cs notes paper iii ugc net cs solved papers, isro isro cs original papers and official keys isro cs solved papers isro cs syllabus for scientist/engineer exam, isro cs original papers and official keys, isro cs solved papers, isro cs syllabus for scientist/engineer exam, ugc net ugc net cs notes paper ii ugc net cs notes paper iii ugc net cs solved papers, ugc net cs notes paper ii, ugc net cs notes paper iii, ugc net cs solved papers, student campus ambassador program school ambassador program project geek of the month campus geek of the month placement course competititve programming testimonials student chapter geek on the top internship careers, campus ambassador program, school ambassador program, project, geek of the month, campus geek of the month, placement course, competititve programming, testimonials, student chapter, geek on the top, internship, careers, jobs apply for jobs post a job job-a-thon, apply for jobs, post a job, job-a-thon, events, , write come write articles for us and get featured practice learn and code with the best industry experts premium get access to ad-free content, doubt assistance and more! jobs come and find your dream job with us geeks digest quizzes geeks campus gblog articles ide campus mantri, geeks digest, quizzes, geeks campus, gblog articles, ide, campus mantri, , , home, saved videos, courses, , gblog, puzzles, what's new ?, data structures, algorithms, interview preparation, topic-wise practice, c++, java, python, competitive programming, machine learning, html, sde sheet, puzzles, gfg school, projects, theory of computation and automata tutorials, introduction of theory of computation, introduction of finite automata, chomsky hierarchy in theory of computation, regular expressions, regular grammar and regular languages, pumping lemma in theory of computation, arden’s theorem in theory of computation, how to identify if a language is regular or not, designing finite automata from regular expression (set 1), program to implement nfa with epsilon move to dfa conversion, conversion from nfa to dfa, minimization of dfa, generating regular expression from finite automata, union and intersection of regular languages with cfl, designing deterministic finite automata (set 1), designing deterministic finite automata (set 2), dfa of a string with at least two 0’s and at least two 1’s, dfa machines accepting odd number of 0’s or/and even number of 1’s, dfa for accepting the language l = { anbm | n+m=even }, dfa for strings not ending with “the”, union process in dfa, concatenation process in dfa, star height of regular expression and regular language, mealy and moore machines in toc, difference between mealy machine and moore machine, introduction of pushdown automata, pushdown automata acceptance by final state, check if the language is context free or not, construct pushdown automata for given languages, construct pushdown automata for l = {0n1m2m3n | m,n ≥ 0}, construct pushdown automata for l = {0n1m2(n+m) | m,n ≥ 0}, construct pushdown automata for all length palindrome, npda for the language l ={w∈ {a,b}*| w contains equal no. of a’s and b’s}, npda for accepting the language l = {an bn | n>=1}, npda for accepting the language l = {an bm cn | m,n>=1}, npda for accepting the language l = {an bn cm | m,n>=1}, npda for accepting the language l = {am b(2m) | m>=1}, npda for accepting the language l = {am bn cp dq | m+n=p+q ; m,n,p,q>=1}, construct pushdown automata for l = {a(2*m)c(4*n)dnbm | m,n ≥ 0}, npda for accepting the language l = {ambnc(m+n) | m,n ≥ 1}, npda for accepting the language l = {amb(m+n)cn | m,n ≥ 1}, npda for accepting the language l = {a2mb3m | m ≥ 1}, npda for accepting the language l = {amb(2m+1) | m ≥ 1}, npda for l = {0i1j2k | i==j or j==k ; i , j , k >= 1}, closure properties of context free languages, ambiguity in context free grammar and context free languages, simplifying context free grammars, converting context free grammar to chomsky normal form, converting context free grammar to greibach normal form, relationship between grammar and language in theory of computation, context-sensitive grammar (csg) and language (csl), recursive and recursive enumerable languages in toc, turing machine in toc, halting problem in theory of computation, turing machine for addition, turing machine for subtraction | set 1, turing machine for subtraction | set 2, turing machine for multiplication, turing machine for copying data, construct a turing machine for language l = {0n1n2n | n≥1}, construct a turing machine for language l = {wwr | w ∈ {0, 1}}, construct a turing machine for language l = {ww | w ∈ {0,1}}, construct turing machine for l = {an bm a(n+m) | n,m≥1}, construct a turing machine for l = {aibjck | i*j = k; i, j, k ≥ 1}, proof that hamiltonian path is np-complete, proof that vertex cover is np complete, decidability and undecidability in toc, decidable and undecidable problems in theory of computation, undecidability and reducibility in toc, computable and non-computable problems in toc, automata theory | set 1, automata theory | set 2, automata theory | set 3, automata theory | set 4, automata theory | set 5, automata theory | set 6, regular languages and finite automata, practice problems on finite automata, practice problems on finite automata | set 2, context free languages and push-down automata, recursively enumerable sets and turing machines, undecidability, theory of computation and automata tutorials, introduction of theory of computation, introduction of finite automata, chomsky hierarchy in theory of computation, regular expressions, regular grammar and regular languages, pumping lemma in theory of computation, arden’s theorem in theory of computation, how to identify if a language is regular or not, designing finite automata from regular expression (set 1), program to implement nfa with epsilon move to dfa conversion, conversion from nfa to dfa, minimization of dfa, generating regular expression from finite automata, union and intersection of regular languages with cfl, designing deterministic finite automata (set 1), designing deterministic finite automata (set 2), dfa of a string with at least two 0’s and at least two 1’s, dfa machines accepting odd number of 0’s or/and even number of 1’s, dfa for accepting the language l = { anbm | n+m=even }, dfa for strings not ending with “the”, union process in dfa, concatenation process in dfa, star height of regular expression and regular language, mealy and moore machines in toc, difference between mealy machine and moore machine, introduction of pushdown automata, pushdown automata acceptance by final state, check if the language is context free or not, construct pushdown automata for given languages, construct pushdown automata for l = {0n1m2m3n | m,n ≥ 0}, construct pushdown automata for l = {0n1m2(n+m) | m,n ≥ 0}, construct pushdown automata for all length palindrome, npda for the language l ={w∈ {a,b}*| w contains equal no. of a’s and b’s}, npda for accepting the language l = {an bn | n>=1}, npda for accepting the language l = {an bm cn | m,n>=1}, npda for accepting the language l = {an bn cm | m,n>=1}, npda for accepting the language l = {am b(2m) | m>=1}, npda for accepting the language l = {am bn cp dq | m+n=p+q ; m,n,p,q>=1}, construct pushdown automata for l = {a(2*m)c(4*n)dnbm | m,n ≥ 0}, npda for accepting the language l = {ambnc(m+n) | m,n ≥ 1}, npda for accepting the language l = {amb(m+n)cn | m,n ≥ 1}, npda for accepting the language l = {a2mb3m | m ≥ 1}, npda for accepting the language l = {amb(2m+1) | m ≥ 1}, npda for l = {0i1j2k | i==j or j==k ; i , j , k >= 1}, closure properties of context free languages, ambiguity in context free grammar and context free languages, simplifying context free grammars, converting context free grammar to chomsky normal form, converting context free grammar to greibach normal form, relationship between grammar and language in theory of computation, context-sensitive grammar (csg) and language (csl), recursive and recursive enumerable languages in toc, turing machine in toc, halting problem in theory of computation, turing machine for addition, turing machine for subtraction | set 1, turing machine for subtraction | set 2, turing machine for multiplication, turing machine for copying data, construct a turing machine for language l = {0n1n2n | n≥1}, construct a turing machine for language l = {wwr | w ∈ {0, 1}}, construct a turing machine for language l = {ww | w ∈ {0,1}}, construct turing machine for l = {an bm a(n+m) | n,m≥1}, construct a turing machine for l = {aibjck | i*j = k; i, j, k ≥ 1}, proof that hamiltonian path is np-complete, proof that vertex cover is np complete, decidability and undecidability in toc, decidable and undecidable problems in theory of computation, undecidability and reducibility in toc, computable and non-computable problems in toc, automata theory | set 1, automata theory | set 2, automata theory | set 3, automata theory | set 4, automata theory | set 5, automata theory | set 6, regular languages and finite automata, practice problems on finite automata, practice problems on finite automata | set 2, context free languages and push-down automata, recursively enumerable sets and turing machines, undecidability, last updated : 29 jan, 2019, introduction, regular languages and finite automata, context free grammar and context free languages, pushdown automata, turing machine, decidability, quick links, introduction of theory of computation, chomsky hierarchy, applications of various automata, finite automata introduction, arden’s theorem and challenging applications | set 2, l-graphs and what they represent, hypothesis (language regularity) and algorithm (l-graph to nfa), regular expressions,regular grammar and regular languages, how to identify if a language is regular or not, arden’s theorem, finite automata from regular expressions, star height of regular expression and regular language, generating regular expression from finite automata, designing deterministic finite automata (set 1), designing deterministic finite automata (set 2), dfa for strings not ending with “the”, dfa of a string with at least two 0’s and at least two 1’s, dfa for accepting the language l = { anbm | n+m=even }, dfa machines accepting odd number of 0’s or/and even number of 1’s, dfa of a string in which 2nd symbol from rhs is ‘a’, union process in dfa, concatenation process in dfa, dfa in lex code which accepts even number of zeros and even number of ones., nfa to dfa conversion, program to implement nfa with epsilon move to dfa conversion, minimization of dfa, reversal process in dfa, complementation process in dfa, kleene’s theorem part-1, mealy and moore machines, difference between mealy machine and moore machine, relationship between grammar and language, simplifying context free grammars, closure properties of context free languages(cfl), union & intersection of regular languages with cfl, converting context free grammar to chomsky normal form, converting context free grammar to greibach normal form, pumping lemma, check if the language is context free or not, ambiguity in context free grammar, operator grammar and precedence parser, context-sensitive grammar (csg) and language (csl), pushdown automata, pushdown automata acceptance by final state, construct pushdown automata for given languages, construct pushdown automata for all length palindrome, detailed study of pushdown automata, npda for accepting the language l = {an bm cn| m,n>=1}, npda for accepting the language l = {an bn cm | m,n>=1}, npda for accepting the language l = {anbn | n>=1}, npda for accepting the language l = {am b(2m) | m>=1}, npda for accepting the language l = {am bn cp dq| m+n=p+q ; m,n,p,q>=1}, construct pushdown automata for l = {0n1m2m3n | m,n ? 0}, construct pushdown automata for l = {0n1m2(n+m) | m,n ? 0}, npda for accepting the language l = {ambnc(n+m) | m,n ? 1}, npda for accepting the language l = {amb(n+m)cn| m,n ? 1}, npda for accepting the language l = {a2mb3m | m ? 1}, npda for accepting the language l = {amb(2m+1) | m ? 1}, npda for accepting the language l = {aibjckdl | i==k or j==l,i>=1,j>=1}, construct pushdown automata for l = {a(2*m)c(4*n)dnbm | m,n ? 0}, construct pushdown automata for l = {0n1m2(n+m) | m,n ? 0}, npda for l = {0i1j2k | i==j or j==k ; i , j , k >= 1}, npda for accepting the language l = {anb(2n) | n>=1} u {anbn | n>=1}, npda for the language l ={w?{a,b}*| w contains equal no. of a’s and b’s} >> quiz on context free languages and pushdown automata, turing machine, turing machine for addition, turing machine for subtraction | set 1, turing machine for multiplication, turing machine for copying data, construct a turing machine for language l = {0n1n2n | n?1}, construct a turing machine for language l = {wwr | w ? {0, 1}}, construct a turing machine for language l = {ww | w ? {0,1}}, construct turing machine for l = {anbma(n+m) | n,m?1}, construct a turing machine for l = {aibjck | i*j = k; i, j, k ? 1}, turing machine for 1’s and 2’s complement, recursive and recursive enumerable languages, turing machine for subtraction | set 2, halting problem, theory of computation | applications of various automata, turing machine as comparator >> quiz on turing machines and recursively enumerable sets, decidable and undecidable problems, decidability, undecidability and reducibility, np-completeness | set 1 (introduction), proof that hamiltonian path is np-complete, proof that vertex cover is np complete, computable and non-computable problems, last minute notes(lmns), ‘quizzes’ on theory of computation !, ‘practice problems’ on theory of computation !, best time to buy and sell stock, must do coding questions for product based companies, axios in react: a guide for beginners, how to calculate moving average in a pandas dataframe?, difference between edge computing and fog computing, difference between var, let and const keywords in javascript, what is transmission control protocol (tcp)?, array of objects in c++ with examples, how to calculate number of host in a subnet?, top 50 software engineering interview questions and answers, company, about us, careers, in media, contact us, privacy policy, copyright policy, learn, algorithms, data structures, sde cheat sheet, machine learning, cs subjects, video tutorials, news, top news, technology, work & career, business, finance, lifestyle, languages, python, java, cpp, golang, c#, sql, web development, web tutorials, django tutorial, html, css, javascript, bootstrap, contribute, write an article, improve an article, pick topics to write, write interview experience, internships, video internship]