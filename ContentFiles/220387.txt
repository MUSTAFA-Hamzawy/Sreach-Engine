[ку́ки (англ. cookie, букв. — «печенье») — небольшой фрагмент данных, отправленный веб-сервером и хранимый на компьютере пользователя. веб-клиент (обычно веб-браузер) всякий раз при попытке открыть страницу соответствующего сайта пересылает этот фрагмент данных веб-серверу в составе http-запроса. применяется для сохранения данных на стороне пользователя, на практике обычно используется для[1]:, поддержки браузерами cookie (приём, сохранение и последующая пересылка серверу сохранённых cookie) требуют многие сайты с ограничениями доступа, большинство интернет-магазинов[2]. настройка оформления и поведения многих веб-сайтов по индивидуальным предпочтениям пользователя тоже основана на cookie[1]., cookie легко перехватить и подменить (например, для получения доступа к учётной записи), если пользователь использует нешифрованное соединение с сервером. в группе риска пользователи, выходящие в интернет при помощи публичных точек доступа wi-fi и не использующие при этом таких механизмов, как ssl и tls. шифрование позволяет также решить и другие проблемы, связанные с безопасностью передаваемых данных., большинство современных браузеров позволяет пользователям выбрать — принимать cookie или нет, но их отключение делает невозможной работу с некоторыми сайтами. кроме того, по законам некоторых стран (например, согласно постановлению евросоюза от 2016 года, см. общий регламент по защите данных) сайты должны в обязательном порядке запрашивать согласие пользователя перед установкой cookie., cookie используются веб-серверами для идентификации пользователей и хранения данных о них., к примеру, если вход на сайт осуществляется при помощи cookie, то, после ввода пользователем своих данных на странице входа, cookie позволяют серверу запомнить, что пользователь уже идентифицирован и ему разрешён доступ к соответствующим услугам и операциям[1]., многие сайты также используют cookie для сохранения настроек пользователя. эти настройки могут использоваться для персонализации, которая включает в себя выбор оформления и функциональности. например, википедия позволяет авторизованным пользователям выбрать дизайн сайта. поисковая система google позволяет пользователям (в том числе и не зарегистрированным в ней) выбрать количество результатов поиска, отображаемых на одной странице[3]., cookie также используются для отслеживания действий пользователей на сайте. как правило, это делается с целью сбора статистики, а рекламные компании на основе такой статистики формируют анонимные профили пользователей для более точного нацеливания рекламы[4]., в техническом плане cookie представляют собой фрагменты данных, изначально отправляемых веб-сервером браузеру. при каждом последующем посещении сайта браузер пересылает их обратно серверу. без cookie каждый просмотр веб-страницы является изолированным действием, не связанным с просмотром других страниц того же сайта, с помощью же cookie можно выявить связь между просмотром разных страниц. кроме отправки cookie веб-сервером, cookie могут создаваться скриптами на языках вроде javascript, если они поддерживаются и включены в браузере., спецификации[5][6] указывают минимальные объёмы, которые должны предоставляться браузерами для хранения cookie. так, браузер должен хранить по меньшей мере 300 cookie по 4096 байт каждая, и по меньшей мере 20 cookie для одного сервера или домена., популярные браузеры имеют соответствующий максимум хранящихся cookie для каждого домена:, на практике, некоторые браузеры могут накладывать более жёсткие ограничения. к примеру, internet explorer предоставляет 4096 байт для всех cookie в одном домене., имена cookie нечувствительны к регистру в соответствии с разделом 3.1 rfc 2965., cookie могут устанавливать дату их удаления, в этом случае они будут автоматически удалены браузером в указанный срок. если дата удаления не указана, cookie удаляются сразу, как только пользователь закроет браузер. таким образом, указание даты истечения позволяет сохранить cookie более чем на один сеанс и такие cookie называются постоянными. например, интернет-магазин может использовать постоянные cookie для хранения кодов предметов, которые пользователь поместил в корзину покупок — и даже если пользователь закроет браузер, не совершив покупки, при последующем входе ему не придётся формировать корзину заново., хранение cookie также может ограничиваться в зависимости от веб-сервера, домена или поддомена, где они были созданы., по одной из версий, термин «куки» (печенье) происходит от «волшебного печенья»[7] — набора данных, которые программа получает и затем отправляет обратно неизменными. в июне 1994 года лу монтулли пришла идея использовать их при веб-соединении[8]. в то время он был сотрудником netscape communications, которая разрабатывала по заказу пакет электронной коммерции. cookie стали решением проблемы надёжной реализации виртуальной корзины покупок., с помощью джона джаннандреа в тот же год монтулли написал начальную спецификацию cookie. mosaic netscape 0.9beta, выпущенная 13 октября 1994 года[9][10], уже поддерживала cookie. cookie впервые начали использоваться вне лаборатории на сайте netscape и определяли, посещал ли пользователь сайт ранее. монтулли подал заявку на патент в 1995 году и получил его в 1998 году. internet explorer начал поддерживать cookie с версии 2, выпущенной в октябре 1995 года[11]., хотя некоторые люди знали о существовании cookie уже в первом квартале 1995 года[12], широкая общественность узнала о них лишь после статьи в «financial times» от 12 февраля 1996 года. в том же году cookie оказались в центре внимания средств массовой информации, особенно из-за потенциальной угрозы приватности. cookie были рассмотрены в федеральной комиссии по торговле сша в двух слушаниях в 1996 и 1997 годах., развитие спецификаций cookie на этом не остановилось. в частности, первые обсуждения формальной спецификации начались в апреле 1995 года. была сформирована специальная рабочая группа в рамках ietf. в качестве отправной точки была выбрана спецификация netscape. в феврале 1996 года рабочая группа определила сторонние cookie как серьёзную угрозу приватности. выработанная спецификация была выпущена под названием rfc 2109 в феврале 1997 года. в ней указывалось, что сторонние cookie должны либо блокироваться, либо хотя бы не работать по умолчанию., в то время рекламные компании уже вовсю использовали сторонние cookie и рекомендации rfc 2109 не поддерживались ни в браузерах netscape, ни в internet explorer. позднее, в октябре 2000 года, rfc 2109 была заменена новой спецификацией rfc 2965., сессионные cookie, также известные как временные cookie, существуют только во временной памяти, пока пользователь находится на странице веб-сайта. браузеры обычно удаляют сессионные cookie после того, как пользователь закрывает окно браузера[13]. в отличие от других типов cookie, сессионные cookie не имеют истечения срока действия, и поэтому браузеры понимают их как сессионные., вместо того, чтобы удаляться после закрытия браузера, как это делают сессионные cookie, постоянные cookie-файлы удаляются в определённую дату или через определённый промежуток времени. это означает, что информация о cookie будет передаваться на сервер каждый раз, когда пользователь посещает веб-сайт, которому эти cookie принадлежат. по этой причине постоянные cookie иногда называются следящие cookie, поскольку они могут использоваться рекламодателями для записи о предпочтениях пользователя в течение длительного периода времени. однако, они также могут использоваться и в «мирных» целях, например, чтобы избежать повторного ввода данных при каждом посещении сайта., обычно атрибут домена cookie совпадает с доменом, который отображается в адресной строке веб-браузера. это называется первый файл cookie. однако сторонний файл cookie принадлежит домену, отличному от того, который указан в адресной строке. этот тип файлов cookie обычно появляется, когда веб-страницы содержат контент с внешних веб-сайтов, например, рекламные баннеры. это открывает возможности для отслеживания истории посещений пользователя и часто используется рекламодателями для предоставления релевантной рекламы каждому пользователю., в качестве примера предположим, что пользователь посещает www.example.org. этот веб-сайт содержит рекламу от ad.foxytracking.com, которая при загрузке устанавливает файл cookie, принадлежащий домену рекламы (ad.foxytracking.com). затем пользователь посещает другой веб-сайт www.foo.com, который также содержит рекламу от ad.foxytracking.com и устанавливает файл cookie, принадлежащий этому домену (ad.foxytracking.com). в конце концов, оба этих cookie будут отправлены рекламодателю при загрузке их рекламы или посещении их веб-сайта. затем рекламодатель может использовать эти cookie для создания истории просмотров пользователя на всех веб-сайтах, на которых размещена реклама этого рекламодателя., по состоянию на 2014 год некоторые веб-сайты устанавливали cookie для чтения более чем на 100 сторонних доменах[14]. в среднем на одном веб-сайте было установлено 10 файлов cookie, при этом максимальное количество файлов cookie (как для сторонних, так и для третьих сторон) может превышать 800[15]. большинство современных веб-браузеров содержит настройки конфиденциальности, которые могут блокировать сторонние cookie., супер-cookie — это cookie-файл с источником домена верхнего уровня (например, .ru) или общедоступным суффиксом (например, .co.uk). обычные cookie, напротив, имеют происхождение от конкретного доменного имени, например example.com., супер-cookie могут быть потенциальной проблемой безопасности и поэтому часто блокируются веб-браузерами. если браузер разблокирует вредоносный веб-сайт, злоумышленник может установить супер-cookie и потенциально нарушить или выдать себя за законные запросы пользователей на другой веб-сайт, который использует тот же домен верхнего уровня или общедоступный суффикс, что и вредоносный веб-сайт. например, супер-cookie с происхождением .com может злонамеренно повлиять на запрос к example.com, даже если файл cookie не был создан с сайта example.com. это может быть использовано для подделки логинов или изменения информации пользователя., публичный список суффиксов[16] помогает снизить риск, который представляют супер-cookie. публичный список суффиксов — это инициатива кросс-вендоров, целью которого является предоставление точного и актуального списка суффиксов доменных имен. в старых версиях браузеров может отсутствовать актуальный список, и поэтому они будут уязвимы для супер-cookie из определённых доменов., термин «supercookie» (супер-cookie) иногда используется для отслеживания технологий, которые не используют файлы cookie http. в августе 2011 года на веб-сайтах microsoft были обнаружены два таких механизма «супер-cookie»: синхронизация файлов cookie, которая порождает cookie muid (уникальный идентификатор машины), и cookie etag[17]. из-за внимания средств массовой информации microsoft позже отключила этот код[18]., поскольку cookie можно очень легко удалить из браузера, программисты ищут способы идентифицировать пользователей даже после полной очистки истории браузера. одним из таких решений являются зомби-cookie (или evercookie, или persistent cookie) — неудаляемые или трудно удаляемые cookie, которые можно восстановить в браузере с помощью javascript. это возможно потому, что для хранения куки сайт одновременно использует все доступные хранилища браузера (http etag, session storage, local storage, indexed db), в том числе и хранилища приложений, таких как flash player (local shared objects), microsoft silverlight (isolated storage) и java (java persistence api). когда программа обнаруживает отсутствие в браузере cookie-файла, информация о котором присутствует в других хранилищах, она тут же восстанавливает его на место и тем самым идентифицирует пользователя для сайта., rfc 6265 даёт конкретные указания, как нужно интерпретировать каждый из параметров cookie:, в 2015 году был утверждён документ, обновляющий спецификацию rfc 6265, в котором добавили набор ограничений на имена для файлов cookie. для обеспечения дополнительной безопасности специалистами были предложены специальные префиксы имён __secure- и __host-, указывающие браузеру на необходимость соблюдения специальных требований при получении файлов cookie от сервера[19]., при нарушении хотя бы одного из перечисленных требований установка cookie-файла в браузер будет отклонена. поддержка префиксов реализована в браузерах chrome 49+, firefox 50+ и opera 36+[20]., при включении всех вышеперечисленных параметров запрос на установку cookie от сервера будет иметь следующий вид:, set-cookie: __secure-name=value; max-age=31536000; domain=example.com; path=/; secure; httponly; samesite=lax, как и любой другой http-заголовок, cookie должны передаваться в браузер до того, как будут переданы какие-либо другие данные, включая пустые строки и пробельные символы (это ограничение http-протокола)., запрашивая страницу, браузер отправляет веб-серверу короткий текст с http-запросом. например, для доступа к странице http://www.example.org/index.html браузер отправляет на сервер www.example.org следующий запрос:1, get /index.html http/1.1 host: www.example.org 5, сервер отвечает, отправляя запрашиваемую страницу вместе с текстом, содержащим http-ответ. там может содержаться указание браузеру сохранить cookie:, http/1.1 200 ok content-type: text/html set-cookie: name=value   (содержимое страницы), строка set-cookie отправляется лишь тогда, когда сервер желает, чтобы браузер сохранил cookie. в этом случае, если cookie поддерживаются браузером и их приём включён, браузер запоминает строку name=value (имя = значение) и отправляет её обратно серверу с каждым последующим запросом. например, при запросе следующей страницы http://www.example.org/spec.html браузер пошлёт серверу www.examle.org следующий запрос:, get /spec.html http/1.1 host: www.example.org cookie: name=value accept: */*  , этот запрос отличается от первого запроса тем, что содержит строку, которую сервер отправил браузеру ранее. таким образом, сервер узна́ет, что этот запрос связан с предыдущим. сервер отвечает, отправляя запрашиваемую страницу и, возможно, добавив новые cookie., значение cookie может быть изменено сервером путём отправления новых строк set-cookie: name=new_value. после этого браузер заменяет старое cookie с тем же name на новую строку., cookie также могут устанавливаться программами на языках типа javascript, встроенными в текст страниц, или аналогичными скриптами, работающими в браузере. в javascript для этого используется свойство cookie объекта document — document.cookie. например, document.cookie="temperature=20" создаст cookie под именем «temperature» и значением 20[21]., cookie могут использоваться сервером для опознания ранее аутентифицированных пользователей. это происходит следующим образом[22]:, этот метод широко используется на многих сайтах, например на yahoo!, в википедии и в facebook'е., многие браузеры (в частности opera, firefox) путём редактирования свойств cookie могут управлять поведением веб-сайтов. изменив срок истечения непостоянных (сессионных) cookie, можно, например, получить формально-неограниченную сессию после авторизации на каком-либо сайте. возможность редактирования cookie стандартными средствами отсутствует в internet explorer’е. но, воспользовавшись иными механизмами, например, javascript, пользователь может изменить cookie-файл. более того, существует возможность заменить сессионные cookie постоянными (с указанием срока годности)., однако серверное программное обеспечение может отслеживать такие попытки. для этого сервер выдаёт cookie на определённый срок и записывает дату окончания cookie у себя или, в зашифрованном виде, в самих cookie, каждый раз, когда пользователь обращается к серверу. если cookie, присланный браузером, имеет дату годности, отличную от той, что хранится на сервере или содержатся в cookie, значит, имеет место попытка подмены даты годности cookie. сервер может отреагировать, например, запросив у пользователя повторную авторизацию., большинство современных браузеров поддерживает cookie[23] и, как правило, пользователь может выбрать, должны cookie использоваться или нет. наиболее распространены следующие настройки браузеров[24]:, большинство браузеров, поддерживающих javascript, позволяет пользователю увидеть активные на данном сайте cookie, набрав javascript:alert(document.cookie) или javascript:prompt(document.cookie) в адресной строке браузера[24]. некоторые браузеры содержат менеджер cookie, позволяющий пользователю выборочно просмотреть и удалить cookie, хранящиеся в браузере., существует заблуждение, что cookie являются программами и могут самостоятельно отслеживать действия пользователей, хотя это только фрагменты данных, хранящиеся на компьютере браузером[25]. согласно опросу, проведённому американской компанией insight express в 2005 году, 25 % респондентов уверены в этом[26]., cookie значительным образом влияют на анонимность пользователей интернета и конфиденциальность пользовательской информации. хотя cookie отправляются только на серверы домена, для которого они предназначены, веб-страница может подгружать изображения или другие компоненты из других доменов. куки, получаемые во время подгрузки этих компонентов из других доменов, называются «сторонними»[27]., рекламные компании используют сторонние cookie для отслеживания перемещений пользователя по сайтам. в частности, рекламная компания может отслеживать пользователей на всех сайтах, где установлены их рекламные баннеры. знание страниц, посещённых пользователем, позволяет менять направленность рекламы в зависимости от предпочтений пользователя., создание профиля пользователей рассматривается как потенциальная угроза приватности даже при отслеживании в рамках одного домена, но особенно это актуально при отслеживания на нескольких доменах с использованием сторонних cookie. по этой причине в некоторых странах cookie регулируются законодательством., правительство соединённых штатов приняло строгие законы в отношении cookie в 2000 году, после того, как выяснилось, что агентство по борьбе с наркотиками сша использовало cookie для отслеживания пользователей, просмотревших их антинаркотическую рекламу в сети. в 2002 году дэниел брандт установил, что цру устанавливает на компьютеры постоянные cookie со сроком хранения до 2010 года. когда цру было уведомлено о неправомерности подобного использования cookie, управление заявило, что это было непреднамеренно и прекратило их установку[28]. 25 декабря 2005 года брандт обнаружил, что агентство национальной безопасности оставляло пару постоянных cookie после обновления программного обеспечения. после этого сообщения агентство немедленно отключило cookie[29]., директива европейского союза 2002/58/ес о конфиденциальности и электронных средствах связи[30] содержит нормы, касающиеся использования cookie. в частности, статья 5(3) устанавливает, что хранение данных (в том числе cookie) может осуществляться лишь если:, в 2009 году директива 2009/136/ес[31] внесла изменения в директиву 2002/58/ес, которые вступили в силу мае 2011 года. изменения ужесточили требования к порядку сбора информации о посетителях сайтов. согласно новым правилам владельцы сайтов должны получать предварительное согласие посетителей на сбор информации (в том числе cookie) и сообщать о действующих на сайте инструментах сбора информации[32]., в мае 2018 года в евросоюзе вступил в силу общий регламент защиты персональных данных, заменивший действующую директиву 2002/58/ес, относящийся ко всем сайтам, посещаемым из евросоюза, и приравнивающий большую часть cookie к другим персональным данным. в изначальном проекте предполагалось, что настройки браузера могут признаваться достаточным выражением согласия пользователя на установку cookie[33], а согласно окончательной версии, достаточно уведомления об установке cookie[34]., спецификация p3p включает возможность для веб-сервера сообщить браузеру о нарушении конфиденциальности, указывая характер собираемой информации и цели сбора. сюда входит и использование информации, полученной с помощью cookie. по спецификации p3p, браузер может принимать или отклонять cookie согласно пользовательским настройкам или же спросить пользователя., многие браузеры, включая safari от apple и internet explorer версий 6 и 7 от microsoft, поддерживают спецификации p3p, которые позволяют определить, следует ли разрешать сторонние cookie. браузер opera позволяет пользователям отказаться от сторонних cookie и создать глобальные или выборочные профили безопасности для веб-доменов[35]. firefox 2 был лишён этой опции, но она была восстановлена в версии 3., помимо проблем конфиденциальности, cookie имеют и некоторые технические недостатки, присущие любым данным. в частности, они не всегда точно идентифицируют пользователя и могут быть причиной атак злоумышленников., если на компьютере используется более одного браузера, то, как правило, каждый имеет отдельное хранилище для cookie. поэтому cookie идентифицируют не человека, а сочетание учётной записи, компьютера, и браузера. таким образом, любой человек, который использует несколько учётных записей, компьютеров или браузеров, имеет несколько наборов cookie., во время нормальной эксплуатации сервер и браузер пользователя постоянно обмениваются cookie. поскольку cookie могут содержать конфиденциальную информацию (имя пользователя, условия доступа и т. д.), их содержимое не должно быть доступно другим. кража cookie — это акт несанкционированного перехвата cookie посторонними., cookie могут быть украдены с помощью анализа трафика — это называется взломом сессии. сетевой трафик может быть перехвачен не только его отправителем и получателем (особенно в публичных сетях wi-fi). этот трафик включает в себя и cookie, передаваемые через незашифрованные http-сессии. там, где сетевой трафик не шифруется, злоумышленники могут прочесть сообщения пользователей сети, в том числе их cookie, используя программы, называемые снифферами., шифрование сервером данных в cookie снимает вопрос о их безопасности, однако, возможна подмена cookie злоумышленником. для невозможности доступа даже к зашифрованным cookie может помочь установление между пользователем и сервером шифрованного соединения с использованием протокола https. сервер также может использовать специальный флаг при установке cookie, после чего браузер будет передавать их только по надёжному каналу, например, через ssl-соединение[6]., однако большое число веб-сайтов, даже использующих безопасные https-сессии для идентификации пользователя, затем отправляет cookie и другие данные более простым незашифрованным http-соединением. злоумышленники могут легко перехватить cookie других пользователей и использовать их на соответствующих веб-сайтах[36]., для того, чтобы гарантировать передачу cookie только через https-сессию, cookie должны иметь атрибут secure., другой способ кражи cookie — межсайтовый скриптинг и несанкционированная отправка cookie на серверы, которые не должны получать их. современные браузеры могут исполнять фрагменты кода, полученные с сервера. если cookie доступны во время этого исполнения, их содержимое может в той или иной форме оказаться на серверах, которые не должны получать к ним доступ. шифрование cookie не поможет в этом случае[37]., следующий вид межсайтового скриптинга, как правило, используют на сайтах, где пользователям разрешено отправлять сообщения с html-содержимым. при вставке соответствующего php/javascript-кода в сообщение атакующий может получить cookie других пользователей., эти атаки можно предотвратить установкой флага httponly[38], делающего cookie недоступными для скриптов со стороны клиента. тем не менее, веб-разработчики должны предусматривать защиту от межсайтового скриптинга на стадии разработки веб-сайтов[39]., хотя теоретически cookie должны сохраняться и отправляться назад на сервер неизменными, злоумышленник может изменить их содержимое перед отправкой. к примеру, cookie могут содержать общую сумму, которую пользователь должен уплатить за свои покупки; изменив это значение, злоумышленник сможет заплатить меньше установленной суммы. процесс изменения содержимого cookie называется подменой cookie., для защиты от подобных атак большинство веб-сайтов хранит в cookie лишь идентификатор сессии — случайно сгенерированное число или набор символов, используемое для определения сессии, в то время как вся другая информация хранится на сервере. в этом случае подмена cookie значительно затрудняется., каждый сайт должен иметь свои собственные cookie, и сайт example1.com не должен изменять или устанавливать cookie другого сайта example2.org. уязвимости веб-браузеров позволяют вредоносным сайтам нарушать это правило. это похоже на подмену cookie, но здесь злоумышленник атакует пользователей с уязвимыми браузерами, а не сайт напрямую. целью таких атак могут быть идентификаторы сессий., для защиты пользователям рекомендуется использовать последние версии браузеров, в которых эта проблема исправлена., cookie могут вызвать противоречия между клиентом и сервером. если пользователь получает cookie, а затем нажимает кнопку «назад» в браузере, то состояние браузера уже другое по сравнению с моментом получения cookie. для примера возьмём электронный магазин с корзиной покупок, основанной на применении cookie: пользователь добавляет покупку в корзину, затем нажимает кнопку «назад», но покупка остаётся в корзине, хотя пользователь, возможно, хотел отменить покупку. это может привести к путанице и ошибкам. веб-разработчики должны помнить об этом и принимать меры для решения таких ситуаций., постоянные cookie критикуются экспертами за свой долгий срок хранения, который позволяет веб-сайтам отслеживать пользователей и создавать их профиль с течением времени[40]. здесь затрагиваются и вопросы безопасности, поскольку украденные постоянные cookie могут использоваться на протяжении значительного периода времени., кроме того, правильно составленная вредоносная программа, которая может быть запущена после аутентификации пользователя, сможет перенести сессионные cookie на компьютер злоумышленника, что в первом приближении позволит посещать защищённый сайт без ввода имени пользователя и пароля сколь угодно долгое время., обычные cookie имеют хоть и очень большой, но ограниченный «срок жизни», после чего удаляются. кроме того, любые cookie в браузере можно удалить с помощью специальной опции. в результате браузер перестаёт идентифицировать посетителя при повторном заходе на сайт. польский специалист сэмми камкар решил систематизировать наиболее «живучие» cookie, в результате чего появилась javascript-библиотека под названием everycookie. такие чудо-cookie теоретически позволяют идентифицировать любого посетителя сайта при его возвращении на страницу. сайт, использующий библиотеки everycookie, без труда обходит все меры по сохранению анонимности (хотя некоторые антивирусы могут определять такие сайты как опасные). для защиты от everycookie рекомендуется использование режима private browsing либо специальных программ, таких, как mil shield., файлы cookie были изначально представлены, чтобы предоставить пользователям возможность записывать товары, которые они хотят приобрести, когда они перемещаются по веб-сайту (виртуальная «корзина покупок» или «корзина покупок»)[41][42]. однако сегодня содержимое корзины покупок пользователя обычно хранится в базе данных на сервере, а не в файле cookie о клиенте. чтобы отслеживать, какой пользователь относится к какой корзине покупок, сервер отправляет клиенту файл cookie, содержащий уникальный идентификатор сеанса (обычно длинную строку случайных букв и цифр). поскольку файлы cookie отправляются на сервер при каждом запросе клиента, этот идентификатор сеанса будет отправляться обратно на сервер каждый раз, когда пользователь посещает новую страницу на веб-сайте, которая позволяет серверу узнать, какую корзину покупок отобразить пользователю., другое популярное использование cookie — для входа на веб-сайты. когда пользователь посещает страницу входа на веб-сайт, веб-сервер обычно отправляет клиенту файл cookie, содержащий уникальный идентификатор сеанса. когда пользователь успешно входит в систему, сервер запоминает, что этот конкретный идентификатор сеанса был аутентифицирован, и предоставляет пользователю доступ к его услугам., поскольку cookie-файлы сеанса содержат только уникальный идентификатор сеанса, это делает объём личной информации, которую веб-сайт может сохранить о каждом пользователе, практически неограниченным — веб-сайт не связан ограничениями, касающимися размера файла cookie. сеансовые cookie-файлы также помогают сократить время загрузки страницы, поскольку объём информации в сессионном cookie-файле невелик и требует небольшой полосы пропускания., файлы cookie могут использоваться для запоминания информации о пользователе, чтобы со временем показывать ему соответствующий контент. например, веб-сервер может отправить файл cookie, содержащий имя пользователя, которое в последний раз использовалось для входа на веб-сайт, чтобы он мог автоматически заполняться при следующем входе пользователя в систему., многие веб-сайты используют cookie для персонализации в соответствии с предпочтениями пользователя. пользователи выбирают свои предпочтения, вводя их в веб-форму и отправляя форму на сервер. сервер кодирует настройки в cookie и отправляет cookie обратно в браузер. таким образом, каждый раз, когда пользователь получает доступ к странице на веб-сайте, сервер может персонализировать страницу в соответствии с предпочтениями пользователя. например, поисковая система google однажды использовала cookie, чтобы позволить пользователям (даже незарегистрированным) решать, сколько результатов поиска на странице они хотят видеть., файлы cookie используются для отслеживания привычек пользователей в интернете. это также можно сделать в некоторой степени, используя ip-адрес компьютера, запрашивающего страницу, или поле referer заголовка http-запроса, но cookie-файлы позволяют повысить точность. это можно продемонстрировать, если пользователь запрашивает страницу сайта, но запрос не содержит cookie, сервер предполагает, что это первая страница, которую посетил пользователь. таким образом, сервер создаёт уникальный идентификатор (обычно последовательность случайных букв и цифр) и отправляет его в виде файла cookie в браузер вместе с запрашиваемой страницей., с этого момента cookie будет автоматически отправляться браузером на сервер каждый раз, когда запрашивается новая страница с сайта. сервер не только отправляет страницу как обычно, но также сохраняет url запрошенной страницы, дату / время запроса и файл cookie в файле журнала., анализируя этот файл журнала, можно определить, какие страницы посетил пользователь, в какой последовательности и как долго., некоторые операции, для которых используются cookie, могут быть реализованы с помощью других механизмов. тем не менее, эти альтернативы имеют свои недостатки, которые делают cookie порой более предпочтительными на практике. большинство этих альтернатив позволяет отслеживать пользователя, хотя и менее надёжным способом, чем cookie. как результат, неприкосновенность частной жизни остаётся под угрозой, даже если cookie отключены браузером или не устанавливаются сервером., этот ненадёжный метод отслеживания пользователей основан на хранении ip-адресов компьютеров, просматривающих страницы. данная техника доступна с самого появления world wide web, которая требует знания ip-адреса клиента для загрузки страницы. эту информацию можно хранить на сервере вне зависимости от того, используются cookie или нет., тем не менее этот способ менее надёжен, чем cookie, поскольку компьютеры и прокси могут совместно использоваться несколькими пользователями, а один компьютер может использовать разные ip-адреса в разных сессиях (динамический ip-адрес)., отслеживание по ip-адресу может оказаться невозможным и при использовании систем сохранения анонимности (например, tor). в таких системах один браузер может иметь несколько ip-адресов, и несколько пользователей могут использовать один ip-адрес, в результате чего отслеживание ip-адреса не представляется возможным., некоторые крупные провайдеры, включая aol, пропускают весь веб-трафик через сеть прокси[источник не указан 4278 дней], что также делает этот метод неосуществимым., более прогрессивная методика основана на встраивании данных в url. обычно для этого используется строка запроса, но так же могут задействоваться и другие части url. языки javascript и php активно используют эти механизмы при отключённых cookie., веб-сервер добавляет строку запроса к ссылке на веб-страницу при её отправке в браузере. когда пользователь переходит по ссылке, браузер возвращает строку запроса серверу., в этом плане строка запроса и cookie очень схожи: они являются фрагментами информации сервера, возвращаемой обратно браузером. но есть и определённые различия: так как строка запроса является частью url, то при повторном использовании этого url на сервер передастся та же информация. например, если опции пользователя кодированы в строке запроса url, и пользователь отправляет этот url другому пользователю, эти опции будут действовать и для другого пользователя., более того, даже если пользователь повторно обращается к одной и той же странице, нет никакой гарантии, что строка запроса останется неизменной. например, при переходе с внутренних страниц сайта и с внешних поисковых систем строки запроса будут разными, тогда как cookie оставались бы одинаковыми., другой недостаток строки запроса проявляется в вопросах безопасности: хранение идентификатора сессии в строке запроса упрощает проведение атаки. передача идентификатора в cookie более безопасна., одним из способов отслеживания сессии с помощью выполняемой на стороне сервера программы является использование веб-форм со скрытыми полями. этот метод очень похож на строку запроса url и обладает почти теми же преимуществами и недостатками, а если параметры формы отправляются http-методом get, то поля фактически станут частью url, который браузер отправит на сервер. но большинство форм обрабатывается http post, при которой информация не является ни частью url, ни cookie., этот подход даёт два преимущества в вопросе отслеживания: во-первых, вставка информации в html-код и в post, а не в url, означает, что средний пользователь её просто не заметит, во-вторых, информация сессии не копируется с копированием url (например, когда пользователь отправляет ссылку по электронной почте). недостаток метода состоит в том, что информация сессии содержится в html-коде, поэтому веб-страница должна генерироваться каждый раз, когда её запрашивают, что увеличивает нагрузку на веб-сервер., протокол http включает в себя базовую аутентификацию и шифрование, которые разрешают доступ к странице, только когда пользователь введёт правильное имя пользователя и пароль. если сервер запрашивает подобное, то браузер обращается к пользователю и, получив нужные данные, сохраняет и использует их для доступа к другим страницам, не требуя от пользователя вводить их заново. с точки зрения пользователя эффект тот же, что и при использовании cookie: имя пользователя и пароль требуются лишь однажды, и потом пользователь получает доступ к сайту. при базовой аутентификации сочетание имени пользователя и пароля отправляется на сервер при каждом запросе браузера в незашифрованном виде. это означает, что если кто-то перехватывает трафик, он сможет получить эту информацию и впоследствии использовать. при шифрованной аутентификации имя пользователя и пароль шифруются со случайным ключом, созданным сервером., некоторые веб-браузеры позволяют странице сохранять информацию локально для последующего извлечения. internet explorer, например, поддерживает сохранение информации в истории, избранном, xml-хранилище, или позволяет провести прямое сохранение веб-страницы на диск[43]., json web token (jwt) — это автономный пакет информации, который можно использовать для хранения информации о личности и подлинности пользователя. это позволяет использовать их вместо файлов cookie сеанса. в отличие от файлов cookie, которые автоматически присоединяются к каждому http-запросу браузером, jwt должны быть явно присоединены веб-приложением к каждому http-запросу., все современные веб-браузеры могут хранить довольно большой объём данных (2-32 мб) через javascript, используя свойство dom window.name. эти данные могут использоваться вместо файлов cookie сеанса и также являются междоменными. техника может быть объединена с объектами json / javascript для хранения сложных наборов переменных сеанса[44] на стороне клиента., веб-кэш также может использоваться для хранения информации, которая может использоваться для отслеживания отдельных пользователей. этот метод использует преимущество того факта, что веб-браузер будет использовать ресурсы, хранящиеся в кэше, вместо загрузки их с веб-сайта, когда он определит, что в кэше уже установлена ​​самая последняя версия ресурса., например, страница может содержать ссылку <script type="text/javascript" src="example.js">. скрипт устанавливает уникальный идентификатор для пользователя (например, var userid = 3243242;). после первоначального посещения каждый раз, когда пользователь заходит на страницу, этот файл будет загружаться из кэша, а не загружаться с сервера. таким образом, его содержание никогда не изменится., единственное преимущество этого способа — межсайтовая работа, что позволяет несанкционированно следить за пользователем. недостатки — нетривиальная передача этой информации на сервер и крайняя неуправляемость: браузер может потерять закэшированные данные когда угодно в зависимости от настроек, объёма памяти и дискового места. mozilla firefox 85+ не допускает межсайтового слежения через кэш[45]., большинство современных браузеров поддерживают cookie и позволяют пользователю отключать их. ниже приведены общие варианты[46]:][cookie, содержание, назначение[править | править код], понятие[править | править код], история[править | править код], типы cookie[править | править код], сессионные cookie[править | править код], постоянные cookie[править | править код], сторонние cookie[править | править код], супер-cookie[править | править код], зомби-cookie[править | править код], параметры cookie[править | править код], работа cookie[править | править код], установка cookie[править | править код], аутентификация[править | править код], настройка браузера[править | править код], приватность и сторонние cookie[править | править код], недостатки cookie[править | править код], неточная идентификация[править | править код], кража cookie[править | править код], подмена cookie[править | править код], межсайтовые cookie[править | править код], нестабильность между клиентом и сервером[править | править код], срок действия cookie[править | править код], использование cookie[править | править код], управление сессиями[править | править код], персонализация[править | править код], отслеживание[править | править код], альтернативы cookie[править | править код], ip-адрес[править | править код], url (строка запроса)[править | править код], скрытые поля формы[править | править код], http-аутентификация[править | править код], сохранение на клиентской стороне[править | править код], веб-токены json[править | править код], dom window.name[править | править код], кэш браузера[править | править код], настройки браузера[править | править код], см. также[править | править код], примечания[править | править код], ссылки[править | править код], навигация, поиск]cookie — википедия[][аутентификации пользователя;, хранения персональных предпочтений и настроек пользователя;, отслеживания состояния сеанса доступа пользователя;, сведения статистики о пользователях., 1 назначение, 2 понятие, 3 история, 4 типы cookie 4.1 сессионные cookie 4.2 постоянные cookie 4.3 сторонние cookie 4.4 супер-cookie 4.5 зомби-cookie, 4.1 сессионные cookie, 4.2 постоянные cookie, 4.3 сторонние cookie, 4.4 супер-cookie, 4.5 зомби-cookie, 5 параметры cookie, 6 работа cookie 6.1 установка cookie 6.2 аутентификация, 6.1 установка cookie, 6.2 аутентификация, 7 настройка браузера, 8 приватность и сторонние cookie, 9 недостатки cookie 9.1 неточная идентификация 9.2 кража cookie 9.3 подмена cookie 9.4 межсайтовые cookie 9.5 нестабильность между клиентом и сервером 9.6 срок действия cookie, 9.1 неточная идентификация, 9.2 кража cookie, 9.3 подмена cookie, 9.4 межсайтовые cookie, 9.5 нестабильность между клиентом и сервером, 9.6 срок действия cookie, 10 использование cookie 10.1 управление сессиями 10.2 персонализация 10.3 отслеживание, 10.1 управление сессиями, 10.2 персонализация, 10.3 отслеживание, 11 альтернативы cookie 11.1 ip-адрес 11.2 url (строка запроса) 11.3 скрытые поля формы 11.4 http-аутентификация 11.5 сохранение на клиентской стороне 11.6 веб-токены json 11.7 dom window.name 11.8 кэш браузера, 11.1 ip-адрес, 11.2 url (строка запроса), 11.3 скрытые поля формы, 11.4 http-аутентификация, 11.5 сохранение на клиентской стороне, 11.6 веб-токены json, 11.7 dom window.name, 11.8 кэш браузера, 12 настройки браузера, 13 см. также, 14 примечания, 15 ссылки, internet explorer 6 — 20, internet explorer 7 — 20, opera 9 — 30, firefox 2.0 — 50, google chrome 58.0 — 176, safari 10.0 — 242, name устанавливает имя cookie-файла., value сохраняет значение cookie, которое будет идентифицировать пользователя или содержать служебную информацию., expires и max-age определяют срок жизни cookie, по истечении которого она будет автоматически удалена. если не указать этот параметр, или установить его значение в ноль, то cookie будут автоматически удалены при закрытии браузера. для параметра expires указывается конечная дата в формате tue, 01-sep-2020 10:50:22 gmt, тогда как для max-age устанавливается количество секунд жизни cookie с момента установки её в браузер., path указывает путь к директории на сервере, для которой будут доступны cookie. если указать корневой каталог /, то cookie будут доступны всему домену. по умолчанию значением является текущая директория, из которой cookie устанавливаются в браузер., domain отмечает, какой домен или поддомен имеет доступ к этой cookie. для того, чтобы сделать cookie доступными для всего домена (включая поддомены), нужно просто указать имя домена (например example.com)., secure параметр указывает браузеру, что cookie должны передаваться на сервер только по защищённому https-соединению., httponly параметр запрещает доступ к cookie посредством api document.cookie. эта возможность была предложена в качестве меры для эффективного предотвращения краж cookie посредством xss-атак., samesite это относительно новый параметр (определённый в rfc 6265bis), который сообщает браузерам, что cookie не должны отсылаться с межсайтовыми запросами. это в некотором роде обеспечивает защиту от межсайтовых подделок запроса (csrf). у этого параметра есть три состояния, которые определяют поведение cookie для различных сценариев пользования сайтом. samesite=none прямо указывает, что на передачу cookie-файлов не накладывается никаких ограничений. samesite=lax разрешает передачу cookie только безопасными http-методами, которыми, согласно rfc 7231, являются get, head, options и trace. samesite=strict или просто samesite является самым строгим вариантом безопасности и блокирует отправку cookie с любыми запросами от других ресурсов. cookie будут передаваться только в пределах того домена, с которого они и были установлены., samesite=none прямо указывает, что на передачу cookie-файлов не накладывается никаких ограничений., samesite=lax разрешает передачу cookie только безопасными http-методами, которыми, согласно rfc 7231, являются get, head, options и trace., samesite=strict или просто samesite является самым строгим вариантом безопасности и блокирует отправку cookie с любыми запросами от других ресурсов. cookie будут передаваться только в пределах того домена, с которого они и были установлены., cookie с префиксом __secure- должны устанавливаться: с параметром secure; через безопасное https-соединение., с параметром secure;, через безопасное https-соединение., cookie с префиксом __host- должны устанавливаться: с параметром secure; через безопасное https-соединение. без параметра domain; с параметром path=/., с параметром secure;, через безопасное https-соединение., без параметра domain;, с параметром path=/., пользователь вводит имя пользователя и пароль в текстовых полях страницы входа и отправляет их на сервер., сервер получает имя пользователя и пароль, проверяет их и, при их правильности, отправляет страницу успешного входа, прикрепив cookie с неким идентификатором сессии. эта cookie может быть действительна не только для текущей сессии браузера, но может быть настроена и на длительное хранение., каждый раз, когда пользователь запрашивает страницу с сервера, браузер автоматически отправляет cookie с идентификатором сессии серверу. сервер проверяет идентификатор по своей базе идентификаторов и, при наличии в базе такого идентификатора, «узнаёт» пользователя., полное отключение cookie., удаление cookie при закрытии браузера., различение сторонних cookie с третьей стороны и соответствующее обращение с ними (например, ограничение или запрет для них)., обработка cookie на основе «белого» и/или «чёрного» списков, обновляемых пользователем или изготовителем браузера. cookie из «чёрного списка» блокируются., запрет cookie от определённых доменов (разновидность «чёрного списка»)., установка разумных сроков истечения cookie., пользователю предоставляется информация о том, как эти данные используются;, пользователь имеет возможность отказаться от этого., , полностью включить или отключить cookie, чтобы они всегда были приняты или всегда блокировались., для просмотра и выборочного удаления файлов cookie используется менеджер файлов cookie., чтобы полностью стереть все личные данные, в том числе cookie., по умолчанию internet explorer разрешает сторонние cookie только в том случае, если они сопровождаются p3p-полем «cp» (компактная политика)[47]., magic cookie, web storage, локальные общие объекты, браузер, json web token, floc[en] (federated learning of cohorts) — перспективная замена куки[48], ↑ 1 2 3 faq по куки (англ.) (недоступная ссылка). microsoft. дата обращения: 12 августа 2008. архивировано 26 августа 2011 года., ↑ проблемы с работой интернет-магазина (неопр.) (недоступная ссылка). ozon.ru. дата обращения: 12 августа 2008. архивировано 14 сентября 2008 года., ↑ справочный центр, веб-поиск (неопр.) (недоступная ссылка). google. дата обращения: 12 августа 2008. архивировано 26 августа 2011 года., ↑ киви берд. целевая реклама - угроза приватности? (неопр.) (недоступная ссылка). компьютерра. дата обращения: 12 августа 2008. архивировано 5 апреля 2013 года., ↑ netscape. предварительная спецификация куки (англ.) (txt) (недоступная ссылка). дата обращения: 7 августа 2008. архивировано 26 августа 2011 года., ↑ 1 2 rfc 2109 и rfc 2965 — механизм управления состояниями http (ietf), ↑ андрей аликберов. что такое cookies и как с ними работать (неопр.) (недоступная ссылка) (1998). дата обращения: 2 августа 2008. архивировано 1 сентября 2011 года., ↑ john schwartz. giving web a memory cost its users privacy (англ.) (недоступная ссылка). new york times (4 сентября 2001). дата обращения: 7 августа 2008. архивировано 26 августа 2011 года., ↑ netscape communications представляют новый сетевой бесплатной интернет-навигатор (англ.) (недоступная ссылка). cnet networks (13 октября 1994). дата обращения: 7 августа 2008. архивировано 26 августа 2011 года., ↑ марк андреассен. мир, вот он! (англ.) (13 октября 1994). — сообщение на usenet. дата обращения: 7 августа 2008. архивировано 2 декабря 2007 года., ↑ сэнди хардмайер. история internet explorer (англ.) (недоступная ссылка). microsoft (25 августа 2005). дата обращения: 7 августа 2008. архивировано 26 августа 2011 года., ↑ роджер кларк. куки (англ.) (недоступная ссылка) (1 июня 1998). дата обращения: 7 августа 2008. архивировано 26 августа 2011 года., ↑ "maintaining session state with cookies" (неопр.). microsoft developer network (22 october 2012). дата обращения: 31 марта 2018. архивировано 1 апреля 2018 года., ↑ third party domains (неопр.). webcookies.org.. дата обращения: 17 марта 2019. архивировано 1 июля 2019 года., ↑ number of cookies (неопр.). webcookies.org. дата обращения: 17 марта 2019. архивировано 1 июля 2019 года., ↑ learn more about the public suffix list (неопр.). publicsuffix.org (2016). дата обращения: 17 марта 2019. архивировано 14 мая 2016 года., ↑ mayer, jonathan. tracking the trackers: microsoft advertising (неопр.). the center for internet and society (2011). дата обращения: 22 марта 2019. архивировано 22 марта 2019 года., ↑ vijayan, jaikumar. microsoft disables 'supercookies' used on msn.com visitors (неопр.) (2014). дата обращения: 22 марта 2019. архивировано 22 марта 2019 года., ↑ cookie prefixes sample (неопр.). googlechrome.github.io. дата обращения: 2 сентября 2019. архивировано 2 сентября 2019 года., ↑ duct tape and baling wire–cookie prefixes (англ.). text/plain (9 октября 2015). дата обращения: 2 сентября 2019. архивировано 2 сентября 2019 года., ↑ росс шэннон. куки и javascript (англ.) (недоступная ссылка) (26 февраля 2007). дата обращения: 7 августа 2008. архивировано 26 августа 2011 года., ↑ куки и авторизация (англ.) (недоступная ссылка). msdn. дата обращения: 13 августа 2008. архивировано 26 августа 2011 года., ↑ поддержка веб-браузеров (англ.) (недоступная ссылка). университет буффало (15 ноября 2004). дата обращения: 13 августа 2008. архивировано 14 сентября 2005 года., ↑ 1 2 дэвид уолен. неофициальный faq по куки (англ.) (недоступная ссылка) (6 августа 2002). дата обращения: 8 августа 2008. архивировано 26 августа 2011 года., ↑ joanna geary. tracking the trackers: what are cookies? an introduction to web tracking (неопр.). the guardian (23 april 2012). дата обращения: 28 сентября 2018. архивировано 27 июня 2017 года., ↑ brian quinton. users don't understand, can't delete cookies (англ.) (недоступная ссылка) (18 мая 2005). дата обращения: 7 августа 2008. архивировано 26 августа 2011 года., ↑ доклад по проблеме безопасности при использовании «куки» (англ.) = bittersweet cookies. some security and privacy considerations // европейское агентство по безопасности сетей и информационной безопасности (enisa). — 2011., ↑ цру поймано на краже куки (англ.) (недоступная ссылка). cbs news (20 марта 2002). дата обращения: 8 августа 2008. архивировано 26 августа 2011 года., ↑ агентство удаляет незаконные файлы слежения (англ.) (недоступная ссылка). associated press (29 декабря 2005). дата обращения: 8 августа 2008. архивировано 26 августа 2011 года., ↑ директива о неприкосновенности частной жизни и электронных коммуникаций (англ.) (недоступная ссылка) (12 июля 2002). дата обращения: 8 августа 2008. архивировано 26 августа 2011 года., ↑ директива 2009/136/ec от 25 ноября 2009 г. (англ.). дата обращения: 6 июня 2017. архивировано 19 июня 2017 года., ↑ рабочая группа статьи 29 - позиция 04/2012 от 7 июня 2012 об исключении из требования о получении согласия в отношении cookie файлов (англ.). дата обращения: 6 июня 2017. архивировано 21 июля 2017 года., ↑ proposal for an eprivacy regulation (англ.). дата обращения: 6 июня 2017. архивировано 29 сентября 2018 года., ↑ елена неб. новые правила работы с персональными данными европейцев (неопр.). texterra.ru (26 июня 2018). дата обращения: 28 сентября 2018. архивировано 28 сентября 2018 года., ↑ настройки куки в opera 9 (англ.) (недоступная ссылка). дата обращения: 8 августа 2008. архивировано 26 августа 2011 года., ↑ wi-fi взлом веб-почты (англ.) (недоступная ссылка). bbc news (3 августа 2007). дата обращения: 8 августа 2008. архивировано 26 августа 2011 года., ↑ на что похожа xss-кража куки? (англ.) (недоступная ссылка). cgisecurity.com (май 2002). дата обращения: 8 августа 2008. архивировано 26 августа 2011 года., ↑ снижение опасности межсайтового скриптинга с помощью http-only куки (англ.) (недоступная ссылка). microsoft. дата обращения: 8 августа 2008. архивировано 13 августа 2011 года., ↑ майкл ховард; кит браун. 10 советов по защите кода (англ.) (недоступная ссылка). microsoft (2000). дата обращения: 8 августа 2008. архивировано 26 августа 2011 года., ↑ элинор милз. google снижает срок хранения куки для повышения безопасности (англ.) (недоступная ссылка). cnet networks (16 июля 2007). дата обращения: 8 августа 2008. архивировано 26 августа 2011 года., ↑ kesan, jey; and shah, rajiv. deconstructing code., ↑ david kristol. http cookies: standards, privacy, and politics. — acm transactions on internet technology. — 2001. — с. 151–198., ↑ введение в хранение (англ.) (недоступная ссылка). msdn. дата обращения: 8 августа 2008. архивировано 26 августа 2011 года., ↑ thomasfrank.se (неопр.). thomasfrank.se (22 мая 2010). дата обращения: 22 марта 2019. архивировано 23 марта 2019 года., ↑ firefox 85 cracks down on supercookies — mozilla security blog (неопр.). дата обращения: 9 марта 2021. архивировано 3 февраля 2021 года., ↑ david whalen. the unofficial cookie faq v2.6 (неопр.) (2002). дата обращения: 24 июля 2008. архивировано 26 августа 2011 года., ↑ 3rd-party cookies, dom storage and privacy : matt mastracci's blog (неопр.). grack.com (2010). дата обращения: 22 марта 2019. архивировано 19 августа 2018 года., ↑ всё больше компаний выступают против технологии google floc, которая должна прийти на смену файлам cookie архивная копия от 28 апреля 2021 на wayback machine разработчики браузеров отказались от технологии таргетирования google на замену cookie архивная копия от 28 апреля 2021 на wayback machine [1] архивная копия от 28 апреля 2021 на wayback machine, книги в викиучебнике, медиафайлы на викискладе, rfc 6265 (англ.) — текущая официальная спецификация для cookie, rfc 2964 (англ.) — «использование механизмов управления состоянием http-сессии», rfc 2965 (англ.) — «механизмы контроля состояния http-сессии. новая ревизия. http-cookies 2», что такое cookies и как с ними работать, постоянное соединение, http pipelining, сжатие[en], https, http/2, http/3, options, get, head, post, put, delete, trace, connect, patch, cookie, etag, referer, http location, do not track[en], x-forwarded-for[en], 1xx: informational, 2xx: success, 3xx: redirection 301: moved permanently, 301: moved permanently, 4xx: client error 404: not found 451: unavailable for legal reasons, 404: not found, 451: unavailable for legal reasons, 5xx: server error, веб-программирование, интернет, протокол http, история интернета, стандарты интернета, всемирная паутина, википедия:cite web (не указан язык), страницы, использующие волшебные ссылки rfc, википедия:нет источников с августа 2010, википедия:статьи без источников (тип: не указан), википедия:статьи с утверждениями без источников более 14 дней, википедия:ссылка на викиучебник непосредственно в статье, статьи со ссылками на викисклад, вы не представились системе, обсуждение, вклад, создать учётную запись, войти, статья, обсуждение, читать, править, править код, история, заглавная страница, содержание, избранные статьи, случайная статья, текущие события, пожертвовать, сообщить об ошибке, как править статьи, сообщество, форум, свежие правки, новые страницы, справка, ссылки сюда, связанные правки, служебные страницы, постоянная ссылка, сведения о странице, цитировать страницу, элемент викиданных, создать книгу, скачать как pdf, версия для печати, викисклад, afrikaans, العربية, azərbaycanca, беларуская (тарашкевіца), български, भोजपुरी, català, čeština, dansk, deutsch, ελληνικά, english, esperanto, español, eesti, euskara, فارسی, suomi, français, galego, עברית, हिन्दी, hrvatski, magyar, bahasa indonesia, íslenska, italiano, 日本語, 한국어, кыргызча, limburgs, lombard, lietuvių, latviešu, മലയാളം, монгол, bahasa melayu, မြန်မာဘာသာ, nedersaksies, nederlands, norsk nynorsk, norsk bokmål, polski, português, română, scots, srpskohrvatski / српскохрватски, simple english, slovenčina, slovenščina, shqip, српски / srpski, svenska, kiswahili, ไทย, türkçe, українська, tiếng việt, 吴语, ייִדיש, 中文, 粵語, эта страница в последний раз была отредактирована 6 мая 2022 в 13:30., текст доступен по лицензии creative commons attribution-sharealike; в отдельных случаях могут действовать дополнительные условия. подробнее см. условия использования. wikipedia® — зарегистрированный товарный знак некоммерческой организации wikimedia foundation, inc., политика конфиденциальности, описание википедии, отказ от ответственности, свяжитесь с нами, мобильная версия, разработчики, статистика, заявление о куки, , ]