[, , app actions allow users to launch functionality in your android app by asking google assistant, or by using android shortcuts suggested by assistant. these are the primary steps to extending your android app with app actions:, you can optionally define dynamic shortcuts to provide to assistant so it can suggest them to your users. try creating an app action using a sample app, by following the app actions codelab., before you start developing app actions, meet the following requirements:, start by identifying the functionality in your android app that users may want to jump to directly with a spoken request. you can do this by finding built-in intents that match your app's core capabilities. review the built-in intent reference to find appropriate biis for your use cases. built-in intents model user queries for tasks they want to perform in your app, so look for biis that match key functionality and user flows in your app., there are common biis that almost any android app can use, such as extending your native in-app search to assistant with the actions.intent.get_thing bii, or enabling users to launch specific app features with their voice by implementing the actions.intent.open_app_feature bii. there are also a number of bii that enable vertical, or category-specific, use cases. for example, a food ordering app might use the actions.intent.order_menu_item bii. to ensure a great user experience and avoid possible approval delays, make sure that each bii you implement is relevant to your in-app functionality., app actions work by starting android intents from the assistant app to take users directly to specific content in your app. you can define these intents to launch an activity explicitly by specifying the targetclass and targetpackage fields. if your app already implements android deep link urls, you have the option to configure the intent to use a deep link for fulfillment. for more details, see test your activity deep links., most of building an app action is declaring a capability in the shortcuts.xml resource file of your android app, where you specify your selected bii and their corresponding fulfillment. a bii models the user query for a task, and a fulfillment intent provides assistant with information on how to perform the task., in your shortcuts.xml file, built-in intents are represented as <capability> elements and each fulfillment is represented as an <intent> element:, for most bii, you extract intent parameters from the user query based on schema.org entities. your app then uses those bii parameters to direct users to the desired functionality. for example, the above code maps the menuitem.name bii parameter to the query android intent parameter., if you are fulfilling actions using deep links, you use the urltemplate field to define the deep link url assistant generates:, for important details about adding app actions to the shortcuts.xml file, reference create shortcuts.xml. the schema page also describes how to specify parameter values your app expects., if your app has a search function, you are required to implement the actions.intent.get_thing bii for that function. assistant can then forward users to your app's search function for in-app results when they make queries like "hey google, search for examplething on exampleapp."., in your shortcuts.xml file, implement a <capability> for the actions.intent.get_thing bii as you would implement any other bii. you can use multiple fulfillments for get_thing as long as you provide at least one fulfillment that passes the user query to your app's search function., here's an example of adding the actions.intent.get_thing bii in shortcuts.xml:, in your search activity, extract the search query from the extra data of the intent and pass it to your app's search function. in the above code, the search query (passed as the query key) maps to the "thing.name" bii parameter. then, perform a search with the query and display the results in the user interface., once you've defined a capability for your action, users can easily launch your action by saying something like, "hey google, order a pizza on exampleapp." assistant can suggest android shortcuts for your actions to users at relevant times, making it easy for them to discover and replay your actions. assistant can suggest both dynamic and static shortcuts. to push dynamic shortcuts to assistant, use the google shortcuts integration library. this jetpack library enables assistant to ingest your shortcuts, and suggest them to users at the appropriate time., for more details, see push dynamic shortcuts to assistant., during development and testing, use the google assistant plugin for android studio to test that app actions work for your app. the plugin creates a preview of your app actions in assistant (for your google account). using the test tool, you can test your fulfillments on a physical test device or emulator by providing biis with input parameters you expect to receive from users., while previewing your app actions, you can also trigger queries by voice on the device itself. this functionality is only available for queries listed in the built-in intents reference for app actions. we recommend that you use voice triggering only for demonstration purposes rather than for regular testing., you can also use a draft version of the app for testing using the developer tools for the google play console. for more information on using google play console to deploy a draft of your app, see prepare and release rollout. we highly encourage you to test your app in draft mode before submitting it for review., create an internal or closed test release of your app when you're ready to test your app actions with additional testers. by default, your internal and closed release testers can access app actions that have already been reviewed and approved., to grant testing access to all app actions, including unapproved actions, instruct your testers to join the app actions development program google group. by joining this group, your testers have access to all app actions in your closed and internal test releases without having to create previews using the app actions test tool. it may take up to 3 hours after joining the group for access to become available., app actions won't be available to users of your published or open test releases until they've been reviewed and approved. the app actions review does not affect your android app review and deployment status in google play. even if your app submission is approved and published to the play store, your shortcuts.xml may still be under review by google. app actions will not work for your end users until that review is also approved., when you subsequently deploy your app, app actions stay activated. however, redeployed versions are subject to review by google. if the new version is not working properly or contains policy violations, google reserves the right to deactivate app actions for your app., to submit your app actions for review, do the following:, accept the actions on google terms of service in the google play console (pricing & distribution > consent):, , upload your app (containing actions.xml) to the google play console as normal for publishing., after you upload your app to the play console, we'll contact you at the email in play console with more information regarding the status of your app actions review. you can also contact actions on google developer support with questions regarding your app actions review status. in the contact form, provide your app package id and choose "app action review" in the how can we help you? selection box., activities you wish to launch with app actions using android deep links must be set up with deep link urls, and have a corresponding intent filters in the android app manifest., to test that your activities are accessible and that they can be triggered using app actions using deep links, run the following adb command:, for example:, if your activity doesn't launch correctly with the adb command, then check the following:, except as otherwise noted, the content of this page is licensed under the creative commons attribution 4.0 license, and code samples are licensed under the apache 2.0 license. for details, see the google developers site policies. java is a registered trademark of oracle and/or its affiliates., last updated 2022-04-20 utc.][build app actions, requirements, match built-in intents with app functionality, provide fulfillment details for built-in intents, implement the get_thing built-in intent, push shortcuts for your app action to assistant (optional), preview your app actions, create a test release, request app actions review and deployment, test your activity deep links (optional), more information, programs, developer consoles]build app actions  |  google developers[caution:, home, note:, important:, note:, note:, note:, note:, pricing & distribution > consent, how can we help you?, note:, policy > app content, app access, note:][google assistant, ways to build, overview learn all the ways to build actions., extend your mobile app provide faster ways for users to access your android app via assistant., build rich and natural conversations build custom voice and visual experiences for smart devices., enhance your web presence present your content in rich ways for google search and assistant., connect your smart home devices let users control lights, doors, coffee machines, and many other devices., get inspired, why build help users find answers and get things done with google assistant., reach 1 billion devices help users at home, on the go, and in the car—on over 1 billion devices., build games build fun, voice-enabled games for smart displays., explore all actions see what others are building for google assistant., get discovered publish your actions to the assistant directory., mobile, app actions, android slices, assistant sharing, read it, content, schema.org web markup, smart home devices, overview, device types and traits, local home sdk, experimental devices, assistant sdk, conversational, overview, fundamentals, build, interactive canvas, user engagement, transactions, account linking, console, overview, localization, analytics, policies, go to console, language, english, bahasa indonesia, deutsch, español, français, português – brasil, русский, 中文 – 简体, 日本語, 한국어, app actions, google assistant, actions on google more, more, docs more guides reference codelabs samples support, more, guides, reference, codelabs, samples, support, community, support, design, overview, build, overview, implement built-in intents, create shortcuts.xml, push dynamic shortcuts to assistant, release notes, test, google assistant plugin, grow, overview, in-app shortcut promo sdk, add more features, custom intents, android widgets, foreground app invocation, inline inventory, web inventory, assistant sharing, android slices, read it, actions.xml, actions.xml overview, build app actions, create actions.xml, web inventory, app actions test tool, troubleshooting, actions.xml migration guide, ways to build, overview, extend your mobile app, build rich and natural conversations, enhance your web presence, connect your smart home devices, get inspired, why build, reach 1 billion devices, build games, explore all actions, get discovered, mobile, app actions, android slices, assistant sharing, read it, content, schema.org web markup, smart home devices, overview, device types and traits, local home sdk, experimental devices, assistant sdk, conversational, overview, fundamentals, build, interactive canvas, user engagement, transactions, account linking, console, overview, localization, analytics, policies, go to console, home, products, google assistant, docs, app actions, guides, identify the in-app functionality to trigger and its matching built-in intent (bii)., provide fulfillment details for the built-in intent., push shortcuts for your app action to assistant., preview your app actions on a test device., create a test release of your app., request app actions review and deployment., have a google account with access to the google play console., app actions are only available for apps published to the google play store. also, make sure that your app is not intended to be used in a work profile, as app actions are not supported by managed google play., have a physical or virtual device on which to test your app actions., install the latest version of android studio., use the same google account to sign in to android studio, the google app on your test device, and the google play console., set up and test that assistant is working on your test device by long-pressing the home button., meet the app actions deployment requirements. these requirements help to optimize your app for assistant and ensure that users enjoy a seamless experience when using app actions., accept the actions on google terms of service in the google play console (pricing & distribution > consent):, upload your app (containing actions.xml) to the google play console as normal for publishing., after you upload your app to the play console, we'll contact you at the email in play console with more information regarding the status of your app actions review. you can also contact actions on google developer support with questions regarding your app actions review status. in the contact form, provide your app package id and choose "app action review" in the how can we help you? selection box., in your app manifest file, the activity has android:exported=true so it can be launched using intents from google assistant., if using app links urls, follow all the steps in handling android app links., more information google assistant why build for the assistant? how google assistant works assistant directory support community, google assistant, why build for the assistant?, how google assistant works, assistant directory, support, community, programs women techmakers google developer groups google developers experts accelerators google developer student clubs, women techmakers, google developer groups, google developers experts, accelerators, google developer student clubs, developer consoles google api console google cloud platform console google play console firebase console actions on google console cast sdk developer console chrome web store dashboard, google api console, google cloud platform console, google play console, firebase console, actions on google console, cast sdk developer console, chrome web store dashboard, android, chrome, firebase, google cloud platform, all products, terms, privacy, sign up for the google developers newsletter subscribe, language, english, bahasa indonesia, deutsch, español, français, português – brasil, русский, 中文 – 简体, 日本語, 한국어]