[in the previous post, we discussed analysis of loops. many algorithms are recursive in nature. when we analyze them, we get a recurrence relation for time complexity. we get running time on an input of size n as a function of n and the running time on inputs of smaller sizes. for example in merge sort, to sort a given array, we divide it in two halves and recursively repeat the process for the two halves. finally we merge the results. time complexity of merge sort can be written as t(n) = 2t(n/2) + cn. there are many other algorithms like binary search, tower of hanoi, etc. , there are mainly three ways for solving recurrences. , 1) substitution method: we make a guess for the solution and then we use mathematical induction to prove the guess is correct or incorrect. , 2) recurrence tree method: in this method, we draw a recurrence tree and calculate the time taken by every level of tree. finally, we sum the work done at all levels. to draw the recurrence tree, we start from the given recurrence and keep drawing till we find a pattern among levels. the pattern is typically a arithmetic or geometric series.   , 3) master method:  master method is a direct way to get the solution. the master method works only for following type of recurrences or for recurrences that can be transformed to following type.   , there are following three cases:  1. if f(n) = o(nc) where c < logba then t(n) = θ(nlogba) , 2. if f(n) = θ(nc) where c = logba then t(n) = θ(nclog n) , 3.if f(n) = ω(nc) where c > logba then t(n) = θ(f(n)), how does this work?  master method is mainly derived from recurrence tree method. if we draw recurrence tree of t(n) = at(n/b) + f(n), we can see that the work done at root is f(n) and work done at all leaves is θ(nc) where c is logba. and the height of recurrence tree is logbn   , , in recurrence tree method, we calculate total work done. if the work done at leaves is polynomially more, then leaves are the dominant part, and our result becomes the work done at leaves (case 1). if work done at leaves and root is asymptotically same, then our result becomes height multiplied by work done at any level (case 2). if work done at root is asymptotically more, then our result becomes work done at root (case 3). , examples of some standard algorithms whose time complexity can be evaluated using master method  merge sort: t(n) = 2t(n/2) + θ(n). it falls in case 2 as c is 1 and logba] is also 1. so the solution is θ(n logn) , binary search: t(n) = t(n/2) + θ(1). it also falls in case 2 as c is 0 and logba is also 0. so the solution is θ(logn) , notes:  1) it is not necessary that a recurrence of the form t(n) = at(n/b) + f(n) can be solved using master theorem. the given three cases have some gaps between them. for example, the recurrence t(n) = 2t(n/2) + n/logn cannot be solved using master method. , 2) case 2 can be extended for f(n) = θ(nclogkn)  if f(n) = θ(nclogkn) for some constant k >= 0 and c = logba, then t(n) = θ(nclogk+1n) , practice problems and solutions on master theorem. , next – analysis of algorithm | set 5 (amortized analysis introduction) , references:  http://en.wikipedia.org/wiki/master_theorem  mit video lecture on asymptotic notation | recurrences | substitution, master method  introduction to algorithms 3rd edition by clifford stein, thomas h. cormen, charles e. leiserson, ronald l. rivest , please write comments if you find anything incorrect, or you want to share more information about the topic discussed above  , writing code in comment? please use ide.geeksforgeeks.org, generate link and share the link here.][related articles, table of contents, analysis of algorithm | set 4 (solving recurrences), , start your coding journey now!]analysis of algorithm | set 4 (solving recurrences) - geeksforgeeks[1) substitution method, 2) recurrence tree method:, 3) master method:, 1., 2., 3., how does this work?, examples of some standard algorithms whose time complexity can be evaluated using master method , notes: , 1), 2), references:][courses for working professionals live dsa live classes system design java backend development full stack live explore more self-paced dsa- self paced sde theory must-do coding questions explore more for students live competitive programming data structures with c++ data science explore more self-paced dsa- self paced cip java / python / c++ explore more school courses school guide python programming learn to make apps explore more all courses, for working professionals live dsa live classes system design java backend development full stack live explore more self-paced dsa- self paced sde theory must-do coding questions explore more, live dsa live classes system design java backend development full stack live explore more, dsa live classes, system design, java backend development, full stack live, explore more, self-paced dsa- self paced sde theory must-do coding questions explore more, dsa- self paced, sde theory, must-do coding questions, explore more, for students live competitive programming data structures with c++ data science explore more self-paced dsa- self paced cip java / python / c++ explore more, live competitive programming data structures with c++ data science explore more, competitive programming, data structures with c++, data science, explore more, self-paced dsa- self paced cip java / python / c++ explore more, dsa- self paced, cip, java / python / c++, explore more, school courses school guide python programming learn to make apps explore more, school guide, python programming, learn to make apps, explore more, all courses, tutorials practice ds & algo. must do questions dsa topic-wise dsa company-wise algorithms analysis of algorithms asymptotic analysis worst, average and best cases asymptotic notations little o and little omega notations lower and upper bound theory analysis of loops solving recurrences amortized analysis what does 'space complexity' mean ? pseudo-polynomial algorithms polynomial time approximation scheme a time complexity question searching algorithms sorting algorithms graph algorithms pattern searching geometric algorithms mathematical bitwise algorithms randomized algorithms greedy algorithms dynamic programming divide and conquer backtracking branch and bound all algorithms data structures arrays linked list stack queue binary tree binary search tree heap hashing graph advanced data structure matrix strings all data structures interview corner company preparation top topics practice company questions interview experiences experienced interviews internship interviews competititve programming design patterns system design tutorial multiple choice quizzes languages c c++ java python c# javascript jquery sql php scala perl go language html css kotlin ml & data science machine learning data science cs subjects mathematics operating system dbms computer networks computer organization and architecture theory of computation compiler design digital logic software engineering gate gate computer science notes last minute notes gate cs solved papers gate cs original papers and official keys gate 2021 dates gate cs 2021 syllabus important topics for gate cs web technologies html css javascript angularjs reactjs nodejs bootstrap jquery php software designs software design patterns system design tutorial school learning school programming mathematics number system algebra trigonometry statistics probability geometry mensuration calculus maths notes (class 8-12) class 8 notes class 9 notes class 10 notes class 11 notes class 12 notes ncert solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution rd sharma solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution physics notes (class 8-11) class 8 notes class 9 notes class 10 notes class 11 notes cs exams/psus isro isro cs original papers and official keys isro cs solved papers isro cs syllabus for scientist/engineer exam ugc net ugc net cs notes paper ii ugc net cs notes paper iii ugc net cs solved papers student campus ambassador program school ambassador program project geek of the month campus geek of the month placement course competititve programming testimonials student chapter geek on the top internship careers, practice ds & algo. must do questions dsa topic-wise dsa company-wise, must do questions, dsa topic-wise, dsa company-wise, algorithms analysis of algorithms asymptotic analysis worst, average and best cases asymptotic notations little o and little omega notations lower and upper bound theory analysis of loops solving recurrences amortized analysis what does 'space complexity' mean ? pseudo-polynomial algorithms polynomial time approximation scheme a time complexity question searching algorithms sorting algorithms graph algorithms pattern searching geometric algorithms mathematical bitwise algorithms randomized algorithms greedy algorithms dynamic programming divide and conquer backtracking branch and bound all algorithms, analysis of algorithms asymptotic analysis worst, average and best cases asymptotic notations little o and little omega notations lower and upper bound theory analysis of loops solving recurrences amortized analysis what does 'space complexity' mean ? pseudo-polynomial algorithms polynomial time approximation scheme a time complexity question, asymptotic analysis, worst, average and best cases, asymptotic notations, little o and little omega notations, lower and upper bound theory, analysis of loops, solving recurrences, amortized analysis, what does 'space complexity' mean ?, pseudo-polynomial algorithms, polynomial time approximation scheme, a time complexity question, searching algorithms, sorting algorithms, graph algorithms, pattern searching, geometric algorithms, mathematical, bitwise algorithms, randomized algorithms, greedy algorithms, dynamic programming, divide and conquer, backtracking, branch and bound, all algorithms, data structures arrays linked list stack queue binary tree binary search tree heap hashing graph advanced data structure matrix strings all data structures, arrays, linked list, stack, queue, binary tree, binary search tree, heap, hashing, graph, advanced data structure, matrix, strings, all data structures, interview corner company preparation top topics practice company questions interview experiences experienced interviews internship interviews competititve programming design patterns system design tutorial multiple choice quizzes, company preparation, top topics, practice company questions, interview experiences, experienced interviews, internship interviews, competititve programming, design patterns, system design tutorial, multiple choice quizzes, languages c c++ java python c# javascript jquery sql php scala perl go language html css kotlin, c, c++, java, python, c#, javascript, jquery, sql, php, scala, perl, go language, html, css, kotlin, ml & data science machine learning data science, machine learning, data science, cs subjects mathematics operating system dbms computer networks computer organization and architecture theory of computation compiler design digital logic software engineering, mathematics, operating system, dbms, computer networks, computer organization and architecture, theory of computation, compiler design, digital logic, software engineering, gate gate computer science notes last minute notes gate cs solved papers gate cs original papers and official keys gate 2021 dates gate cs 2021 syllabus important topics for gate cs, gate computer science notes, last minute notes, gate cs solved papers, gate cs original papers and official keys, gate 2021 dates, gate cs 2021 syllabus, important topics for gate cs, web technologies html css javascript angularjs reactjs nodejs bootstrap jquery php, html, css, javascript, angularjs, reactjs, nodejs, bootstrap, jquery, php, software designs software design patterns system design tutorial, software design patterns, system design tutorial, school learning school programming mathematics number system algebra trigonometry statistics probability geometry mensuration calculus maths notes (class 8-12) class 8 notes class 9 notes class 10 notes class 11 notes class 12 notes ncert solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution rd sharma solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution physics notes (class 8-11) class 8 notes class 9 notes class 10 notes class 11 notes, school programming, mathematics number system algebra trigonometry statistics probability geometry mensuration calculus, number system, algebra, trigonometry, statistics, probability, geometry, mensuration, calculus, maths notes (class 8-12) class 8 notes class 9 notes class 10 notes class 11 notes class 12 notes, class 8 notes, class 9 notes, class 10 notes, class 11 notes, class 12 notes, ncert solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution, class 8 maths solution, class 9 maths solution, class 10 maths solution, class 11 maths solution, class 12 maths solution, rd sharma solutions class 8 maths solution class 9 maths solution class 10 maths solution class 11 maths solution class 12 maths solution, class 8 maths solution, class 9 maths solution, class 10 maths solution, class 11 maths solution, class 12 maths solution, physics notes (class 8-11) class 8 notes class 9 notes class 10 notes class 11 notes, class 8 notes, class 9 notes, class 10 notes, class 11 notes, cs exams/psus isro isro cs original papers and official keys isro cs solved papers isro cs syllabus for scientist/engineer exam ugc net ugc net cs notes paper ii ugc net cs notes paper iii ugc net cs solved papers, isro isro cs original papers and official keys isro cs solved papers isro cs syllabus for scientist/engineer exam, isro cs original papers and official keys, isro cs solved papers, isro cs syllabus for scientist/engineer exam, ugc net ugc net cs notes paper ii ugc net cs notes paper iii ugc net cs solved papers, ugc net cs notes paper ii, ugc net cs notes paper iii, ugc net cs solved papers, student campus ambassador program school ambassador program project geek of the month campus geek of the month placement course competititve programming testimonials student chapter geek on the top internship careers, campus ambassador program, school ambassador program, project, geek of the month, campus geek of the month, placement course, competititve programming, testimonials, student chapter, geek on the top, internship, careers, jobs apply for jobs post a job job-a-thon, apply for jobs, post a job, job-a-thon, events, , write come write articles for us and get featured practice learn and code with the best industry experts premium get access to ad-free content, doubt assistance and more! jobs come and find your dream job with us geeks digest quizzes geeks campus gblog articles ide campus mantri, geeks digest, quizzes, geeks campus, gblog articles, ide, campus mantri, , , home, saved videos, courses, , gblog, puzzles, what's new ?, array, matrix, strings, hashing, linked list, stack, queue, binary tree, binary search tree, heap, graph, searching, sorting, divide & conquer, mathematical, geometric, bitwise, greedy, backtracking, branch and bound, dynamic programming, pattern searching, randomized, algorithms, introduction to algorithms, difference between algorithm, pseudocode and program, difference between algorithm and flowchart, analysis of algorithms | set 1 (asymptotic analysis), analysis of algorithms | set 2 (worst, average and best cases), analysis of algorithms | set 3 (asymptotic notations), analysis of algorithms | little o and little omega notations, lower and upper bound theory, analysis of algorithms | set 4 (analysis of loops), analysis of algorithm | set 4 (solving recurrences), analysis of algorithm | set 5 (amortized analysis introduction), what does ‘space complexity’ mean?, pseudo-polynomial algorithms, interpolation search vs binary search, stability in sorting algorithms, when does the worst case of quicksort occur?, lower bound for comparison based sorting algorithms, which sorting algorithm makes minimum number of memory writes?, find the minimum length unsorted subarray, sorting which makes the complete array sorted, merge sort for linked lists, sort a nearly sorted (or k sorted) array, iterative quick sort, activity selection problem | greedy algo-1, kruskal’s minimum spanning tree algorithm | greedy algo-2, huffman coding | greedy algo-3, efficient huffman coding for sorted input | greedy algo-4, prim’s minimum spanning tree (mst) | greedy algo-5, prim’s mst for adjacency list representation | greedy algo-6, dijkstra’s shortest path algorithm | greedy algo-7, dijkstra’s algorithm for adjacency list representation | greedy algo-8, job sequencing problem, overlapping subproblems property in dynamic programming | dp-1, optimal substructure property in dynamic programming | dp-2, longest increasing subsequence | dp-3, longest common subsequence | dp-4, edit distance | dp-5, min cost path | dp-6, coin change | dp-7, matrix chain multiplication | dp-8, binomial coefficient | dp-9, 0-1 knapsack problem | dp-10, dynamic programming, naive algorithm for pattern searching, kmp algorithm for pattern searching, rabin-karp algorithm for pattern searching, optimized algorithm for pattern searching, finite automata algorithm for pattern searching, pattern searching | set 6 (efficient construction of finite automata), boyer moore algorithm for pattern searching, suffix array | set 1 (introduction), anagram substring search (or search for all permutations), pattern searching using a trie of all suffixes, pattern searching, manacher’s algorithm – linear time longest palindromic substring – part 1, manacher’s algorithm – linear time longest palindromic substring – part 2, manacher’s algorithm – linear time longest palindromic substring – part 3, manacher’s algorithm – linear time longest palindromic substring – part 4, longest even length substring such that sum of first and second half is same, print all possible strings that can be made by placing spaces, write a program to print all permutations of a given string, the knight’s tour problem | backtracking-1, rat in a maze | backtracking-2, n queen problem | backtracking-3, subset sum | backtracking-4, m coloring problem | backtracking-5, hamiltonian cycle | backtracking-6, sudoku | backtracking-7, tug of war, solving cryptarithmetic puzzles | backtracking-8, divide and conquer algorithm | introduction, write a program to calculate pow(x,n), median of two sorted arrays of same size, count inversions in an array | set 1 (using merge sort), closest pair of points using divide and conquer algorithm, divide and conquer | set 5 (strassen’s matrix multiplication), quick sort vs merge sort, divide and conquer, closest pair of points | o(nlogn) implementation, how to check if two given line segments intersect?, how to check if a given point lies inside or outside a polygon?, convex hull | set 1 (jarvis’s algorithm or wrapping), convex hull | set 2 (graham scan), given n line segments, find if any two segments intersect, check whether a given point lies inside a triangle or not, how to check if given four points form a square, write an efficient method to check if a number is multiple of 3, efficient way to multiply with 7, lucky numbers, write a program to add two numbers in base 14, babylonian method for square root, multiply two integers without using multiplication, division and bitwise operators, and no loops, print all combinations of points that can compose a given number, write you own power without using multiplication(*) and division(/) operators, program for fibonacci numbers, find the element that appears once, detect if two integers have opposite signs, count total set bits in all numbers from 1 to n, swap bits in a given number, add two numbers without using arithmetic operators, smallest of three integers without comparison operators, a boolean array puzzle, program to count number of set bits in an (big) array, next higher number with same number of set bits, optimization techniques | set 1 (modulus), graph and its representations, breadth first search or bfs for a graph, depth first search or dfs for a graph, applications of depth first search, detect cycle in a directed graph, disjoint set (or union-find) | set 1 (detect cycle in an undirected graph), detect cycle in an undirected graph, longest path in a directed acyclic graph, topological sorting, check whether a given graph is bipartite or not, linearity of expectation, expected number of trials until success, randomized algorithms | set 0 (mathematical background), randomized algorithms | set 1 (introduction and analysis), randomized algorithms | set 2 (classification and applications), randomized algorithms | set 3 (1/2 approximate median), karger’s algorithm for minimum cut | set 1 (introduction and implementation), k’th smallest/largest element in unsorted array | set 2 (expected linear time), reservoir sampling, shuffle a given array using fisher–yates shuffle algorithm, 0/1 knapsack using branch and bound, implementation of 0/1 knapsack using branch and bound, 8 puzzle problem using branch and bound, job assignment problem using branch and bound, n queen problem using branch and bound, traveling salesman problem using branch and bound, analysis of algorithms, sorting, divide and conquer, dynamic programming, backtracking, algorithm misc, np complete, searching, analysis of algorithms (recurrences), algorithms, introduction to algorithms, difference between algorithm, pseudocode and program, difference between algorithm and flowchart, analysis of algorithms | set 1 (asymptotic analysis), analysis of algorithms | set 2 (worst, average and best cases), analysis of algorithms | set 3 (asymptotic notations), analysis of algorithms | little o and little omega notations, lower and upper bound theory, analysis of algorithms | set 4 (analysis of loops), analysis of algorithm | set 4 (solving recurrences), analysis of algorithm | set 5 (amortized analysis introduction), what does ‘space complexity’ mean?, pseudo-polynomial algorithms, interpolation search vs binary search, stability in sorting algorithms, when does the worst case of quicksort occur?, lower bound for comparison based sorting algorithms, which sorting algorithm makes minimum number of memory writes?, find the minimum length unsorted subarray, sorting which makes the complete array sorted, merge sort for linked lists, sort a nearly sorted (or k sorted) array, iterative quick sort, activity selection problem | greedy algo-1, kruskal’s minimum spanning tree algorithm | greedy algo-2, huffman coding | greedy algo-3, efficient huffman coding for sorted input | greedy algo-4, prim’s minimum spanning tree (mst) | greedy algo-5, prim’s mst for adjacency list representation | greedy algo-6, dijkstra’s shortest path algorithm | greedy algo-7, dijkstra’s algorithm for adjacency list representation | greedy algo-8, job sequencing problem, overlapping subproblems property in dynamic programming | dp-1, optimal substructure property in dynamic programming | dp-2, longest increasing subsequence | dp-3, longest common subsequence | dp-4, edit distance | dp-5, min cost path | dp-6, coin change | dp-7, matrix chain multiplication | dp-8, binomial coefficient | dp-9, 0-1 knapsack problem | dp-10, dynamic programming, naive algorithm for pattern searching, kmp algorithm for pattern searching, rabin-karp algorithm for pattern searching, optimized algorithm for pattern searching, finite automata algorithm for pattern searching, pattern searching | set 6 (efficient construction of finite automata), boyer moore algorithm for pattern searching, suffix array | set 1 (introduction), anagram substring search (or search for all permutations), pattern searching using a trie of all suffixes, pattern searching, manacher’s algorithm – linear time longest palindromic substring – part 1, manacher’s algorithm – linear time longest palindromic substring – part 2, manacher’s algorithm – linear time longest palindromic substring – part 3, manacher’s algorithm – linear time longest palindromic substring – part 4, longest even length substring such that sum of first and second half is same, print all possible strings that can be made by placing spaces, write a program to print all permutations of a given string, the knight’s tour problem | backtracking-1, rat in a maze | backtracking-2, n queen problem | backtracking-3, subset sum | backtracking-4, m coloring problem | backtracking-5, hamiltonian cycle | backtracking-6, sudoku | backtracking-7, tug of war, solving cryptarithmetic puzzles | backtracking-8, divide and conquer algorithm | introduction, write a program to calculate pow(x,n), median of two sorted arrays of same size, count inversions in an array | set 1 (using merge sort), closest pair of points using divide and conquer algorithm, divide and conquer | set 5 (strassen’s matrix multiplication), quick sort vs merge sort, divide and conquer, closest pair of points | o(nlogn) implementation, how to check if two given line segments intersect?, how to check if a given point lies inside or outside a polygon?, convex hull | set 1 (jarvis’s algorithm or wrapping), convex hull | set 2 (graham scan), given n line segments, find if any two segments intersect, check whether a given point lies inside a triangle or not, how to check if given four points form a square, write an efficient method to check if a number is multiple of 3, efficient way to multiply with 7, lucky numbers, write a program to add two numbers in base 14, babylonian method for square root, multiply two integers without using multiplication, division and bitwise operators, and no loops, print all combinations of points that can compose a given number, write you own power without using multiplication(*) and division(/) operators, program for fibonacci numbers, find the element that appears once, detect if two integers have opposite signs, count total set bits in all numbers from 1 to n, swap bits in a given number, add two numbers without using arithmetic operators, smallest of three integers without comparison operators, a boolean array puzzle, program to count number of set bits in an (big) array, next higher number with same number of set bits, optimization techniques | set 1 (modulus), graph and its representations, breadth first search or bfs for a graph, depth first search or dfs for a graph, applications of depth first search, detect cycle in a directed graph, disjoint set (or union-find) | set 1 (detect cycle in an undirected graph), detect cycle in an undirected graph, longest path in a directed acyclic graph, topological sorting, check whether a given graph is bipartite or not, linearity of expectation, expected number of trials until success, randomized algorithms | set 0 (mathematical background), randomized algorithms | set 1 (introduction and analysis), randomized algorithms | set 2 (classification and applications), randomized algorithms | set 3 (1/2 approximate median), karger’s algorithm for minimum cut | set 1 (introduction and implementation), k’th smallest/largest element in unsorted array | set 2 (expected linear time), reservoir sampling, shuffle a given array using fisher–yates shuffle algorithm, 0/1 knapsack using branch and bound, implementation of 0/1 knapsack using branch and bound, 8 puzzle problem using branch and bound, job assignment problem using branch and bound, n queen problem using branch and bound, traveling salesman problem using branch and bound, analysis of algorithms, sorting, divide and conquer, dynamic programming, backtracking, algorithm misc, np complete, searching, analysis of algorithms (recurrences), difficulty level : medium, last updated : 14 jun, 2021, manish dhanuka, animagussirius7, pragatpandya, analysis, understanding time complexity with simple examples, practice questions on time complexity analysis, time complexity and space complexity, complexity of different operations in binary tree, binary search tree and avl tree, time complexity of building a heap, difference between np hard and np complete problem, analysis of different sorting techniques, analysis of algorithms | big-o analysis, np-completeness | set 1 (introduction), cyclomatic complexity, company, about us, careers, in media, contact us, privacy policy, copyright policy, learn, algorithms, data structures, sde cheat sheet, machine learning, cs subjects, video tutorials, news, top news, technology, work & career, business, finance, lifestyle, languages, python, java, cpp, golang, c#, sql, web development, web tutorials, django tutorial, html, css, javascript, bootstrap, contribute, write an article, improve an article, pick topics to write, write interview experience, internships, video internship]